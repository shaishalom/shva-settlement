

file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\config
-----------------------------------------------------
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = ssh://git@gitlab.devops.poalim.bank:31007/m28008doc/duecmcustomerexamples.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "dev"]
	remote = origin
	merge = refs/heads/dev
	rebase = false


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\applypatch-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\commit-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\fsmonitor-watchman.sample
-----------------------------------------------------
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 1) and a time in nanoseconds
# formatted as a string and outputs to stdout all files that have been
# modified since the given time. Paths must be relative to the root of
# the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $time) = @ARGV;

# Check the hook interface version

if ($version == 1) {
	# convert nanoseconds to seconds
	$time = int $time / 1000000000;
} else {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree;
if ($^O =~ 'msys' || $^O =~ 'cygwin') {
	$git_work_tree = Win32::GetCwd();
	$git_work_tree =~ tr/\\/\//;
} else {
	require Cwd;
	$git_work_tree = Cwd::cwd();
}

my $retry = 1;

launch_watchman();

sub launch_watchman {

	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	    or die "open2() failed: $!\n" .
	    "Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $time but were not transient (ie created after
	# $time but no longer exist).
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	#
	# The category of transient files that we want to ignore will have a
	# creation clock (cclock) newer than $time_t value and will also not
	# currently exist.

	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $time,
			"fields": ["name"],
			"expression": ["not", ["allof", ["since", $time, "cclock"], ["not", "exists"]]]
		}]
	END

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	die "Watchman: command returned no output.\n" .
	    "Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	    "Falling back to scanning...\n" unless $response =~ /^\{/;

	my $json_pkg;
	eval {
		require JSON::XS;
		$json_pkg = "JSON::XS";
		1;
	} or do {
		require JSON::PP;
		$json_pkg = "JSON::PP";
	};

	my $o = $json_pkg->new->utf8->decode($response);

	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
		$retry--;
		qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		print "/\0";
		eval { launch_watchman() };
		exit 0;
	}

	die "Watchman: $o->{error}.\n" .
	    "Falling back to scanning...\n" if $o->{error};

	binmode STDOUT, ":utf8";
	local $, = "\0";
	print @{$o->{files}};
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\post-update.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\pre-applypatch.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\pre-commit.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\pre-push.sample
-----------------------------------------------------
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\pre-rebase.sample
-----------------------------------------------------
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\pre-receive.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\prepare-commit-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.git\hooks\update.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.gitignore
-----------------------------------------------------
*~
.eclim
*.log
/target
.classpath
.settings/
.project


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\.gitlab-ci.yml
-----------------------------------------------------
image: "docker-28008-repo.repo.devops.poalim.bank/dctm-build-full:0.0.1"
stages:
  - build_and_deploy
  - release
    
include:
  - project: 'm28008doc/common-project'
    file: '/common_jobs.yml'









file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\datafiles\HELLO.html
-----------------------------------------------------
<HTML>
<BODY>
<p>HELLO WORLD!</p>
</BODY>
</HTML>


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\mounnas.xml
-----------------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- FIXME: docs, multiplatform? -->
<project name="switch project to dev" default="switch">
	<target name="switch">
		<echo>Switching project to the DEV configuration:</echo>
		<exec executable="cmd">
			<arg value="/C"/>
			<arg value="net"/>
			<arg value="use"/>
			<arg value="t:"/>
			<arg value="/d"/>
		</exec>
		<exec executable="cmd">
			<arg value="/C"/>
			<arg value="net"/>
			<arg value="use"/>
			<arg value="t:"/>
			<arg value="\\psmnas01.bnhpgroup.com\MesilaDocsProcessing"/>
			<arg value="/persistent:yes"/>
		</exec>
		<echo>FINISHED</echo>
	</target>
</project>


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\pom.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--parent> <groupId>com.poalim.documentum</groupId> <artifactId>parent</artifactId> 
		<version>1.0-SNAPSHOT</version> </parent -->

	<artifactId>duecmcustomer-saf-examples</artifactId>
	<groupId>com.poalim.documentum</groupId>
	<packaging>jar</packaging>
	<name>duecmcustomer-saf-examples</name>
	<description>DocumentumTesterHTTP</description>
	<version>1.0-SNAPSHOT</version>
	<dependencies>

		<!--dependency> <groupId>com.poalim.dependencies</groupId> <artifactId>documentum-71-deps</artifactId> 
			<type>pom</type> </dependency -->

		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-manage-general-doc</artifactId>
			<version>1.12.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-rtrv-general-doc</artifactId>
			<version>1.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-ecm-customer</artifactId>
			<!-- version>1.143.0</version> BEFORE CANCELING OF MANDATORY FIELDS IN 
				DocDetails -->
			<version>1.105.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-rtrv-pension-fund-doc</artifactId>
			<version>LATEST</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>to-cyberark-transfer</artifactId>
			<version>1.47.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>to-cyberark-transfer</artifactId>
			<version>1.47.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-security-token-producer</artifactId>
			<version>1.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.ht</groupId>
			<artifactId>saf-core</artifactId>
			<version>1.28.3.14</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
		</dependency>
	</dependencies>
	<build>
		<sourceDirectory>src</sourceDirectory>
		<resources>
			<resource>
				<directory>resources/</directory>
			</resource>
		</resources>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<distributionManagement>
		<repository>
			<id>artifactory</id>
			<name>documentum-test</name>
			<url>https://repo.devops.poalim.bank/artifactory/s-28008-local</url>
		</repository>
	</distributionManagement>

	  <scm>
			<developerConnection>scm:git:ssh://git@gitlab.devops.poalim.bank:31007/m28008doc/duecmcustomerexamples.git</developerConnection>
			<tag>explang-0.1</tag>
	  </scm>


</project>


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\README.md
-----------------------------------------------------

Usage examples for Documentum ESB services
=========================================================

For examples to work you may need to update saf.init properties with 
your system-specific settings, you may download one from the following link

http://prdmq3.resource.bank:1417/MqWeb/MqEsbSystems.aspx?tab=safconfig


When running examples you'll need to provide as well autentication details (user/password) 
as system properties. Several method may need additional parameters (like path for uploaded files),
please see the source.

Running example using maven exec plugin::

	mvn exec:java -Dexec.mainClass=<CLASSNAME> -Ddctm_user=<USER> -Ddctm_password=<PASSWORD>
	



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\saf-init.properties
-----------------------------------------------------
# saf initial configuration for Process Server in SystemTest
# generated by mqweb at 16/09/2013 16:54:49
#systemId = documen
#systemId = cognos
#environment = TST
#mqconn1 = 172.31.22.121:1414:TSTGEN01:SAFCONFIG.TSTGEN01
#mqconn2 = 172.31.22.142:1415:TSTGEN02:SAFCONFIG.TSTGEN02
#requestQueue = FW.MBDEPLOY.SAFCONFIG.REQUEST
#replyQueue = FW.SAFCONFIG.MBDEPLOY.REPLY
#logFile=c:\\LocalEnv\\saf\\saf.log


# saf initial configuration for Process Server in Test
# generated by mqweb at 07/11/2012 17:53:31
systemId = document
#environment = DEV
#mqconn1 = 172.31.35.181:1417:DEVGEN01:SAFCONFIG.DEVGEN01
#qconn2 = 172.31.22.121:1418:DEVGEN03:SAFCONFIG.DEVGEN03

#DEV not relevant ,cause not exist SAF listener in DEV(no Server)
#environment = DEV  
#mqconn1 = 172.31.35.181:1417:DEVGEN01:SAFCONFIG.DEVGEN01
#mqconn2 = 172.31.22.121:1418:DEVGEN03:SAFCONFIG.DEVGEN03

environment = TST
mqconn1 = 172.31.35.185:1415:TSTGEN04:SAFCONFIG.TSTGEN04
mqconn2 = 172.31.22.142:1415:TSTGEN02:SAFCONFIG.TSTGEN02
requestQueue = FW.MBDEPLOY.SAFCONFIG.REQUEST
replyQueue = FW.SAFCONFIG.MBDEPLOY.REPLY

preferredIpPerfix=172.21.3.251
#preferredIpPerfix=172.21.0.193

#logFile=c:\\saf\\saf.log

nonIbmJvm = true


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\settings.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <servers>
    <server>
      <username>${env.ARTIFACTORY_USER}</username>
      <password>${env.ARTIFACTORY_PASSWORD}</password>
      <id>central</id>
      <configuration>
	<httpConfiguration>
		<get>
			<usePreemptive>true</usePreemptive>
		</get>
	</httpConfiguration>
      </configuration>
    </server>
    <server>
      <username>${env.ARTIFACTORY_USER}</username>
      <password>${env.ARTIFACTORY_PASSWORD}</password>
      <id>snapshots</id>
      <configuration>
	<httpConfiguration>
		<get>
			<usePreemptive>true</usePreemptive>
		</get>
	</httpConfiguration>
      </configuration>
    </server>
    <server>
      <username>${env.ARTIFACTORY_USER}</username>
      <password>${env.ARTIFACTORY_PASSWORD}</password>
      <id>artifactory</id>
      <configuration>
	<httpConfiguration>
		<get>
			<usePreemptive>true</usePreemptive>
		</get>
	</httpConfiguration>
      </configuration>
    </server>
    <server>
      <username>${env.ARTIFACTORY_USER}</username>
      <password>${env.ARTIFACTORY_PASSWORD}</password>
      <id>poalim-core</id>
      <configuration>
	<httpConfiguration>
		<get>
			<usePreemptive>true</usePreemptive>
		</get>
	</httpConfiguration>
      </configuration>
    </server>
  </servers>
  <profiles>
    <profile>
      <repositories>
        <repository>
          <snapshots>
            <enabled>true</enabled>
			<updatePolicy>always</updatePolicy>
          </snapshots>
          <id>central</id>
          <name>libs-release</name>
          <url>https://repo.devops.poalim.bank/artifactory/s-28008-repo</url>
        </repository>
        <repository>
          <snapshots />
          <id>snapshots</id>
          <name>libs-snapshot</name>
          <url>https://repo.devops.poalim.bank/artifactory/s-28008-repo</url>
        </repository>
        <repository>
          <snapshots />
          <id>poalim_core</id>
          <name>poalim-core</name>
          <url>https://repo.devops.poalim.bank/artifactory/poalim-core</url>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>plugins-release</name>
          <url>https://repo.devops.poalim.bank/artifactory/s-28008-repo</url>
        </pluginRepository>
        <pluginRepository>
          <snapshots />
          <id>snapshots</id>
          <name>plugins-snapshot</name>
          <url>https://repo.devops.poalim.bank/artifactory/s-28008-repo</url>
        </pluginRepository>
      </pluginRepositories>
      <id>artifactory</id>
      <properties>
        <headlesscomposer.location>/home/FW0/java/HeadlessComposer/</headlesscomposer.location>
        <java.home.for.dfs.build>/home/FW0/java/jdk-1.6.0_27</java.home.for.dfs.build>
        <downloadSources>true</downloadSources>
        <downloadJavadocs>true</downloadJavadocs>
      </properties>

    </profile>

  </profiles>
  <activeProfiles>
    <activeProfile>artifactory</activeProfile>
  </activeProfiles>

</settings>




file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppReqAddRendtitionExample.java
-----------------------------------------------------


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class AppReqAddRendtitionExample {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
	private final static String DCTM_USER = System.getProperty("dctm_user", "tofespeulausrtst");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password", "CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		AppReqAddRendtitionExample ex = new AppReqAddRendtitionExample();
		ex.perform();
	}
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {

		
		DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("AddRendition");

		// get list of parameters 
		List<NamedQueryParam> params = preparedQuery.getParams();
		// add to it parameters

		String documentId = "a5cd4847-d9eb-49ff-8fa6-4a8dcdaf5e04";
		// ID to locate the document, may be LegacyDocumentId as well 
		params.add(createNamedStringParam(objectFactory,"DctmDocumentId",documentId));
		 
		  
		//		 // make file for upload 
		byte[] content = ("<HTML><BODY><p>HELLO WORLD from  "+documentId+"</p></BODY></HTML>\n").getBytes();
		String serverUploadDir = "R:/Async_Service_QA/";
		String relPath = "Tofes_Peula/1/";
		String uploadPath= serverUploadDir + relPath;
		File uploadFile = File.createTempFile("upload_", ".html", new File(uploadPath));
		OutputStream uploadStream = new FileOutputStream(uploadFile);
		uploadStream.write(content);
		uploadStream.flush();
		uploadStream.close();

		DocFile docFile = objectFactory.createDocFile();
		docFile.setDocFormat("html");
		docFile.setDocURL("file:///"+relPath+uploadFile.getName());
		docFile.setDocSize(uploadFile.length());
		 
		params.add(this.createNamedObjectParam(objectFactory, "DocFile", docFile));
		 
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());
		theType.setSecurityContext(context);

		// executor
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value: "+resultList.get(0).getName()+"=" + 
						   resultList.get(0).getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		
	}
	
	private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
												   String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
	}
	
	public NamedQueryParam createNamedBooleanParam(ObjectFactory objectFactory,
												   String name, Boolean value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setBoolean(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}

	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
												   String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}

	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedLongParam(ObjectFactory objectFactory, String name, Long value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setLong(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppReqCancelDocumentExample.java
-----------------------------------------------------
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class AppReqCancelDocumentExample {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user", "tofespeulausrtst");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password", "1234");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		AppReqCancelDocumentExample ex = new AppReqCancelDocumentExample();
		ex.perform();
	}
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("CancelDocument");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters

		 String documentId = "da6c78b5-48a6-49ab-a849-17393ff8d157";
		 // ID to locate the document, may be LegacyDocumentId as well 
		 params.add(createNamedStringParam(objectFactory,"LegacyDocumentId",documentId));
		 
		  
		 		 	
		 // set prepared query
		 theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());

		theType.setSecurityContext(context);
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value: "+resultList.get(0).getName()+"=" + 
				resultList.get(0).getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		
	}
	
	private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
			String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
	}

	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
			String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppReqRetrieveFilesByZip.java
-----------------------------------------------------
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Arrays;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class AppReqRetrieveFilesByZip {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		AppReqRetrieveFilesByZip ex = new AppReqRetrieveFilesByZip();
		ex.perform();
	}


	final static String[] legacyIds = {
		"6985a453-db21-4202-9469-2584ad391af1",
		"111a380f-3d82-4f00-83d0-22fb8ba200f7",
		"53d0ee2c-eef7-4ce5-9a06-6eb659520299",
		"0e57f5c3-a7ec-4454-a434-b664a6ec0215",
		"7cc3a090-70ba-4359-9e52-b24a31740bb8",
		"1da8f7f2-f7c7-4b8d-b96c-280804920f4c",
		"9bf99bdb-ca94-4c8d-a9f9-39e3339848e8",
		"65ecfe7b-271a-467b-ad19-c7b8ea2a5edf",
		"1d04e1c3-5776-4977-8e73-4f1b5ca4cc14",
		"af4a6bbe-5873-4efe-8d1e-0046ae22aa3e",
		"af956222-bb0f-4812-a0fd-5c53736140ad",
		"21eba835-9992-4046-99e5-ba959258d8c4",
		"c1e5847c-353b-4aac-b89a-33a9ed7d1d4c",
		"67406964-cc70-4768-9952-9773d5e5f6ca",
		"686e7554-a972-48f2-be6e-bd8608fb6e4d",
		"85295487-78ee-4f85-9119-21224f6e0b9c",
		"7c49de7e-b76c-4563-9b38-9d18ab599234",
		"9baf1cc7-aff5-47f7-8127-1fd9b07a8609",
		"5044590e-9d99-40cd-ad97-adcd592de416",
		"5dd6da50-4c4b-40e5-806d-b859be7d8ea9",
		"34cd3d07-5757-41ca-8fae-d403413dc31d",
		"e18432dc-141f-4324-89bd-ed9bb8920fc1",
		"5f53d9c3-ffc0-4cb0-812b-550c2fdc0ffd",
		"9b482031-1515-4bf0-904f-b5251c9e049f",
		"3abffd83-e548-466a-ac52-22fb030a1a01"};

		
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("RetrieveFilesByZip");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters

		 // ID to locate the document, may be LegacyDocumentId as well 
		 params.add(createNamedMultivalueStringParam(objectFactory,"LegacyDocumentId",legacyIds));

		 params.add(createNamedStringParam(objectFactory, "FileNameSource", "LEGACY"));
		  
		 // set prepared query
		 theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		
		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		theInvocation.setTimeout(30000);
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value: "+resultList.get(0).getName()+"=" + 
				resultList.get(0).getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		
	}
   
	private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
			String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
	}

	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
			String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}

	private NamedQueryParam createNamedMultivalueStringParam(
			ObjectFactory objectFactory, String paramName, String[] strings) throws JAXBException {
		NamedQueryParam param = objectFactory.createNamedQueryParam();
		param.setName(paramName);
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		param.setParamOrMultivalueParamOrParamList(paramValue);
		
		MultivalueQueryParam mvQueryParam = objectFactory.createMultivalueQueryParam();
		paramValue.setMultivalueParam(mvQueryParam);
		
		List valueList = param.getParamOrMultivalueParamOrParamList()
		.getMultivalueParam().getStringOrIntegerOrLong();
		for (String string : strings) {
			StringOrIntegerOrLong value =
				objectFactory.createQueryParamStringOrIntegerOrLong();
			value.setString(string);
			valueList.add(value);
		}
		return param;
	}
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppReqSaveVirtualDoc.java
-----------------------------------------------------
import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;


import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.bind.JAXBException;

/**
 * DUEcmCustomer.applicativeRequest usage sample for SAF interface 
 * Applicative request name: appx_addDocGroupIdByDocGroupId
 *
 *                             
 *  create some incomplete document using CreateDocuments service 
 *  and then updates it using the applicative request
 *
 */
public class AppReqSaveVirtualDoc {
    // NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
    public static void main(String [] args) throws InvocationException,
                                                   ApplicationException,
                                                   JAXBException,
                                                   IOException {
        AppReqSaveVirtualDoc ex = new AppReqSaveVirtualDoc();
        ex.perform();
    }
    
    public void perform() throws JAXBException,
                                 InvocationException,
                                 ApplicationException,
                                 IOException {
        // create some incomplete document
        String documentGroupId = createDocument();
        // add it to newly created virtual doc using applicativeRequest
        saveVirtualDoc(documentGroupId);
    }
    
        
    
    private void saveVirtualDoc(String documentGroupId) throws
        JAXBException, InvocationException, ApplicationException, IOException {

        String newDocumentId = UUID.randomUUID().toString();
    
        System.out.println("saveing vdoc for group id '"+documentGroupId+"'");
        System.out.println("Document id will be '"+newDocumentId+"'");
    
        DuEcmCustomerApplicativeRequestInvocation theInvocation =
            new DuEcmCustomerApplicativeRequestInvocation();
        ObjectFactory objectFactory = theInvocation.getObjectFactory();
        ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
        theInvocation.setParameters(theType);
        
        // 1. prepare prepared query param
        PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
        
        preparedQuery.setContextName(null);
        preparedQuery.setName("SaveVirtualDoc");

        // get list of parameters 
        List<NamedQueryParam> params = preparedQuery.getParams();
        // add to it parameters
         
        // Group ID to locate the documents
        params.add(createNamedStringParam(objectFactory,
                                          "LegacyDocumentId", newDocumentId));
        params.add(createNamedIntegerParam(objectFactory,
                                          "ProjectId", 3));
		params.add(createNamedIntegerParam(objectFactory,
										   "SystemCode", 1));

		// document group ID of the documents to be added to
		// the virtual document
        params.add(createNamedStringParam(objectFactory,
                                          "DocumentGroupId",documentGroupId));
    
        theType.setPreparedQuery(preparedQuery);
        
        // 2. prepare rest of parameters
        // auth
        theType.setSecurityContext(makeUserSC(objectFactory));

        // details of executing bank clerk/system
        ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingEmpIdCode("123456789");
        executorDetails.setExecutingEmpFullName("Ploni Almoni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setBankolId(1);
        executorDetails.setTerminalChannelId(111);
        executorDetails.setExecutingBranchId(555);
        theType.setExecutorDetails(executorDetails);
        
        theInvocation.invoke();
        // if we got here than the method has succeded, so the following will work
		// reading SAF output is not that easy
        ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
        List <NamedQueryParam>resultList = response.getRequestResultsList();
		for (int i = 0; i < resultList.size(); i++) {
			System.out.println("return value ["+i+"]:");
			System.out.println("   name: "  + resultList.get(i).getName());
			List <NamedQueryParam>retParams =
				resultList.get(i).getParamOrMultivalueParamOrParamList().getParamList().getParams();
			for (NamedQueryParam  param : retParams) {
				System.out.println("       name: "+param.getName()+ "   value: "+param.getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
			}
		}
    }

    private SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
        SecurityContext safSc = factory.createSecurityContext();
        safSc.setUserName(DCTM_USER);
        safSc.setPassword(DCTM_PASSWORD);
        safSc.setRepositoryName(DCTM_REPO);
        //System.out.println("Using '"+safSc.getUserName()+"/"+safSc.getPassword()+"'");
        return safSc;
    }

    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
                                                   String name, Object object) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
        param.getStringOrIntegerOrLong().setObject(anyType);
        ParamOrMultivalueParamOrParamList paramValue =
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
                                                   String name, String value) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (String)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setString(value);
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

	private NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory,
                                                   String name, Integer value) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (String)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setInteger(value);
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    private NamedQueryParam createNamedMultiValueStringParam(ObjectFactory objectFactory,
                                                             String name, String ... values) throws JAXBException {
        // create parameter and give it name
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create multi valued parameter and set its value (String)
        MultivalueQueryParam param = objectFactory.createMultivalueQueryParam();
        for (String value : values) {
            StringOrIntegerOrLong stringValue = objectFactory.createQueryParamStringOrIntegerOrLong();
            stringValue.setString(value);
            param.getStringOrIntegerOrLong().add(stringValue);
        }
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setMultivalueParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
    
        return namedParam;
    }

    
    
    /**** document creation related functions ******/
    private String createDocument() throws InvocationException, ApplicationException, JAXBException, IOException {
        ObjectFactory factory = new ObjectFactory();
        
        // 1. Create SecurityContext with username/password and repository name
        SecurityContext safSC = this.makeUserSC(factory);
                
        // 2. create document metadata
        List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
        DocData docData = createIncompleteDocData(factory);
        DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
        docDataForCreate.setDocData(docData);
        docDataForCreateList.add(docDataForCreate);
        
        
        // call ESB 
        List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
        for (DocIdData idData : safResults) {
            System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
            
        }
        return (String)docData.getDocCustomerData().getDocDetails().getDocumentGroupIds().get(0);
    }
    

    private DocData createIncompleteDocData(ObjectFactory factory) throws IOException, JAXBException {
        DocData docData = factory.createDocData();
        docData.getDocPropertyExtensions().clear();
        //docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
        docData.setDocCustomerData(createIncompleteDocCustomerData(factory));
        return docData;
    }
    
    
    private static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
        ExecutorDetails executorDetails = factory.createExecutorDetails();
        executorDetails.setBankolId(1);
        executorDetails.setEmpIdDocumentTypeCode(1);
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingBranchId(1);
        executorDetails.setExecutingEmpIdCode("1234567890");
        executorDetails.setExecutingEmpFullName("Pakid Ploni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setTerminalChannelId(1);
        return executorDetails;
    }
    
    /**
     * Create document metadata
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocCustomerData createIncompleteDocCustomerData(ObjectFactory factory) throws JAXBException {
        DocCustomerData customerData = factory.createDocCustomerData();
        customerData.setExecutorDetails(createFullExecutorDetails(factory));
        customerData.setDocDetails(createIncompleteDocDetails(factory));
        return customerData;
    }
    
    
    /**
     * Create general document METADATA, that is attributes that
     * describe document itself, not it's customer, account, contents, paper copy, etc
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocDetails createIncompleteDocDetails(ObjectFactory factory) throws JAXBException {
        
        String legacyid = UUID.randomUUID().toString();
        System.out.println("Legacy id is: '"+ legacyid +"'");
        
        DocDetails details = factory.createDocDetails();
        // Id of business process that creates this document - from ARIS - doron segev
        details.setBusinessProcessId(11);

        // Those 3 fields are mandatory. The triple must be consistent with DPT204X
        // (managed by Ronen Sofer). 
        details.setBusinessAreaCode(190);
        // this one should match FormId, legacy code checks that
        details.setBusinessSubAreaCode(90);
        // code of document type  "MAKAT", 
        details.setDocumentFormId("5555510052");
        
        // Source channel: branch office, Internet, mobile, fax, etc
        details.setChannelId(13);
        // code of transaction currency
        //details.setCurrencyCode(1);

        // 1 - incomplete document, metadata will not be checked fully 
        //     for validity before document is created
        details.setDocCompletenessCode(1);
                
        // group id that can be used to identify group of related documents. 
        // a document can be member of several groups
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
        List documentGroupIds = details.getDocumentGroupIds();
        documentGroupIds.clear();
        documentGroupIds.add(UUID.randomUUID().toString());
        //documentGroupIds.add("group2");
        
        // document date - in most cases must be same date that appears in the text of the document
        details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
        // optional customer's document user provided unique document id
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
        details.setLegacyDocumentId(legacyid);
        
        // is the document current or historic: 1 - current
        // project ID (Faxes, tofes peula, etc).
        details.setProjectId(3);
        // scan status code - not for scanning
        details.setSystemCode(0);
        // current or archive document: 1 - current
        details.setOngoingOrHistoryCode(1);
        // has printboss data that can be used to recreate the content
        return details;
    }
    
    
    
    private static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
        String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
            + "000";
        Date date = new Date(Long.valueOf(str));
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }
    
    /**
     *
     *
     * @param docDataForCreateList
     * @param safSC
     * @return
     *
     * @throws JAXBException
     * @throws IOException
     * @throws InvocationException
     * @throws ApplicationException
     */
    private List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
        throws JAXBException, IOException, InvocationException, ApplicationException {
        // For Async
        //DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
        // For Sync
        DuEcmCustomerCreateDocumentsInvocation theInvocation = 
            new DuEcmCustomerCreateDocumentsInvocation();
        
        com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
            .getObjectFactory().createCreateDocuments_type();
        
        theType.setSecurityContext(safSC);
        
        theType.getDocDataForCreateList().addAll(docDataForCreateList);
    
        theType.setVersionLabel("");
        
        theInvocation.setParameters(theType);
        
        // ASYNC INVOCATION: 
        // value is name of an ESB configuration, not a regular queue name   
        //theInvocation.setLogicalReplyToQueueName(value);
        //theInvocation.setLogicalReplyToQueue(true);
        //theInvocation.invokeSendAsync();
        
        // SYNC INVOCATION
        theInvocation.invoke();
        DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
        List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
        System.out.println("created "+safResults.size()+ " documents");
        return safResults;
    }

}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxAddDocumentGroupIdByDocumentGroupId.java
-----------------------------------------------------
import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;


import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.bind.JAXBException;

/**
 * DUEcmCustomer.applicativeRequest usage sample for SAF interface 
 * Applicative request name: appx_addDocGroupIdByDocGroupId
 *
 *                             
 *  create some incomplete document using CreateDocuments service 
 *  and then updates it using the applicative request
 *
 */
public class AppxAddDocumentGroupIdByDocumentGroupId {
    // NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
    public static void main(String [] args) throws InvocationException,
                                                   ApplicationException,
                                                   JAXBException,
                                                   IOException {
        AppxAddDocumentGroupIdByDocumentGroupId ex = new AppxAddDocumentGroupIdByDocumentGroupId();
        ex.perform();
    }
    
    public void perform() throws JAXBException,
                                 InvocationException,
                                 ApplicationException,
                                 IOException {
        // create some incomplete document
        String documentGroupId = createDocument();
        // update it using applicativeRequest
        updateDocument(documentGroupId);
    }
    
        
    
    private void updateDocument(String documentGroupId) throws
        JAXBException, InvocationException, ApplicationException, IOException {

        String newDocumentGroupId = UUID.randomUUID().toString();
    
        System.out.println("Updating documents in group '"+documentGroupId+"'");
        System.out.println("Adding new group id '"+newDocumentGroupId+"'");
    
        DuEcmCustomerApplicativeRequestInvocation theInvocation =
            new DuEcmCustomerApplicativeRequestInvocation();
        ObjectFactory objectFactory = theInvocation.getObjectFactory();
        ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
        theInvocation.setParameters(theType);
        
        // 1. prepare prepared query param
        PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
        
        preparedQuery.setContextName(null);
        preparedQuery.setName("appx_addDocGroupIdByDocGroupId");

        // get list of parameters 
        List<NamedQueryParam> params = preparedQuery.getParams();
        // add to it parameters
         
        // Group ID to locate the documents
        params.add(createNamedStringParam(objectFactory,
                                          "DocumentGroupId",documentGroupId));

        params.add(createNamedStringParam(objectFactory,
                                          "AddDocumentGroupId",newDocumentGroupId));
    

    
        theType.setPreparedQuery(preparedQuery);
        
        // 2. prepare rest of parameters
        // auth
        theType.setSecurityContext(makeUserSC(objectFactory));

        // details of executing bank clerk/system
        ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingEmpIdCode("123456789");
        executorDetails.setExecutingEmpFullName("Ploni Almoni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setBankolId(1);
        executorDetails.setTerminalChannelId(111);
        executorDetails.setExecutingBranchId(555);
        theType.setExecutorDetails(executorDetails);
        
        theInvocation.invoke();
        // if we got here than the method has succeded, so the following
        ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
        List <NamedQueryParam>resultList = response.getRequestResultsList();
        if (resultList.size()!= 1 || null == resultList.get(0)) { 
            System.out.println("Got invalid or empty result list");
        } else {
            System.out.println("return value: "+resultList.get(0).getName()+"=" + 
                               resultList.get(0).getParamOrMultivalueParamOrParamList().
                               getParam().getStringOrIntegerOrLong().getString());
        }
    
    }

    private SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
        SecurityContext safSc = factory.createSecurityContext();
        safSc.setUserName(DCTM_USER);
        safSc.setPassword(DCTM_PASSWORD);
        safSc.setRepositoryName(DCTM_REPO);
        //System.out.println("Using '"+safSc.getUserName()+"/"+safSc.getPassword()+"'");
        return safSc;
    }

    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
                                                   String name, Object object) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
        param.getStringOrIntegerOrLong().setObject(anyType);
        ParamOrMultivalueParamOrParamList paramValue =
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    

    private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
                                                   String name, String value) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (String)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setString(value);
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }
    
    private NamedQueryParam createNamedMultiValueStringParam(ObjectFactory objectFactory,
                                                             String name, String ... values) throws JAXBException {
        // create parameter and give it name
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create multi valued parameter and set its value (String)
        MultivalueQueryParam param = objectFactory.createMultivalueQueryParam();
        for (String value : values) {
            StringOrIntegerOrLong stringValue = objectFactory.createQueryParamStringOrIntegerOrLong();
            stringValue.setString(value);
            param.getStringOrIntegerOrLong().add(stringValue);
        }
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setMultivalueParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
    
        return namedParam;
    }

    
    
    /**** document creation related functions ******/
    private String createDocument() throws InvocationException, ApplicationException, JAXBException, IOException {
        ObjectFactory factory = new ObjectFactory();
        
        // 1. Create SecurityContext with username/password and repository name
        SecurityContext safSC = this.makeUserSC(factory);
                
        // 2. create document metadata
        List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
        DocData docData = createIncompleteDocData(factory);
        DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
        docDataForCreate.setDocData(docData);
        docDataForCreateList.add(docDataForCreate);
        
        
        // call ESB 
        List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
        for (DocIdData idData : safResults) {
            System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
            
        }
        return (String)docData.getDocCustomerData().getDocDetails().getDocumentGroupIds().get(0);
    }
    

    private DocData createIncompleteDocData(ObjectFactory factory) throws IOException, JAXBException {
        DocData docData = factory.createDocData();
        docData.getDocPropertyExtensions().clear();
        //docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
        docData.setDocCustomerData(createIncompleteDocCustomerData(factory));
        return docData;
    }
    
    
    private static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
        ExecutorDetails executorDetails = factory.createExecutorDetails();
        executorDetails.setBankolId(1);
        executorDetails.setEmpIdDocumentTypeCode(1);
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingBranchId(1);
        executorDetails.setExecutingEmpIdCode("1234567890");
        executorDetails.setExecutingEmpFullName("Pakid Ploni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setTerminalChannelId(1);
        return executorDetails;
    }
    
    /**
     * Create document metadata
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocCustomerData createIncompleteDocCustomerData(ObjectFactory factory) throws JAXBException {
        DocCustomerData customerData = factory.createDocCustomerData();
        customerData.setExecutorDetails(createFullExecutorDetails(factory));
        customerData.setDocDetails(createIncompleteDocDetails(factory));
        return customerData;
    }
    
    
    /**
     * Create general document METADATA, that is attributes that
     * describe document itself, not it's customer, account, contents, paper copy, etc
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocDetails createIncompleteDocDetails(ObjectFactory factory) throws JAXBException {
        
        String legacyid = UUID.randomUUID().toString();
        System.out.println("Legacy id is: '"+ legacyid +"'");
        
        DocDetails details = factory.createDocDetails();
        // Id of business process that creates this document - from ARIS - doron segev
        details.setBusinessProcessId(11);

        // Those 3 fields are mandatory. The triple must be consistent with DPT204X
        // (managed by Ronen Sofer). 
        details.setBusinessAreaCode(190);
        // this one should match FormId, legacy code checks that
        details.setBusinessSubAreaCode(90);
        // code of document type  "MAKAT", 
        details.setDocumentFormId("5555510052");
        
        // Source channel: branch office, Internet, mobile, fax, etc
        details.setChannelId(13);
        // code of transaction currency
        //details.setCurrencyCode(1);

        // 1 - incomplete document, metadata will not be checked fully 
        //     for validity before document is created
        details.setDocCompletenessCode(1);
                
        // group id that can be used to identify group of related documents. 
        // a document can be member of several groups
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
        List documentGroupIds = details.getDocumentGroupIds();
        documentGroupIds.clear();
        documentGroupIds.add(UUID.randomUUID().toString());
        //documentGroupIds.add("group2");
        
        // document date - in most cases must be same date that appears in the text of the document
        details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
        // optional customer's document user provided unique document id
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
        details.setLegacyDocumentId(legacyid);
        
        // is the document current or historic: 1 - current
        // project ID (Faxes, tofes peula, etc).
        details.setProjectId(3);
        // scan status code - not for scanning
        details.setSystemCode(0);
        // current or archive document: 1 - current
        details.setOngoingOrHistoryCode(1);
        // has printboss data that can be used to recreate the content
        return details;
    }
    
    
    
    private static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
        String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
            + "000";
        Date date = new Date(Long.valueOf(str));
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }
    
    /**
     *
     *
     * @param docDataForCreateList
     * @param safSC
     * @return
     *
     * @throws JAXBException
     * @throws IOException
     * @throws InvocationException
     * @throws ApplicationException
     */
    private List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
        throws JAXBException, IOException, InvocationException, ApplicationException {
        // For Async
        //DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
        // For Sync
        DuEcmCustomerCreateDocumentsInvocation theInvocation = 
            new DuEcmCustomerCreateDocumentsInvocation();
        
        com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
            .getObjectFactory().createCreateDocuments_type();
        
        theType.setSecurityContext(safSC);
        
        theType.getDocDataForCreateList().addAll(docDataForCreateList);
    
        theType.setVersionLabel("");
        
        theInvocation.setParameters(theType);
        
        // ASYNC INVOCATION: 
        // value is name of an ESB configuration, not a regular queue name   
        //theInvocation.setLogicalReplyToQueueName(value);
        //theInvocation.setLogicalReplyToQueue(true);
        //theInvocation.invokeSendAsync();
        
        // SYNC INVOCATION
        theInvocation.invoke();
        DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
        List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
        System.out.println("created "+safResults.size()+ " documents");
        return safResults;
    }

}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxAddDocumentGroupIdByLegacy.java
-----------------------------------------------------
import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;


import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.bind.JAXBException;

/**
 * DUEcmCustomer.applicativeRequest usage sample for SAF interface 
 * Applicative request name: appx_addDocGroupIdByDocGroupId
 *
 *                             
 *  create some incomplete document using CreateDocuments service 
 *  and then updates it using the applicative request
 *
 */
public class AppxAddDocumentGroupIdByLegacy {
    // NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
    public static void main(String [] args) throws InvocationException,
                                                   ApplicationException,
                                                   JAXBException,
                                                   IOException {
        AppxAddDocumentGroupIdByLegacy ex = new AppxAddDocumentGroupIdByLegacy();
        ex.perform();
    }
    
    public void perform() throws JAXBException,
                                 InvocationException,
                                 ApplicationException,
                                 IOException {
        // create some incomplete document
        String legacyDocumentId = createDocument();
        // update it using applicativeRequest
        updateDocument(legacyDocumentId);
		updateDocument(legacyDocumentId);
		updateDocument(legacyDocumentId);
    }
    
        
    
    private void updateDocument(String legacyDocumentId) throws
        JAXBException, InvocationException, ApplicationException, IOException {

        String newDocumentGroupId = UUID.randomUUID().toString();
    
        System.out.println("Updating document with legacyDocumentId '"+legacyDocumentId+"'");
        System.out.println("Adding new group id '"+newDocumentGroupId+"'");
    
        DuEcmCustomerApplicativeRequestInvocation theInvocation =
            new DuEcmCustomerApplicativeRequestInvocation();
        ObjectFactory objectFactory = theInvocation.getObjectFactory();
        ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
        theInvocation.setParameters(theType);
        
        // 1. prepare prepared query param
        PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
        
        preparedQuery.setContextName(null);
        preparedQuery.setName("AddDocGroupIdbyLegacy");

        // get list of parameters 
        List<NamedQueryParam> params = preparedQuery.getParams();
        // add to it parameters
         
        // Group ID to locate the documents
        params.add(createNamedStringParam(objectFactory,"LegacyDocumentId", legacyDocumentId));

        params.add(createNamedStringParam(objectFactory,"DocumentGroupId",  newDocumentGroupId));
    

    
        theType.setPreparedQuery(preparedQuery);
        
        // 2. prepare rest of parameters
        // auth
        theType.setSecurityContext(makeUserSC(objectFactory));

        // details of executing bank clerk/system
        ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingEmpIdCode("123456789");
        executorDetails.setExecutingEmpFullName("Ploni Almoni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setBankolId(1);
        executorDetails.setTerminalChannelId(111);
        executorDetails.setExecutingBranchId(555);
        theType.setExecutorDetails(executorDetails);
        
        theInvocation.invoke();
        // if we got here than the method has succeded, so the following
        ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
        List <NamedQueryParam>resultList = response.getRequestResultsList();
        if (resultList.size()!= 1 || null == resultList.get(0)) { 
            System.out.println("Got invalid or empty result list");
        } else {
            System.out.println("return value: "+resultList.get(0).getName()+"=" + 
                               resultList.get(0).getParamOrMultivalueParamOrParamList().
                               getParam().getStringOrIntegerOrLong().getString());
        }
    
    }

    private SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
        SecurityContext safSc = factory.createSecurityContext();
        safSc.setUserName(DCTM_USER);
        safSc.setPassword(DCTM_PASSWORD);
        safSc.setRepositoryName(DCTM_REPO);
        //System.out.println("Using '"+safSc.getUserName()+"/"+safSc.getPassword()+"'");
        return safSc;
    }

    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
                                                   String name, Object object) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
        param.getStringOrIntegerOrLong().setObject(anyType);
        ParamOrMultivalueParamOrParamList paramValue =
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    

    private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
                                                   String name, String value) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (String)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setString(value);
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }
    
    private NamedQueryParam createNamedMultiValueStringParam(ObjectFactory objectFactory,
                                                             String name, String ... values) throws JAXBException {
        // create parameter and give it name
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create multi valued parameter and set its value (String)
        MultivalueQueryParam param = objectFactory.createMultivalueQueryParam();
        for (String value : values) {
            StringOrIntegerOrLong stringValue = objectFactory.createQueryParamStringOrIntegerOrLong();
            stringValue.setString(value);
            param.getStringOrIntegerOrLong().add(stringValue);
        }
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue = 
            objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setMultivalueParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
    
        return namedParam;
    }

    
    
    /**** document creation related functions ******/
    private String createDocument() throws InvocationException, ApplicationException, JAXBException, IOException {
        ObjectFactory factory = new ObjectFactory();
        
        // 1. Create SecurityContext with username/password and repository name
        SecurityContext safSC = this.makeUserSC(factory);
                
        // 2. create document metadata
        List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
        DocData docData = createIncompleteDocData(factory);
        DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
        docDataForCreate.setDocData(docData);
        docDataForCreateList.add(docDataForCreate);
        
        
        // call ESB 
        List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
        for (DocIdData idData : safResults) {
            System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
            
        }
        return (String)docData.getDocCustomerData().getDocDetails().getLegacyDocumentId();
    }
    

    private DocData createIncompleteDocData(ObjectFactory factory) throws IOException, JAXBException {
        DocData docData = factory.createDocData();
        docData.getDocPropertyExtensions().clear();
        //docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
        docData.setDocCustomerData(createIncompleteDocCustomerData(factory));
        return docData;
    }
    
    
    private static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
        ExecutorDetails executorDetails = factory.createExecutorDetails();
        executorDetails.setBankolId(1);
        executorDetails.setEmpIdDocumentTypeCode(1);
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingBranchId(1);
        executorDetails.setExecutingEmpIdCode("1234567890");
        executorDetails.setExecutingEmpFullName("Pakid Ploni");
        executorDetails.setIpAddress("127.0.0.1");
        executorDetails.setTerminalChannelId(1);
        return executorDetails;
    }
    
    /**
     * Create document metadata
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocCustomerData createIncompleteDocCustomerData(ObjectFactory factory) throws JAXBException {
        DocCustomerData customerData = factory.createDocCustomerData();
        customerData.setExecutorDetails(createFullExecutorDetails(factory));
        customerData.setDocDetails(createIncompleteDocDetails(factory));
        return customerData;
    }
    
    
    /**
     * Create general document METADATA, that is attributes that
     * describe document itself, not it's customer, account, contents, paper copy, etc
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocDetails createIncompleteDocDetails(ObjectFactory factory) throws JAXBException {
        
        String legacyid = UUID.randomUUID().toString();
        System.out.println("Legacy id is: '"+ legacyid +"'");
        
        DocDetails details = factory.createDocDetails();
        // Id of business process that creates this document - from ARIS - doron segev
        details.setBusinessProcessId(11);

        // Those 3 fields are mandatory. The triple must be consistent with DPT204X
        // (managed by Ronen Sofer). 
        details.setBusinessAreaCode(190);
        // this one should match FormId, legacy code checks that
        details.setBusinessSubAreaCode(90);
        // code of document type  "MAKAT", 
        details.setDocumentFormId("5555510052");
        
        // Source channel: branch office, Internet, mobile, fax, etc
        details.setChannelId(13);
        // code of transaction currency
        //details.setCurrencyCode(1);

        // 1 - incomplete document, metadata will not be checked fully 
        //     for validity before document is created
        details.setDocCompletenessCode(1);
                
        // group id that can be used to identify group of related documents. 
        // a document can be member of several groups
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
        List documentGroupIds = details.getDocumentGroupIds();
        documentGroupIds.clear();
        documentGroupIds.add(UUID.randomUUID().toString());
        //documentGroupIds.add("group2");
        
        // document date - in most cases must be same date that appears in the text of the document
        details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
        // optional customer's document user provided unique document id
        // if provided must contain predefined system specific prefix - Doron Segev
        // or, alternatively, be standard UUID
        // details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
        details.setLegacyDocumentId(legacyid);
        
        // is the document current or historic: 1 - current
        // project ID (Faxes, tofes peula, etc).
        details.setProjectId(3);
        // scan status code - not for scanning
        details.setSystemCode(0);
        // current or archive document: 1 - current
        details.setOngoingOrHistoryCode(1);
        // has printboss data that can be used to recreate the content
        return details;
    }
    
    
    
    private static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
        String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
            + "000";
        Date date = new Date(Long.valueOf(str));
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }
    
    /**
     *
     *
     * @param docDataForCreateList
     * @param safSC
     * @return
     *
     * @throws JAXBException
     * @throws IOException
     * @throws InvocationException
     * @throws ApplicationException
     */
    private List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
        throws JAXBException, IOException, InvocationException, ApplicationException {
        // For Async
        //DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
        // For Sync
        DuEcmCustomerCreateDocumentsInvocation theInvocation = 
            new DuEcmCustomerCreateDocumentsInvocation();
        
        com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
            .getObjectFactory().createCreateDocuments_type();
        
        theType.setSecurityContext(safSC);
        
        theType.getDocDataForCreateList().addAll(docDataForCreateList);
    
        theType.setVersionLabel("");
        
        theInvocation.setParameters(theType);
        
        // ASYNC INVOCATION: 
        // value is name of an ESB configuration, not a regular queue name   
        //theInvocation.setLogicalReplyToQueueName(value);
        //theInvocation.setLogicalReplyToQueue(true);
        //theInvocation.invokeSendAsync();
        
        // SYNC INVOCATION
        theInvocation.invoke();
        DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
        List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
        System.out.println("created "+safResults.size()+ " documents");
        return safResults;
    }

}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxAppendDocByParam.java
-----------------------------------------------------


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;

import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class AppxAppendDocByParam {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","dctm");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","dctm1");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		AppxAppendDocByParam ex = new AppxAppendDocByParam();
		ex.perform();
	}
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("AppendDocByParam");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters

		 String srcDocId =    "08f7d7ca-76c3-4f99-9dfb-928f2e2def23";
		 String newDocId = "zzzzasadhasjdhjksadhkjashdkj";
		 // ID to locate the source document, may be LegacyDocumentId as well
		 params.add(createNamedStringParam(objectFactory,"SrcLegacyDocumentId",srcDocId));
		 // ID for document to be created

		 // attributes to be updated in the copy document
		 params.add(createNamedStringParam(objectFactory,"LegacyDocumentId",newDocId));

		 params.add(createNamedStringParam(objectFactory,"DocumentFormId","9999999999"));
		 // add dates interval to list of parameters
		 Calendar ddate = Calendar.getInstance();
		 ddate.set(Calendar.YEAR,  2018);
		 ddate.set(Calendar.MONTH, 2);
		 ddate.set(Calendar.MONTH, 14);
		 params.add(this.createNamedDateParam(objectFactory, "LegacyDocumentEntryDttm", ddate));
		 
		 // PDF content to be appended
		 params.add(createNamedObjectParam(objectFactory,"DocFile",
										   createInBandDocFile(objectFactory,
															   "HELLO.pdf",
															   "pdf")));
		 // set prepared query
		 theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		
		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(42);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		System.out.println("CALL SUCCEEDED");
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value[0]: "+resultList.get(0).getName()+"=" + 
						   resultList.get(0).getParamOrMultivalueParamOrParamList().getParam());
		
	}

    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
												   String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}	


	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
			String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}


	private  DocFile createInBandDocFile(ObjectFactory factory, String fileName, String format)
			throws IOException, JAXBException {
		RandomAccessFile file = null;
		try {
			file = new RandomAccessFile(fileName,"r"); 
			long size = file.length();
			// assume sane file size
			byte[] buffer = new byte[ (int)size ];
			file.readFully(buffer);
			DocFile docFile = factory.createDocFile();
			docFile.setDocFormat(format);
			docFile.setDocStream(buffer);
			// no sense to set docSize,checksum: ESB guarantees integrity 
			return docFile;
		} finally {
			if (null!=file) {
				file.close();
			}
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxAppendDocByParam2.java
-----------------------------------------------------
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;

import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;


/* Example for updated version of the service that can concatenate any number of documents
 * 
 *
 */
public class AppxAppendDocByParam2 {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","someuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","somepassword");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws
		InvocationException, ApplicationException, JAXBException, IOException {
		AppxAppendDocByParam2 ex = new AppxAppendDocByParam2();
		ex.perform();
	}
	
	public void perform() throws
		JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation =
			 new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("AppendDocByParam");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters

		 String srcLegacyDocId =    "08f7d7ca-76c3-4f99-9dfb-928f2e2def23";
		 params.add(createNamedStringParam(objectFactory,"SrcLegacyDocumentId",srcLegacyDocId));

		 // ID for document to be created/updated
		 String legacyDocumentId = "SOMELEGACYID123334543563487658";

		 // attributes to be updated in the copy document
		 params.add(createNamedStringParam(objectFactory,"LegacyDocumentId",legacyDocumentId));

		 params.add(createNamedStringParam(objectFactory,"DocumentFormId","9999999999"));
		 // add dates interval to list of parameters
		 Calendar ddate = Calendar.getInstance();
		 ddate.set(Calendar.YEAR,  2018);
		 ddate.set(Calendar.MONTH, 2);
		 ddate.set(Calendar.MONTH, 14);
		 params.add(this.createNamedDateParam(objectFactory, "LegacyDocumentEntryDttm", ddate));


		 // List of files to be concatenated
		 NamedQueryParam appendPath = createNamedQueryParamList(objectFactory, "AppendPath");
		 params.add(appendPath);
		 List apParList = appendPath.getParamOrMultivalueParamOrParamList()
			 .getParamList().getParams();
		 // add first entry to list (inline in the ESB message)

		 final String LEGACY_DOCUMENT_ID_PAR = "LegacyDocumentId";
		 final String DCTM_DOCUMENT_ID_PAR = "DctmDocumentId";
		 final String DOCFILE_PAR = "DocFile";
		 
		 apParList.add(createNamedStringParam(objectFactory, LEGACY_DOCUMENT_ID_PAR,
		 											  "61779992018121300001352"));
		 //apParList.add(createNamedStringParam(objectFactory,
		 //DCTM_DOCUMENT_ID_PAR,
		 //									  "68243f93-5e1d-4601-a654-fd178c133d85"));
		 //apParList.add(createNamedStringParam(objectFactory,
		 //LEGACY_DOCUMENT_ID_PAR, "page2LegacyId"));
		 apParList.add(createNamedObjectParam(objectFactory,   DOCFILE_PAR,
		  							 createInBandDocFile(objectFactory, "HELLO.pdf", "pdf")));
		 //apParList.add(createNamedObjectParam(objectFactory,  DOCFILE_PAR,
		 //							 createInBandDocFile(objectFactory, "HELLO2.pdf", "pdf")));
		 //apParList.add(createNamedObjectParam(objectFactory,  DOCFILE_PAR,
		 //									  createInBandDocFile(objectFactory, "HELLO2.pdf", "pdf")));
		 
		 //DocFile f5 = objectFactory.createDocFile();
		 //f5.setDocURL("file:///Faxes/appbp_72dd5fc8-483e-4ee4-a0f6-b9f44cac596b_in.pdf");
		 //f5.setDocFormat("pdf");
		 //apParList.add(createNamedObjectParam(objectFactory, "DocFile",	  f5));

		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(42);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);

		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		System.out.println("CALL SUCCEEDED");
	}


	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
												   String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}	


	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
												   String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}


	private  DocFile createInBandDocFile(ObjectFactory factory, String fileName, String format)
		throws IOException, JAXBException {
		RandomAccessFile file = null;
		try {
			file = new RandomAccessFile(fileName,"r"); 
			long size = file.length();
			// assume sane file size
			byte[] buffer = new byte[ (int)size ];
			file.readFully(buffer);
			DocFile docFile = factory.createDocFile();
			docFile.setDocFormat(format);
			docFile.setDocStream(buffer);
			// no sense to set docSize,checksum: ESB guarantees integrity 
			return docFile;
		} finally {
			if (null!=file) {
				file.close();
			}
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxUpdateCustOrAccByDocumentGroupId.java
-----------------------------------------------------
import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;


import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.bind.JAXBException;

/**
 * DUEcmCustomer.applicativeRequest usage sample for SAF interface 
 * Applicative request name: "appx_updateCustOrAccByDocumentGroupId"
 *
 *                             
 *  create some incomplete document using CreateDocuments service 
 *  and then updates it using the applicative request
 *
 */ 
public class AppxUpdateCustOrAccByDocumentGroupId {
    // NOTE: NEED TO CHANGE CONNECTION PROPERTIES: APPLICATIVE USER/PASSWORD/REPO
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
	
    public static void main(String [] args) throws InvocationException,
												   ApplicationException,
												   JAXBException,
												   IOException {
		AppxUpdateCustOrAccByDocumentGroupId ex = new AppxUpdateCustOrAccByDocumentGroupId();
		ex.perform();
    }
	
    public void perform() throws JAXBException,
								 InvocationException,
								 ApplicationException,
								 IOException {
		// create some incomplete document
		String documentGroupId = createDocument();
		// update it using applicativeRequest
		updateDocument(documentGroupId);
    }
	
		
	
    private void updateDocument(String documentGroupId) throws
		JAXBException, InvocationException, ApplicationException, IOException {
	
		System.out.println("Updating documents in group '"+documentGroupId+"'");
		DuEcmCustomerApplicativeRequestInvocation theInvocation =
			new DuEcmCustomerApplicativeRequestInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("appx_updateCustOrAccByDocumentGroupId");

		// get list of parameters 
		List<NamedQueryParam> params = preparedQuery.getParams();
		// add to it parameters
		 
		// Group ID to locate the documents
		params.add(createNamedStringParam(objectFactory,
										  "DocumentGroupId",documentGroupId));

		// Extra filter with "makat" numbers:
		params.add(createNamedMultiValueStringParam(objectFactory,
													"DocumentFormId",
													"5555510052", "9999999999"));

		// Account info
		BankAccount bankAccount = objectFactory.createBankAccount();
		bankAccount.setAccountBankId(12);
		bankAccount.setAccountNbr(425252);
		bankAccount.setBranchId(122);
		bankAccount.setSpecialHandlingCode(false);
		bankAccount.setDivisionId(1);
		params.add(createNamedObjectParam(objectFactory,  "BankAccount", bankAccount));	
	
		// Customer Info
		CustomerKey customerKey = objectFactory.createCustomerKey();
		// customer atributes
		// ID number
		customerKey.setCompleteCustomerIdCode("332558000");
		// id type: 1 = Israeli I.D.
		customerKey.setCustomerIdDocTypeCode(1);
		// is serial number
		customerKey.setCustomerSerialNbr(1);
		customerKey.setCustomerFullName("Ploni Almoni");
		// sifrur 
		customerKey.setCustomerId(12345678912345L);
		// lakoach mizdamen
		customerKey.setOccasionalCustomerInd(false); 
	
		params.add(createNamedObjectParam(objectFactory,  "Customer", customerKey));

		theType.setPreparedQuery(preparedQuery); 
		
		// 2. prepare rest of parameters
		// auth
		theType.setSecurityContext(makeUserSC(objectFactory));

		// details of executing bank clerk/system
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		//executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		//executorDetails.setEmpIdDocumentTypeCode(1);
		//executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		//executorDetails.setBankolId(1);
		//executorDetails.setTerminalChannelId(111);
		//executorDetails.setExecutingBranchId(555);
		//executorDetails.setInstructionReceiveTypeCode(2);
		theType.setExecutorDetails(executorDetails);
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		if (resultList.size()!= 1 || null == resultList.get(0)) { 
			System.out.println("Got invalid or empty result list");
		} else {
			System.out.println("return value: "+resultList.get(0).getName()+"=" + 
							   resultList.get(0).getParamOrMultivalueParamOrParamList().
							   getParam().getStringOrIntegerOrLong().getString());
		}
	
    }

    private SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		safSc.setRepositoryName(DCTM_REPO);
		//System.out.println("Using '"+safSc.getUserName()+"/"+safSc.getPassword()+"'");
		return safSc;
    }

    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
												   String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    

    private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
												   String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
    
    private NamedQueryParam createNamedMultiValueStringParam(ObjectFactory objectFactory,
															 String name, String ... values) throws JAXBException {
		// create parameter and give it name
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create multi valued parameter and set its value (String)
		MultivalueQueryParam param = objectFactory.createMultivalueQueryParam();
		for (String value : values) {
			StringOrIntegerOrLong stringValue = objectFactory.createQueryParamStringOrIntegerOrLong();
			stringValue.setString(value);
			param.getStringOrIntegerOrLong().add(stringValue);
		}
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setMultivalueParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
	
		return namedParam;
    }

    
	
    /**** document creation related functions ******/
    private String createDocument() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createIncompleteDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		
		// call ESB 
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
			
		}
		return (String)docData.getDocCustomerData().getDocDetails().getDocumentGroupIds().get(0);
    }
	

    private DocData createIncompleteDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createIncompleteDocCustomerData(factory));
		return docData;
    }
	
	
    private static ExecutorDetails createFullExecutorDetails(ObjectFactory factory)
		throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
    }


	private static ExecutorDetails createIncompleteExecutorDetails(ObjectFactory factory)
		throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setIpAddress("127.0.0.1");
		return executorDetails;
    }

    /**
     * Create document metadata
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocCustomerData createIncompleteDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		//customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setExecutorDetails(createIncompleteExecutorDetails(factory));
		customerData.setDocDetails(createIncompleteDocDetails(factory));
		return customerData;
    }
	
	
    /**
     * Create general document METADATA, that is attributes that
     * describe document itself, not it's customer, account, contents, paper copy, etc
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocDetails createIncompleteDocDetails(ObjectFactory factory) throws JAXBException {
		
		String legacyid = UUID.randomUUID().toString();
		System.out.println("Legacy id is: '"+ legacyid +"'");
		
		DocDetails details = factory.createDocDetails();
		// Id of business process that creates this document - from ARIS - doron segev
		details.setBusinessProcessId(11);

		// Those 3 fields are mandatory. The triple must be consistent with DPT204X
		// (managed by Ronen Sofer). 
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		// code of document type  "MAKAT", 
		details.setDocumentFormId("5555510052");
		
		// Source channel: branch office, Internet, mobile, fax, etc
		details.setChannelId(13);
		// code of transaction currency
		//details.setCurrencyCode(1);

		// 1 - incomplete document, metadata will not be checked fully 
		//     for validity before document is created
		details.setDocCompletenessCode(1);
				
		// group id that can be used to identify group of related documents. 
		// a document can be member of several groups
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add(UUID.randomUUID().toString());
		//documentGroupIds.add("group2");
		
		// document date - in most cases must be same date that appears in the text of the document
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		// optional customer's document user provided unique document id
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
		details.setLegacyDocumentId(legacyid);
		
		// is the document current or historic: 1 - current
		// project ID (Faxes, tofes peula, etc).
		details.setProjectId(3);
		// scan status code - not for scanning
		details.setSystemCode(0);
		// current or archive document: 1 - current
		details.setOngoingOrHistoryCode(1);
		// has printboss data that can be used to recreate the content
		return details;
    }
	
	
	
    private static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
			+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
    }
	
	/**
	 *
	 *
	 * @param docDataForCreateList
	 * @param safSC
	 * @return
	 *
	 * @throws JAXBException
	 * @throws IOException
	 * @throws InvocationException
	 * @throws ApplicationException
	 */
    private List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
		throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
			.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		
		// SYNC INVOCATION
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
    }

}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\AppxUpdateFaxExample.java
-----------------------------------------------------
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class AppxUpdateFaxExample {
    // NOTE: NEED TO CHANGE CONNECTION PROPERTIES: APPLICATIVE USER/PASSWORD/REPO + NAS upload path
    private final static String DCTM_USER = System.getProperty("dctm_user");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password");
    // this one currently is ignored and overridden by server
    private final static String DCTM_REPO=System.clearProperty("dctm_repo");
	
    private final static String DCTM_UPLOAD_PATH=System.clearProperty("dctm_upload_path");
	
    public static void main(String [] args) throws InvocationException,
												   ApplicationException,
												   JAXBException,
												   IOException {
		AppxUpdateFaxExample ex = new AppxUpdateFaxExample();
		ex.perform();
    }
	
    public void perform() throws JAXBException,
								 InvocationException,
								 ApplicationException,
								 IOException {
		String legacyDocumentId = createFax();
		appxUpdateFax(legacyDocumentId);
    }
	
		
	
    private void appxUpdateFax(String legacyId) throws JAXBException, InvocationException, ApplicationException, IOException {
		System.out.println("Updating document '"+legacyId+"'");
		DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("appx_TRRLSHRT_UpdateFax");

		// get list of parameters 
		List<NamedQueryParam> params = preparedQuery.getParams();
		// add to it parameters
		 
		// ID to locate the document
		params.add(createNamedStringParam(objectFactory,
										  "LegacyDocumentId",legacyId));
		// the DPT triple 
		params.add(createNamedStringParam(objectFactory,  "DocumentFormId", "0000012345"));
		params.add(createNamedIntegerParam(objectFactory, "BusinessAreaCode", 120));
		params.add(createNamedIntegerParam(objectFactory, "BusinessSubAreaCode", 999));
		// extension fields
		params.add(createNamedIntegerParam(objectFactory, "mispar_snif", 512));
		params.add(createNamedIntegerParam(objectFactory, "mispar_bitachon", 425252));
		params.add(createNamedIntegerParam(objectFactory, "kod_sug_neches", 2));
		params.add(createNamedIntegerParam(objectFactory, "mispar_rechev", 513315));
		params.add(createNamedIntegerParam(objectFactory, "mispar_gush", 412));
		params.add(createNamedIntegerParam(objectFactory, "mispar_chelka", 22));
		params.add(createNamedIntegerParam(objectFactory, "mispar_tat_chelka",1));
		 
		// customer atributes
		params.add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","123456789"));
		// 1 = Israeli I.D.
		params.add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
		// sifrur lakoach, yes it's floating point
		params.add(createNamedDoubleParam(objectFactory, "CustomerId",76767676768D));
		// full name of customer
		params.add(createNamedStringParam(objectFactory, "CustomerFullName","Mr. Nice Guy"));
		// I.D. instance num 
		params.add(createNamedIntegerParam(objectFactory, "CustomerSerialNbr",1));
		// lakoach mizdamen
		params.add(createNamedBooleanParam(objectFactory,"OccasionalCustomerInd",Boolean.FALSE));
		 
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		theType.setSecurityContext(makeUserSC(objectFactory));
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setBankolId(1);
		executorDetails.setTerminalChannelId(111);
		executorDetails.setExecutingBranchId(555);
		theType.setExecutorDetails(executorDetails);
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value: "+resultList.get(0).getName()+"=" + 
						   resultList.get(0).getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		
    }

    private SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		safSc.setRepositoryName(DCTM_REPO);
		return safSc;
    }
	
    private NamedQueryParam createNamedBooleanParam(ObjectFactory objectFactory,
													String name, Boolean value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setBoolean(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }

    private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
												   String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }

    private NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
	
    private NamedQueryParam createNamedLongParam(ObjectFactory objectFactory, String name, Long value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setLong(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
	
    private NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
	
    private NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
	
    private NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
    }
	
	
    /* create related functions */
    private String createFax() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		
		docData.setDocFile(createInBandDocFile(factory, "HELLO.pdf", "pdf"));
				
		// call ESB 
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
			
		}
		return docData.getDocCustomerData().getDocDetails().getLegacyDocumentId();
    }
	

    /**
     * Create DocFile for ESB based upload
     * 
     * @param factory
     * @param fullResName
     * @param format
     * @return
     * @throws IOException
     * @throws JAXBException
     */
    private  DocFile createInBandDocFile(ObjectFactory factory, String fileName, String format)
		throws IOException, JAXBException {
		RandomAccessFile file = null;
		try {
			file = new RandomAccessFile(fileName,"r"); 
			long size = file.length();
			// assume sane file size
			byte[] buffer = new byte[ (int)size ];
			file.readFully(buffer);
			DocFile docFile = factory.createDocFile();
			docFile.setDocFormat(format);
			docFile.setDocStream(buffer);
			// no sense to set docSize, ESB guarantees integrity 
			return docFile;
		} finally {
			if (null!=file) {
				file.close();
			}
		}
    }
	
    private DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
    }
	
	
    private static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
    }
	
    /**
     * Create document metadata
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		return customerData;
    }
	
	
    /**
     * Create general document METADATA, that is attributes that
     * describe document itself, not it's customer, account, contents, paper copy, etc
     * 
     * @param factory
     * @return
     * @throws JAXBException
     */
    private static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		
		String legacyid = UUID.randomUUID().toString();
		System.out.println("Legacy id is: '"+ legacyid +"'");
		
		DocDetails details = factory.createDocDetails();
		// Id of business process that creates this document - from ARIS - doron segev
		details.setBusinessProcessId(11);

		// Those 3 fields are mandatory. The triple must be consistent with DPT204X
		// (managed by Ronen Sofer). 
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		// code of document type  "MAKAT", 
		details.setDocumentFormId("5555510052");
		
		// Source channel: branch office, Internet, mobile, fax, etc
		details.setChannelId(13);
		// code of transaction currency
		//details.setCurrencyCode(1);

		// 1 - incomplete document, metadata will not be checked fully 
		//     for validity before document is created
		details.setDocCompletenessCode(1);
				
		// group id that can be used to identify group of related documents. 
		// a document can be member of several groups
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add(legacyid);
		//documentGroupIds.add("group2");
		
		// document date - in most cases must be same date that appears in the text of the document
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		// optional customer's document user provided unique document id
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
		details.setLegacyDocumentId(legacyid);
		
		// this should be set to original file name (if there is one)
		details.setObjectName("someObjectName");
		// is the document current or historic: 1 - current
		details.setOngoingOrHistoryCode(1);
		// project ID (Faxes, tofes peula, etc).
		details.setProjectId(2);
		// scan status code - not for scanning
		details.setScanStatusCode(4);
		// code of system that creates documents (from ARIS)
		details.setSystemCode(0);
		// has printboss data that can be used to recreate the content
		details.setTemplateDataExistsInd(false);
		// finansial transaction amount (if any)
		//details.setTransactionAmt(20.7);
		return details;
    }
	
	
	
    private static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
			+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
    }
	
    private List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
		throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
			.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		
		// SYNC INVOCATION
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
    }

}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\ArchiveSearchContentByAccountExample.java
-----------------------------------------------------
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.MultivalueQueryParam;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParam.StringOrIntegerOrLong;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class ArchiveSearchContentByAccountExample {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
	private final static String DCTM_USER = System.getProperty("dctm_user", "tofespeulausrtst");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password", "CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		ArchiveSearchContentByAccountExample ex = new ArchiveSearchContentByAccountExample();
		ex.search();
	}
	
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("ArchiveSearchContentByAccount");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();
//		params.add(createNamedIntegerParam(objectFactory, "AccountBankId",12));
//		params.add(createNamedIntegerParam(objectFactory, "BranchId",170));
//		params.add(createNamedIntegerParam(objectFactory, "AccountNbr",401911));
//		params.add(this.createNamedStringListParam(objectFactory, "DocumentFormIdList", "0000019200","0000019500","0000019600"));
//		
		params.add(createNamedIntegerParam(objectFactory, "AccountBankId",12));
		params.add(createNamedIntegerParam(objectFactory, "BranchId",176));
		params.add(createNamedIntegerParam(objectFactory, "AccountNbr",8040));
		params.add(this.createNamedStringListParam(objectFactory, "DocumentFormIdList", "5555510016"));
//		
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
				SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());
		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("192.168.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for this service, the defaults will do
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		theInvocation.setTimeout(20000);
		// get all results possibly in several pages
		do {

			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
			// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId()+
						" document_legacy_id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId()+
						" document_form_id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getDocumentFormId());
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	@SuppressWarnings("unchecked")
	public NamedQueryParam createNamedStringListParam(ObjectFactory objectFactory, String name, String ... values) throws JAXBException {
		// it's SIMPLE Activation Framework in it's full beauty, try to enjoy
		NamedQueryParam namedQueryParam = objectFactory.createNamedQueryParam();
		namedQueryParam.setName(name);
		namedQueryParam.setParamOrMultivalueParamOrParamList(objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList());
		MultivalueQueryParam multiValueQueryParam = objectFactory.createMultivalueQueryParam(); 
		namedQueryParam.getParamOrMultivalueParamOrParamList().setMultivalueParam(multiValueQueryParam);
		for (String value : values) {
			StringOrIntegerOrLong StringValue = objectFactory.createQueryParamStringOrIntegerOrLong();
			StringValue.setString(value);
			multiValueQueryParam.getStringOrIntegerOrLong().add(StringValue);
		}
		return namedQueryParam;
	}
	
	
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	
	
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\ArchiveSearchExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;



import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class ArchiveSearchExample {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
	private final static String DCTM_USER = System.getProperty("dctm_user", "tofespeulausrtst");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password", "CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	
	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		ArchiveSearchExample ex = new ArchiveSearchExample();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("ArchiveOrdersModuleSearch");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();
		
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBankId",12));
		
		// currently it seems that there aren't documents which have this set 
		//params.add(createNamedDoubleParam(objectFactory, "TransactionAmt",321 ));

		// create named parameter with name "Accounts", which will contain list of pairs
		NamedQueryParam accounts = createNamedQueryParamList(objectFactory, "Accounts");
		params.add(accounts);
		
		
		// create first entry of (bank, snif, heshbon)
		NamedQueryParam accEntry1 = createNamedQueryParamList(objectFactory, "entry1");
		
		accEntry1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "AccountBankId",12));
		
		accEntry1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "AccountNbr",5544));
		
		accEntry1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "BranchId",170));

		// add first entry to the  list of accounts
		accounts.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(accEntry1);

		// create second entry of of (bank, snif, heshbon)
		NamedQueryParam accEntry2 = createNamedQueryParamList(objectFactory, "entry2");

		accEntry2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "AccountBankId",60));
		
		accEntry2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "AccountNbr",61));
		
		accEntry2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "BranchId",62));
		
		accounts.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(accEntry2);
		
		// create named parameter with name "BusinessAreas", which will contain list of pairs (area, subarea)			
		NamedQueryParam areas = createNamedQueryParamList(objectFactory, "BusinessAreas");
		params.add(areas);
		// create list entry for area 50 subarea 10
		NamedQueryParam arEntry1 = createNamedQueryParamList(objectFactory, "entry1");

		arEntry1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "BusinessAreaCode",50));
		
		arEntry1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "BusinessSubAreaCode",10));
		
		areas.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(arEntry1);
		
		
		// create named parameter with name "Customer", which will contain list of pairs 
		//(CompleteCustomerIdCode, CustomerIdDocTypeCode)
		// that is ID number + type of ID document
		NamedQueryParam customers = createNamedQueryParamList(objectFactory, "Customer");
		params.add(customers);
		
		// add first entry
		NamedQueryParam customer1 = createNamedQueryParamList(objectFactory, "customer1");
		customer1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","005423173"));
		customer1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
		customers.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(customer1);
		
		
		NamedQueryParam customer2 = createNamedQueryParamList(objectFactory, "customer2");
		customer2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","000147777"));
		customer2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
		customers.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(customer2);
	
		// pension entries
		NamedQueryParam pensionData = createNamedQueryParamList(objectFactory, "Pension");
		params.add(customers);
		
		// add first entry - match only ones w/o pension data
		NamedQueryParam pension1 = createNamedQueryParamList(objectFactory, "pension1");
		pension1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "PensionFundNbr",0));
		pension1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "PlanholderNumber",0));
		pensionData.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(pension1);
		
		// add first entry - match specific client
		NamedQueryParam pension2 = createNamedQueryParamList(objectFactory, "pension2");
		pension2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "PensionFundNbr",111));
		pension2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "PlanholderNumber",3244324));
		pensionData.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(pension2);
		
		
		
		// add dates interval to list of parameters
		Calendar now = Calendar.getInstance();
		Calendar start = Calendar.getInstance();
		start.set(Calendar.YEAR, 2000);
	
		
		params.add(this.createNamedDateParam(objectFactory, "EndDate", now));
		params.add(this.createNamedDateParam(objectFactory, "StartDate", start));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());
		theType.setSecurityContext(context);
		
		
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		/*METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);*/
		METAOrFILEOrFULL full = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		full.setFULL(objectFactory.createFull());
		fetchTypeSet.setMETAOrFILEOrFULL(full);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 26;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
		// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\ConcatenateDocsByParams.java
-----------------------------------------------------
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;

import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;


/* Example for the ConcatenateDocsByParams service
 * 
 *
 */
public class ConcatenateDocsByParams {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
    private final static String DCTM_USER = System.getProperty("dctm_user","someuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","somepassword");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws
		InvocationException, ApplicationException, JAXBException, IOException {
		ConcatenateDocsByParams ex = new ConcatenateDocsByParams();
		ex.perform();
	}
	
	public void perform() throws
		JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation =
			 new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("ConcatenateDocsByParams");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();

		 // known values are:  STREAM or HTTP or SAFE, if not set STREAM will be used
		 String retrieveProfile =    "STREAM";
		 params.add(createNamedStringParam(objectFactory,"RetrieveProfile", retrieveProfile));

		 // renumbering pattern, empty to disable renumbering
		 //String renumberingPattern =    "PAGE %03d of %03d";
		 String renumberingPattern =    "עמוד %03d מ-%03d";
		 params.add(createNamedStringParam(objectFactory,"PageRenumbering", renumberingPattern));

		 
		 // ID for document to be created
		 String legacyDocumentId = "SOMELEGACYID12333454356348765890ZZZ";
		 
		 // build list of files to be concatenated
		 NamedQueryParam docList = createNamedQueryParamList(objectFactory, "DocList");
		 params.add(docList);
		 
		 List apParList = docList.getParamOrMultivalueParamOrParamList()
			 .getParamList().getParams();
		 // add first entry to list (inline in the ESB message)

		 final String LEGACY_DOCUMENT_ID_PAR = "LegacyDocumentId";
		 final String DCTM_DOCUMENT_ID_PAR = "DctmDocumentId";
		 final String DOCFILE_PAR = "DocFile";
		 
		 apParList.add(createNamedStringParam(objectFactory, LEGACY_DOCUMENT_ID_PAR,
		 											  "61779992018121300001352"));
		 //apParList.add(createNamedStringParam(objectFactory,
		 //DCTM_DOCUMENT_ID_PAR,
		 //									  "68243f93-5e1d-4601-a654-fd178c133d85"));
		 //apParList.add(createNamedStringParam(objectFactory,
		 //LEGACY_DOCUMENT_ID_PAR, "page2LegacyId"));
		 //apParList.add(createNamedObjectParam(objectFactory,   DOCFILE_PAR,
		 // 							 createInBandDocFile(objectFactory, "file80k.pdf", "pdf")));
		 apParList.add(createNamedObjectParam(objectFactory,  DOCFILE_PAR,
		 							 createInBandDocFile(objectFactory, "datafiles/HELLO2.pdf", "pdf")));
		 //apParList.add(createNamedObjectParam(objectFactory,  DOCFILE_PAR,
		 //									  createInBandDocFile(objectFactory, "HELLO2.pdf", "pdf")));
		 
		 DocFile f5 = objectFactory.createDocFile();
		 f5.setDocURL("file:///Faxes/appbp_72dd5fc8-483e-4ee4-a0f6-b9f44cac596b_in.pdf");
		 f5.setDocFormat("pdf");
		 //apParList.add(createNamedObjectParam(objectFactory, "DocFile",	  f5));

		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		// 2. prepare rest of parameters
		// auth
				SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());

		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(42);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		theInvocation.setTimeout(15000);
		theInvocation.invoke();
		// if we got here then the method has has succeded, now let's get result
		System.out.println("CALL SUCCEEDED, RESULT LIST IS:");
		// 1. get response object
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		// 2. get list of results, applicative requests may return more than one
		@SuppressWarnings("unchecked")
		List  <NamedQueryParam> list = response.getRequestResultsList();
		// this method must return one nonempty result object
		if (null==list || list.size() != 1 || null == list.get(0)) {
			throw new RuntimeException("Method returned invalid or empty result list: " + list);
		}
		// 3. fetch result item 
		NamedQueryParam item = list.get(0);
		// 4. check and interpret it's name
		if ("docURL".equals(item.getName())) {
			System.out.println("response contains temporary single-use URL:");
		} else if ("docStream".equals(item.getName())) {
			System.out.println("response contains base64 data:");
		} else {
			// this won't not happen
			throw new RuntimeException("Method returned unknown content type: "+item.getName());
		}
		// 5.  getValue object: SAF makes getting it not particularily easy
		QueryParam contentValue = item.getParamOrMultivalueParamOrParamList().getParam();
		if (null==contentValue || null==contentValue.getStringOrIntegerOrLong() ||
				!contentValue.getStringOrIntegerOrLong().isSetString()) {
			// this won't not happen, but I'm paranoid
			throw new RuntimeException("Method did not return content value!");
		}
		// 6 . finaly it's safe to actually get value
		String strValue = contentValue.getStringOrIntegerOrLong().getString();

		if (null == strValue) {
			// cannot really happen
			throw new RuntimeException("Method returned NULL value, this cannot happen!");
		}
		int strlen = strValue.length();
		System.out.println("The method returned data of size " + strlen +":");

		System.out.println(strlen > 1024 ? strValue.substring(0, 1023) + "..." : strValue);
		
		
	}


	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
    private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
												   String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}	


	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
												   String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}


	private  DocFile createInBandDocFile(ObjectFactory factory, String fileName, String format)
		throws IOException, JAXBException {
		RandomAccessFile file = null;
		try {
			file = new RandomAccessFile(fileName,"r"); 
			long size = file.length();
			// assume sane file size
			byte[] buffer = new byte[ (int)size ];
			file.readFully(buffer);
			DocFile docFile = factory.createDocFile();
			docFile.setDocFormat(format);
			docFile.setDocStream(buffer);
			// no sense to set docSize,checksum: ESB guarantees integrity 
			return docFile;
		} finally {
			if (null!=file) {
				file.close();
			}
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\ContentSharingCreateExample.java
-----------------------------------------------------

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;



import javax.xml.bind.JAXBException;


import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;
/**
 * Test for document creation using templates
 * 
 * Please be sure to update user/password below
 * 
 * @author FW0
 *
 */

public class ContentSharingCreateExample {
	// NOTE: NEED TO RUN WITH CORRECT SYSTEM PROPERTIES FOR AUTHENTICATION:
	private final static String DCTM_USER = System.getProperty("dctm_user", "tofespeulausrtst");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password", "CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
	private final static int PROJECT = 1;
	
	public static void main(String argv[]) throws Exception {
		(new ContentSharingCreateExample()).testCreate();
	}
	
	
	public void testCreate() throws InvocationException, ApplicationException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		
		SecurityContext safSC = this.makeUserSC(factory);
				
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		
		// DocFile that points to the content template from the Documentum repository 
		DocFile docFile = factory.createDocFile();
		
		// The structure of the URL is like
		// dctm:///REPOSITORY_FOLDER/TEMPLATE NAME[?PARAMETER=VALUE[&...]]
		//
		// This string is thought to be kept in some mainframe table so
		// it's length will be limited to 50 bytes.
		// 
		// there are several query parameters that could be useful:
		// "PAGE" - document page to be used as content, by default page 0 is used
		// "MODIFIER" - content modifer of content, by default one w/o modifier is used
		///"VERSION" -  template version to be used, by default last one is used
		//
		// Currently in the folder /TMPL there are two templates with the same name "TESTMAKAT",
		// one with English, another with Hebrew content. 
		// The difference is in the language attribute that 
		// we send as language  code in the L[ANGUAGE] query attribute (he_IL or en_US)
		docFile.setDocURL("dctm:///TMPL/TESTMAKAT?L=he_IL");

		// this is not required, but if it is not set the server will use default document format
		// and that could be something different from the required format.
		docFile.setDocFormat("pdf");
		
		docData.setDocFile(docFile);
		
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		}
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, InvocationException, ApplicationException {
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext context = factory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		System.out.println("Using security context: "+
						   " userName="+context.getUserName() +
						   " password="+context.getPassword() +
						   " repository="+context.getRepositoryName());


		return context;
	}
	
	public List<DocDataForCreate> createDocdata() throws  JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public DocData createValidFullDocData(ObjectFactory factory) throws  JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	
		
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
				
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details
				.setLegacyDocumentId("L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(PROJECT);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\CreateAsyncExample.java
-----------------------------------------------------



import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.FileChannel;

import javax.xml.bind.JAXBException;

import junit.framework.Assert;

import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.InvocationCommonData;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class CreateAsyncExample {
	@Test
	public void testCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		SecurityContext safSC = this.makeUserSC(factory);
				
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		
		
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		File copyFile = copyResourceForUpload("HELLO.pdf", this.getLocalUploadDir());
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		//for (DocIdData idData : safResults) {
		//	System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		//}
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsAsyncInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocumentsAsync_type theType = theInvocation
		.getObjectFactory().createCreateDocumentsAsync_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);

		theInvocation.setMessageExpiry(1000);
		
	
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.setLogicalReplyToQueueName("ECM");
		//theInvocation.invokeSendAsync();
		theInvocation.invoke();
		
		
		//theInvocation.invoke();
		DuEcmCustomerCreateDocumentsAsyncResult responce = theInvocation.getResult();
		responce.getCreateDocumentsAsyncResponse().getRequestDetails();
		
		List<DocIdData> safResults = responce.getCreateDocumentsAsyncResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		System.out.println("sent async request");
		return null;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName("uploadfaxuser");
		safSc.setPassword("1234");
		// ignored by server
		safSc.setRepositoryName("");
		return safSc;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		System.out.println("Copying file to dir "+uploadDir);
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "Faxes";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		//return "R:/Async_Service_QA/Faxes";
		return "/DocumentumAsync/Async_Service_QA/Faxes";
	}

	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(40);
		bankAccount2.setAccountBankId(41);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(43);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(1);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setExecutingEmpFullName("Dave");
		executorDetails.setIpAddress("ip");
		executorDetails.setTerminalChannelId(1);
 
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details
				.setLegacyDocumentId("L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(3);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\CreateExample.java
-----------------------------------------------------

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.File;
import java.io.RandomAccessFile;

import javax.xml.bind.JAXBException;



import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

// SAMPLE for creating Customer Document
// by calling the DuECMCustomer.createDocuments service
// with ESB based content transfer
//
// Upload size is limited by ESB configuration on maximum 
// message size. Usually to something like 
// 1MB in production and 100K in ST/DEV.
//
// Maximal size Configuration is per pair 
// (Calling ESB system name, ESB Server)
// 
// Files are encoded with base64, so maximal size of uploaded file is
// approximately 75% of maximum message size
//
public class CreateExample {
	// NOTE: NEED TO CHANGE CONNECTION PROPERTIES: APPLICATIVE USER/PASSWORD/REPO + NAS upload path
	private final static String DCTM_USER="dctm";
	private final static String DCTM_PASSWORD="dctm1";
	// currently ignored and overridden by server
	private final static String DCTM_REPO="banhap_qa1";

	
	
	@Test
	public void testCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		
		docData.setDocFile(createInBandDocFile(factory, "datafiles/HELLO.pdf", "pdf"));
				
		// call ESB 
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		}
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		System.out.println("user="+safSC.getUserName() + " pass="+safSC.getPassword());
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		theInvocation.setTimeout(20000);
		// SYNC INVOCATION
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		// banhap_qa1 ST
		// banhap_prd PROD
		// banhap_dev1 DEV
		safSc.setRepositoryName(DCTM_REPO);
		return safSc;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		//docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		
		DocPropertyExtension docPropertyExtension2 = factory.createDocPropertyExtension();
		docPropertyExtension2.setExtensionName("bnhp_division_business");
		docPropertyExtensions.add(docPropertyExtension2);
		List<PropertyKeyValue> propertyKeyValues2 = docPropertyExtension2.getPropertyKeyValues();
		propertyKeyValues2.add(createPropertyKeyValue(factory,"original_document" ,"1333213"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"serial_nbr_loan_guarantee" ,"123444"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_confidence" ,"1122"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_deal" ,"222"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_branch_confidence" ,"122"));
		// date according to RFC-3339, here it's in UTC timezone
		propertyKeyValues2.add(createPropertyKeyValue(factory,"expiration_date" ,"2029-10-26T21:32:52Z"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"credit_type" ,"12"));
		// double
		propertyKeyValues2.add(createPropertyKeyValue(factory,"deposit_number" ,"12345678901234"));
		// repeating integer
		propertyKeyValues2.add(createPropertyKeyValue(factory,"car_number" ,"45678122"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"car_number" ,"12345678"));
		
		propertyKeyValues2.add(createPropertyKeyValue(factory,"gush_number" ,"20334"));
		// double
		propertyKeyValues2.add(createPropertyKeyValue(factory,"helka_number" ,"2.718281828"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"tathelka_number" ,"2222"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"property_type","3333"));
		
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	
	
	
	
	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fileName, String format)
			throws IOException, JAXBException {
		RandomAccessFile file = null;
		try {
			file = new RandomAccessFile(fileName,"r"); 
			long size = file.length();
			// assume sane file size
			byte[] buffer = new byte[ (int)size ];
			file.readFully(buffer);
			DocFile docFile = factory.createDocFile();
			docFile.setDocFormat(format);
			docFile.setDocStream(buffer);
			// no sense to set docSize, ESB guarantees integrity 
			return docFile;
		} finally {
			if (null!=file) {
				file.close();
			}
		}
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		// not known
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(1);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	/**
	 * Create document metadata
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		// Custom text
		//customerData.setCustom(createCustom(factory));
		// group
		//customerData.setGroup(createGroup(factory));
		// pension fund data
		//customerData.setPensionFund(createPensionFund(factory));
		// bank account data
		//List<BankAccount> accounts =customerData.getBankAccounts();
		//accounts.clear();
		//accounts.add(createFullBankAccount(factory));
		//accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		// document can have multiple customers
		//customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	
	/**
	 * Create general document METADATA, that is attributes that
	 * describe document itself, not it's customer, account, contents, paper copy, etc
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// Id of business process that creates this document - from ARIS - doron segev
		details.setBusinessProcessId(11);

		// Those 3 fields are mandatory. The triple must be consistent with DPT204X
		// (managed by Ronen Sofer). 
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		// code of document type  "MAKAT", 
		details.setDocumentFormId("5555510052");
		
		// Source channel: branch office, Internet, mobile, fax, etc
		details.setChannelId(13);
		// code of transaction currency
		//details.setCurrencyCode(1);

		//  One may attach one or more events at creation time
		//		List<String> concEventIds = details.getConcatenatedEventIds();
		//		concEventIds.clear();
		//		concEventIds.add("event1");
		//		concEventIds.add("event2");

		// complete document with full metadata that will be checked for validity before document is created
		details.setDocCompletenessCode(0);
				
		// group id that can be used to identify group of related documents. 
		// a document can be member of several groups
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("ZZSOMEGROUPID11113");
		//documentGroupIds.add("group2");
		
		// document date - in most cases must be same date that appears in the text of the document
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		// optional customer's document user provided unique document id
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
		details.setLegacyDocumentId(java.util.UUID.randomUUID().toString());
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		// this should be set to original file name (if there is one)
		details.setObjectName("someObjectName");
		// is the document current or historic: 1 - current
		details.setOngoingOrHistoryCode(1);
		// project ID (Faxes, tofes peula, etc).
		details.setProjectId(2);
		// scan status code - not for scanning
		details.setScanStatusCode(4);
		// code of system that creates documents (from ARIS)
		details.setSystemCode(0);
		// has printboss data that can be used to recreate the content
		details.setTemplateDataExistsInd(false);
		// finansial transaction amount (if any)
		//details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\CyberArkTest.java
-----------------------------------------------------
import javax.xml.bind.JAXBException;

import org.junit.Test;


import com.poalim.matbea.service.tocyberarktransfer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class CyberArkTest {
	@Test
	public void callTest() throws JAXBException, InvocationException, ApplicationException {
		ObjectFactory factory = new ObjectFactory();
		ToCyberarkTransferDocumentumSendDataInvocation invocation = new  ToCyberarkTransferDocumentumSendDataInvocation();

		// FIXME: get URL dynamically
		DocumentumSendData documentumSendData = factory.createDocumentumSendData();
		documentumSendData.setCallerName("documentum");
		documentumSendData.setURL("http://tdcmcs01-7.restest.bank:9080/ACS/servlet/ACSkuku?command=read&version=2.3&docbaseid=00000a&basepath=%2Fhome%2Fdctm%2Fdata%2Fbanhap_dev1%2Fcontent_storage_01%2F0000000a&filepath=80%2F0b%2F63%2F2f.pdf&objectid=0900000a8019d21f&cacheid=dAAEAgA%3D%3DL2MLgA%3D%3D&format=pdf&pagenum=0&signature=i1PaB%2FBpusVEL9ZqcLhB0DbziGNQ45e24Rk77%2FAgrbgrP1mLQOejWw9z%2Br9xtEn1ACKpGFrHrvHCZQNFLn8rO49ON34Hr0PBaPSnYWrMLWQ3rM3yVRGQrnLd0RRNdXR2apOtlBinm4z4VI3gsmsZ5PSKm1cZsRRx5lI2OLysi3A%3D&servername=tdcmcs01ACS1&mode=1&timestamp=1453023489&length=626&mime_type=application%2Fpdf&parallel_streaming=true&expire_delta=360");
		invocation.setParameters(documentumSendData);
		try {
			invocation.invoke();
		} catch (Exception ex) {
			System.err.println(ex.toString());
		}
		ToCyberarkTransferDocumentumSendDataResult result = invocation.getResult();
		DocumentumSendDataResponseType responce = result.getDocumentumSendDataResponse();
		String sendDataResult = responce.getDocumentumSendDataResult();
		System.out.println("sendDataResult: '"+sendDataResult+"'");
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\DuEcmCustomerRetrieveByDctmIdExample.java
-----------------------------------------------------

import java.io.IOException;
import java.io.InputStream;
import java.net.Inet4Address;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownHostException;

import javax.net.ssl.HttpsURLConnection;
import javax.xml.bind.JAXBException;

import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DocRetrievalFlags;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForDctmDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForDctmDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForDctmDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForDctmDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;

import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;

// example:
// Fetch temporary HTTP URL for downloading the document and
// actually download it
public class DuEcmCustomerRetrieveByDctmIdExample
{
	private final static String DCTM_USER = System.getProperty("dctm_user","your_userName");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","your_password");

	@Test
	public void testRetrieveByLegacyid() throws Exception  {
		DuEcmCustomerRetrieveDocForDctmDocumentIdInvocation theInvocation = 
			new DuEcmCustomerRetrieveDocForDctmDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		RetrieveDocForDctmDocumentId_type theType = factory.createRetrieveDocForDctmDocumentId_type();
		theInvocation.setParameters(theType);
		
		// set Id
		//theType.setLegacyDocumentId("40_1-5RJ77JB_304951239_2");
		theType.setDctmDocumentId("65597d49-45bd-4bdf-b41d-df0472064459");
		theType.setDocFormat("tiff");
		
		// specify if we want only content (FILE), 
		// attributes(META) or both (FULL)
		FetchTypeSet fetchTypeSet = factory.createFetchTypeSet();
		// here we want content only
		fetchTypeSet.setMETAOrFILEOrFULL(factory.createFetchTypeSetMETAOrFILEOrFULL());
		fetchTypeSet.getMETAOrFILEOrFULL().setFILE(factory.createFile());
		//fetchTypeSet.getMETAOrFILEOrFULL().setFULL(factory.createFull());
		theType.setFetchTypeSet(fetchTypeSet);
		
		// create default retrieval flags, that means only primary content and no events
		theType.setDocRetrievalFlags(factory.createDocRetrievalFlags());
		// this defines attributes and protocol for retrieveal,
		// HTTP retrieval is the default at the server configuration,
		// so the following is not really needed
		theType.getDocRetrievalFlags().setRetrieveProfile("HTTP");
		// Some clients are not allowed to use HTTP, so they
		// get content in-line via ESB
		// theType.getDocRetrievalFlags().setRetrieveProfile("STREAM");

		
		// user and password 
		//(Oded Yoel Liberman manages users, passwords and permissions) 
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		theType.setSecurityContext(safSc);
		
		// details of end-user, those are minimally required attributes
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setIpAddress(Inet4Address.getLocalHost().toString());
		// ID number
		executorDetails.setExecutingEmpIdCode("332233099");
		
		
		// But it is recommended to fill all the attributes
		// that are known:
		// type of ID of person executing the request, usually 1 - Israeli ID
		executorDetails.setEmpIdDocumentTypeCode(1);
		// full name
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		// bank code
		executorDetails.setExecutingBankId(12);
		// branch number
		executorDetails.setExecutingBranchId(777);
		// terminal channel
		executorDetails.setTerminalChannelId(222);
		// bankol number
		executorDetails.setBankolId(1);
		theType.setExecutorDetails(executorDetails);
		
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuEcmCustomerRetrieveDocForDctmDocumentIdResult result = theInvocation.getResult();
		
		RetrieveDocForDctmDocumentIdResponse_type response = result.getRetrieveDocForDctmDocumentIdResponse();
		DocDataForRetrieve docDataForRetrieve = response.getDocDataForRetrieve();
		DocData docData = docDataForRetrieve.getDocData();
		if (null!= docData.getDocCustomerData() &&
				null!=docData.getDocCustomerData().getDocDetails()) {
			DocDetails details = docData.getDocCustomerData().getDocDetails();
			System.out.println("Some doocument attributes:");
			System.out.println(" document date:"+details.getLegacyDocumentEntryDttm());
			System.out.println(" document MAKAT:"+details.getDocumentFormId());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		DocFile docFile = docData.getDocFile();
		if (docFile==null) {
			System.out.println("the document has no content attached");
			return;
		}
		System.out.println("document format is: "+docFile.getDocFormat());
		
		// byte array for content
		byte buf[] = null;
		if (docFile.getDocStream()!=null) {
			// should not happen
			System.out.println("Got document in-band");
			buf = docFile.getDocStream();
		} else if (docFile.getDocURL()!=null) {
			System.out.println("Retrieving document via URL: "+ docFile.getDocURL());
			URL url = new URL(docFile.getDocURL());
			URLConnection uc = url.openConnection();
			InputStream is = null;
			try {
				is = uc.getInputStream();
				long length = uc.getContentLength();
				if (length > Integer.MAX_VALUE) {
					throw new IOException("Cannot create byte array of size "+length);
				}
				int arraySize = (int)length;
				System.out.println("allocated array of size "+length);
				buf = new byte[arraySize];
				
				int total = 0;
				int readBytes = 0;
				// read in cycle from network into byte array
				while (((arraySize - total)>0) 
						// read never returns 0 if was provided with length>0
						&& ((readBytes = is.read(buf,total,arraySize - total)) > 0 )) {
					total+= readBytes;
				}
				if (total < length) {
					throw new IOException("Short read from network: read "+total+", expected "+ length);
				}
				System.out.println("Retrieved document via HTTP");
			} catch (IOException ioex) {
				System.out.println("Exception downloading content: "+ioex);
			} finally {
				if (null!=is) {
					is.close();
				}
			}
		} else {
			// should not happen
			System.out.println("Got invalid DocFile: "+docFile);
		}
		//System.out.println("Document content is: "+new String(buf));
		System.out.println("Retrieved "+buf.length+" bytes of document content");
	}
	
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\DuEcmCustomerRetrieveByLegacyIdExample.java
-----------------------------------------------------

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.Inet4Address;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;

import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;

public class DuEcmCustomerRetrieveByLegacyIdExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","dctm");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","dctm1");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
	@Test
	public void testRetrieveByLegacyid() throws Exception  {
		DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation theInvocation = 
			new DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		RetrieveDocForLegacyDocumentId_type theType = factory.createRetrieveDocForLegacyDocumentId_type();
		theInvocation.setParameters(theType);
		
		// set Id
		//theType.setLegacyDocumentId("40_1-5RJ77JB_304951239_2");
		//theType.setLegacyDocumentId("61410022016041200021137");
		//for test
		theType.setLegacyDocumentId("IL-2002722-3333302601-1-1");
		//for dev
		//theType.setLegacyDocumentId("XX_-1666510026");
		
		// specify if we want only content (FILE), 
		// attributes(META) or both (FULL)
		FetchTypeSet fetchTypeSet = factory.createFetchTypeSet();
		// here we want both content and metadata:
		fetchTypeSet.setMETAOrFILEOrFULL(factory.createFetchTypeSetMETAOrFILEOrFULL());
		//fetchTypeSet.getMETAOrFILEOrFULL().setFILE(factory.createFile());
		fetchTypeSet.getMETAOrFILEOrFULL().setFULL(factory.createFull());
		theType.setFetchTypeSet(fetchTypeSet);
		
		// create default retrieval flags, that means only primary content and no events
		theType.setDocRetrievalFlags(factory.createDocRetrievalFlags());
		// this defines attributes and protocol for retrieveal,
		// HTTP retrieval is the default at the server configuration,
		// so the following is not really needed
		theType.getDocRetrievalFlags().setRetrieveProfile("HTTP");
		// Some clients are not allowed to use HTTP, so they
		// get content in-line via ESB
		// theType.getDocRetrievalFlags().setRetrieveProfile("STREAM");

		theType.setDocDataCheck(factory.createDocData());
		theType.getDocDataCheck().setDocCustomerData(factory.createDocCustomerData());
		List chkAccs = theType.getDocDataCheck().getDocCustomerData().getBankAccounts();
		BankAccount acc = factory.createBankAccount();
		acc.setAccountBankId(12);
		acc.setAccountNbr(123456);
		acc.setBranchId(602);
		chkAccs.add(acc);
		
		// user and password 
		//(Oded Yoel Liberman manages users, passwords and permissions) 
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		safSc.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(safSc);
		
		// details of end-user, those are minimally required attributes
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setIpAddress(Inet4Address.getLocalHost().toString());
		// ID number
		executorDetails.setExecutingEmpIdCode("332233099");
		
		
		// But it is recommended to fill all the attributes
		// that are known:
		// type of ID of person executing the request, usually 1 - Israeli ID
		executorDetails.setEmpIdDocumentTypeCode(1);
		// full name
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		// bank code
		executorDetails.setExecutingBankId(12);
		// branch number
		executorDetails.setExecutingBranchId(777);
		// terminal channel
		executorDetails.setTerminalChannelId(222);
		// bankol number
		executorDetails.setBankolId(1);
		theType.setExecutorDetails(executorDetails);
		
		
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuEcmCustomerRetrieveDocForLegacyDocumentIdResult result = theInvocation.getResult();
		
		RetrieveDocForLegacyDocumentIdResponse_type response = result.getRetrieveDocForLegacyDocumentIdResponse();
		DocDataForRetrieve docDataForRetrieve = response.getDocDataForRetrieve();
		DocData docData = docDataForRetrieve.getDocData();
		if (null!= docData.getDocCustomerData() &&
				null!=docData.getDocCustomerData().getDocDetails()) {
			DocDetails details = docData.getDocCustomerData().getDocDetails();
			System.out.println("Some doocument attributes:");
			System.out.println(" document date:"+details.getLegacyDocumentEntryDttm());
			System.out.println(" document MAKAT:"+details.getDocumentFormId());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		DocFile docFile = docData.getDocFile();
		if (docFile==null) {
			System.out.println("the document has no content attached");
			return;
		}
		System.out.println("document format is: "+docFile.getDocFormat());
		
		// byte array for content
		byte buf[] = null;
		if (docFile.getDocStream()!=null) {
			// should not happen
			System.out.println("Got document in-band");
			buf = docFile.getDocStream();
		} else if (docFile.getDocURL()!=null) {
			System.out.println("Retrieving document via URL: "+ docFile.getDocURL());
			URL url = new URL(docFile.getDocURL());
			URLConnection uc = url.openConnection();
			InputStream is = null;
			try {
				is = uc.getInputStream();
				long length = uc.getContentLength();
				if (length > Integer.MAX_VALUE) {
					throw new IOException("Cannot create byte array of size "+length);
				}
				int arraySize = (int)length;
				System.out.println("allocated array of size "+length);
				buf = new byte[arraySize];
				
				int total = 0;
				int readBytes = 0;
				// read in cycle from network into byte array
				while (((arraySize - total)>0) 
						// read never returns 0 if was provided with length>0
						&& ((readBytes = is.read(buf,total,arraySize - total)) > 0 )) {
					total+= readBytes;
				}
				if (total < length) {
					throw new IOException("Short read from network: read "+total+", expected "+ length);
				}
				System.out.println("Retrieved document via HTTP");
			} catch (IOException ioex) {
				System.out.println("Exception downloading content: "+ioex);
			} finally {
				if (null!=is) {
					is.close();
				}
			}
		} else {
			// should not happen
			System.out.println("Got invalid DocFile: "+docFile);
		}
		System.out.println("Document content is:\n"+new String(buf) + ".locate in output.pdf");
		
		FileOutputStream fileOutputStream=new FileOutputStream(new File("output.pdf"));
		fileOutputStream.write(buf);
		fileOutputStream.close();
		
		System.out.println("Retrieved "+buf.length+" bytes of document content");
	}
	
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\DuEcmCustomerRetrieveByLegacyIdSafeExample.java
-----------------------------------------------------

import java.io.IOException;
import java.io.InputStream;
import java.net.Inet4Address;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownHostException;

import javax.net.ssl.HttpsURLConnection;
import javax.xml.bind.JAXBException;

import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DocRetrievalFlags;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForDctmDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForDctmDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForDctmDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForDctmDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;

import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;

public class DuEcmCustomerRetrieveByLegacyIdSafeExample {
	@Test
	public void testRetrieveByLegacyid() throws Exception  {
		DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation theInvocation = 
			new DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		RetrieveDocForLegacyDocumentId_type theType = factory.createRetrieveDocForLegacyDocumentId_type();
		theInvocation.setParameters(theType);
		
		// set Id
		theType.setLegacyDocumentId("40_1-5RJ77JB_304951239_2");
		
		// specify if we want only content (FILE), 
		// attributes(META) or both (FULL)
		FetchTypeSet fetchTypeSet = factory.createFetchTypeSet();
		// here we want both content and metadata:
		fetchTypeSet.setMETAOrFILEOrFULL(factory.createFetchTypeSetMETAOrFILEOrFULL());
		//fetchTypeSet.getMETAOrFILEOrFULL().setFILE(factory.createFile());
		fetchTypeSet.getMETAOrFILEOrFULL().setFULL(factory.createFull());
		theType.setFetchTypeSet(fetchTypeSet);
		
		// create default retrieval flags, that means only primary content and no events
		theType.setDocRetrievalFlags(factory.createDocRetrievalFlags());
		// this defines attributes and protocol for retrieveal,
		// HTTP retrieval is the default at the server configuration,
		// so the following is not really needed
		theType.getDocRetrievalFlags().setRetrieveProfile("SAFE");
		// Some clients are not allowed to use HTTP, so they
		// get content in-line via ESB
		// theType.getDocRetrievalFlags().setRetrieveProfile("STREAM");

		
		// user and password 
		//(Oded Yoel Liberman manages users, passwords and permissions) 
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName("safereadtest");
		safSc.setPassword("****");
		theType.setSecurityContext(safSc);
		
		// details of end-user, those are minimally required attributes
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setIpAddress(Inet4Address.getLocalHost().toString());
		// ID number
		executorDetails.setExecutingEmpIdCode("332233099");
		
		
		// But it is recommended to fill all the attributes
		// that are known:
		// type of ID of person executing the request, usually 1 - Israeli ID
		executorDetails.setEmpIdDocumentTypeCode(1);
		// full name
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		// bank code
		executorDetails.setExecutingBankId(12);
		// branch number
		executorDetails.setExecutingBranchId(777);
		// terminal channel
		executorDetails.setTerminalChannelId(222);
		// bankol number
		executorDetails.setBankolId(1);
		theType.setExecutorDetails(executorDetails);
		
		// invoke of saf
		theInvocation.setTimeout(40000);
		theInvocation.invoke();
		
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuEcmCustomerRetrieveDocForLegacyDocumentIdResult result = theInvocation.getResult();
		
		RetrieveDocForLegacyDocumentIdResponse_type response = result.getRetrieveDocForLegacyDocumentIdResponse();
		DocDataForRetrieve docDataForRetrieve = response.getDocDataForRetrieve();
		DocData docData = docDataForRetrieve.getDocData();
		if (null!= docData.getDocCustomerData() &&
				null!=docData.getDocCustomerData().getDocDetails()) {
			DocDetails details = docData.getDocCustomerData().getDocDetails();
			System.out.println("Some doocument attributes:");
			System.out.println(" document date:"+details.getLegacyDocumentEntryDttm());
			System.out.println(" document MAKAT:"+details.getDocumentFormId());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		DocFile docFile = docData.getDocFile();
		if (docFile==null) {
			System.out.println("the document has no content attached");
			return;
		}
		System.out.println("document format is: "+docFile.getDocFormat());
		
		// byte array for content
		byte buf[] = null;
		if (docFile.getDocStream()!=null) {
			// should not happen
			System.out.println("Got document in-band");
			buf = docFile.getDocStream();
		} else if (docFile.getDocURL()!=null) {
			System.out.println("Retrieving document via URL: "+ docFile.getDocURL());
			URL url = new URL(docFile.getDocURL());
			URLConnection uc = url.openConnection();
			InputStream is = null;
			try {
				is = uc.getInputStream();
				long length = uc.getContentLength();
				if (length > Integer.MAX_VALUE) {
					throw new IOException("Cannot create byte array of size "+length);
				}
				int arraySize = (int)length;
				System.out.println("allocated array of size "+length);
				buf = new byte[arraySize];
				
				int total = 0;
				int readBytes = 0;
				// read in cycle from network into byte array
				while (((arraySize - total)>0) 
						// read never returns 0 if was provided with length>0
						&& ((readBytes = is.read(buf,total,arraySize - total)) > 0 )) {
					total+= readBytes;
				}
				if (total < length) {
					throw new IOException("Short read from network: read "+total+", expected "+ length);
				}
				System.out.println("Retrieved document via HTTP");
			} catch (IOException ioex) {
				System.out.println("Exception downloading content: "+ioex);
			} finally {
				if (null!=is) {
					is.close();
				}
			}
		} else {
			// should not happen
			System.out.println("Got invalid DocFile: "+docFile);
		}
		//System.out.println("Document content is: "+new String(buf));
		//System.out.println("Retrieved "+buf.length+" bytes of document content");
	}
	
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\DuManageGeneralDocCreateDocument.java
-----------------------------------------------------
import java.util.Arrays;
import java.util.Calendar;
import java.util.Random;

import org.junit.Test;

import com.poalim.matbea.service.dumanagegeneraldoc.CreateDocumentResponse_type;
import com.poalim.matbea.service.dumanagegeneraldoc.CreateDocument_type;
import com.poalim.matbea.service.dumanagegeneraldoc.DocDetails;
import com.poalim.matbea.service.dumanagegeneraldoc.DocFile;
import com.poalim.matbea.service.dumanagegeneraldoc.DocGeneralData;
import com.poalim.matbea.service.dumanagegeneraldoc.DocIdData;
import com.poalim.matbea.service.dumanagegeneraldoc.DuManageGeneralDocCreateDocumentInvocation;
import com.poalim.matbea.service.dumanagegeneraldoc.DuManageGeneralDocCreateDocumentResult;
import com.poalim.matbea.service.dumanagegeneraldoc.ObjectFactory;
import com.poalim.matbea.service.dumanagegeneraldoc.SecurityContext;

public class DuManageGeneralDocCreateDocument  {
	private final static String DCTM_USER = System.getProperty("dctm_user","someuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","*****");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
	@Test
	public void testCreateDocument() throws Exception  {
		final Random r = new Random();
		
		DuManageGeneralDocCreateDocumentInvocation  theInvocation = 
			new DuManageGeneralDocCreateDocumentInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		com.poalim.matbea.service.dumanagegeneraldoc.CreateDocument_type theType =
			factory.createCreateDocument_type();

		
		DocGeneralData generalData =  factory.createDocGeneralData();
		DocDetails docDetails = factory.createDocDetails();
		generalData.setDocDetails(docDetails);

		docDetails.setLegacyDocumentId("DU_"+ Long.toHexString(r.nextLong()));
		docDetails.setDocumentFormId("9999999999");
		docDetails.setSystemCode(2);
		docDetails.setObjectName("Test Doc "+docDetails.getLegacyDocumentId());
		docDetails.setLegacyDocumentEntryDttm(Calendar.getInstance());
		theType.setDocGeneralData(generalData);

		DocFile docFile = factory.createDocFile();
		docFile.setDocFormat("text");
		docFile.setDocStream("Hi Here!\n".getBytes("UTF-8"));
		generalData.setDocFile(docFile);
		
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		safSc.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(safSc);

		
		theInvocation.setParameters(theType);
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception
		DuManageGeneralDocCreateDocumentResult result = theInvocation.getResult();

		CreateDocumentResponse_type response = result.getCreateDocumentResponse();
		DocIdData didata = response.getDocIdData();
		if (null != didata) {
			System.out.println("created document with\n");
			System.out.println("        dctmDocumentId=" + didata.getDctmDocumentId());
			System.out.println("        version==" + didata.getVersionLabel());
		} else {
			System.out.println("Document creation service returned null (cannot happen!)");			
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\DuRtrvGeneralDocByLegacyIdExample.java
-----------------------------------------------------
import java.util.Arrays;

import org.junit.Test;

import com.poalim.matbea.service.durtrvgeneraldoc.RetrieveDocForLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.durtrvgeneraldoc.DocDataForRetrieve;
import com.poalim.matbea.service.durtrvgeneraldoc.DocDetails;
import com.poalim.matbea.service.durtrvgeneraldoc.DocFile;
import com.poalim.matbea.service.durtrvgeneraldoc.DocGeneralData;
import com.poalim.matbea.service.durtrvgeneraldoc.DuRtrvGeneralDocRetrieveDocForDctmDocumentIdInvocation;
import com.poalim.matbea.service.durtrvgeneraldoc.DuRtrvGeneralDocRetrieveDocForDctmDocumentIdResult;
import com.poalim.matbea.service.durtrvgeneraldoc.DuRtrvGeneralDocRetrieveDocForLegacyDocumentIdInvocation;
import com.poalim.matbea.service.durtrvgeneraldoc.DuRtrvGeneralDocRetrieveDocForLegacyDocumentIdResult;
import com.poalim.matbea.service.durtrvgeneraldoc.ObjectFactory;
import com.poalim.matbea.service.durtrvgeneraldoc.RetrieveDocForDctmDocumentIdResponse_type;
import com.poalim.matbea.service.durtrvgeneraldoc.SecurityContext;

public class DuRtrvGeneralDocByLegacyIdExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","someuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","*****");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
    
	@Test
	public void testRetrieveByLegacyid() throws Exception  {
		DuRtrvGeneralDocRetrieveDocForLegacyDocumentIdInvocation theInvocation = 
			new DuRtrvGeneralDocRetrieveDocForLegacyDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		com.poalim.matbea.service.durtrvgeneraldoc.RetrieveDocForLegacyDocumentId_type theType = factory
				.createRetrieveDocForLegacyDocumentId_type();
		
		theType.setLegacyDocumentId("L:1313237769591266291");

		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		safSc.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(safSc);

		theInvocation.setParameters(theType);
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuRtrvGeneralDocRetrieveDocForLegacyDocumentIdResult result = theInvocation.getResult();

		
		RetrieveDocForLegacyDocumentIdResponse_type response = result
				.getRetrieveDocForLegacyDocumentIdResponse();
		
		DocDataForRetrieve docDataForRetrieve = response
				.getDocDataForRetrieve();
		
		
		DocGeneralData generalData = docDataForRetrieve.getDocGeneralData();
		DocDetails details = generalData.getDocDetails();
		System.out.println("Doocument attributes:");
		if (null != details) {
			System.out.println("documentFormId=" + details.getDocumentFormId());
			System.out.println("legacyDocumentEntryDttm=" + details.getLegacyDocumentEntryDttm());
			System.out.println("legacyDocumentId=" + details.getLegacyDocumentId());
			System.out.println("objectName=" + details.getObjectName());
			System.out.println("systemCode=" + details.getSystemCode());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		DocFile docFile = generalData.getDocFile();
		if (docFile==null) {
			System.out.println("the document has no content attached");
			return;
		}
		System.out.println("document format is: "+docFile.getDocFormat());
		
		// byte array for content
		byte buf[] = docFile.getDocStream();
		if (null != buf) {
			System.out.println("Retrieved "+buf.length+" bytes of document content:");
			System.out.println(new String(buf));
		} else {
			System.out.println("Got null content (this cannot happen!)");
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\GetConcatinatedDocsByDocGroupIdExample.java
-----------------------------------------------------


import java.io.IOException;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;

import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;


/**
 * Sample code illustrating usage of DuECMCustomer.applicativeRequest
 * 
 * Subservice: appx_GetConcatinatedDocsByDocGroupId - concatenate pdf documents of given document group
 * 
 * 
 * @author FW0
 *
 */
public class GetConcatinatedDocsByDocGroupIdExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		GetConcatinatedDocsByDocGroupIdExample ex = new GetConcatinatedDocsByDocGroupIdExample();
		ex.perform();
	}
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("appx_GetConcatinatedDocsByDocGroupId");

		 // get list of parameters 
		 @SuppressWarnings("unchecked")
		List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters

		 String documentGroupId = "_111111218";
		 System.out.println("requesting group id '"+documentGroupId+"'");
		
		 // add parameter for group ID to locate the documents
		 params.add(createNamedStringParam(objectFactory,"DocumentGroupId",documentGroupId));
		 
		 // set prepared query
		 theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);
		 
		
		// executor details
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// Invocation
		System.out.print("invoking SAF...");
		theInvocation.invoke();
		System.out.println("got response");
		// if we got here then the method has has succeded
		// 1. get response object
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		// 2. get list of results, applicative requests may return more than one
		@SuppressWarnings("unchecked")
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		// this methos must return one nonempty result object
		if (null==resultList || resultList.size() != 1 || null == resultList.get(0)) {
			// this won't not happen, but anyway
			throw new RuntimeException("Method returned invalid or empty result list: "+resultList);
		}
		// 3. get first result item
		NamedQueryParam result = resultList.get(0);
		// check and interpret it's name
		if ("docURL".equals(result.getName())) {
			System.out.println("response contains temporary single-use URL:");
		} else if ("docStream".equals(result.getName())) {
			System.out.println("response contains base64 data:");
		} else {
			// this won't not happen
			throw new RuntimeException("Method returned unknown content type: "+result.getName());
		}
		// 4. get result value, SAF makes getting it not particularily easy
		QueryParam contentValue = result.getParamOrMultivalueParamOrParamList().getParam();
		if (null==contentValue || null==contentValue.getStringOrIntegerOrLong() ||
				!contentValue.getStringOrIntegerOrLong().isSetString()) {
			// this won't not happen, but I'm paranoid
			throw new RuntimeException("Method did not return content value!");
		}
		// 5 . finaly it's safe to get value
		System.out.print(contentValue.getStringOrIntegerOrLong().getString());
	}
	

	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
			String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\InternetKGPreparedSearchExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;


import com.poalim.matbea.service.durtrvpensionfunddoc.DocDataForRetrieve;
import com.poalim.matbea.service.durtrvpensionfunddoc.DuRtrvPensionFundDocPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.durtrvpensionfunddoc.ExecutorDetails;
import com.poalim.matbea.service.durtrvpensionfunddoc.FetchTypeSet;
import com.poalim.matbea.service.durtrvpensionfunddoc.MultivalueQueryParam;
import com.poalim.matbea.service.durtrvpensionfunddoc.NamedQueryParam;
import com.poalim.matbea.service.durtrvpensionfunddoc.ObjectFactory;
import com.poalim.matbea.service.durtrvpensionfunddoc.PreparedQuery;
import com.poalim.matbea.service.durtrvpensionfunddoc.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.durtrvpensionfunddoc.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.durtrvpensionfunddoc.QueryParam;
import com.poalim.matbea.service.durtrvpensionfunddoc.SearchDefinition;
import com.poalim.matbea.service.durtrvpensionfunddoc.SearchResult;
import com.poalim.matbea.service.durtrvpensionfunddoc.SecurityContext;
import com.poalim.matbea.service.durtrvpensionfunddoc.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.durtrvpensionfunddoc.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class InternetKGPreparedSearchExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		InternetKGPreparedSearchExample ex = new InternetKGPreparedSearchExample();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		DuRtrvPensionFundDocPreparedQueryMetaSearchInvocation theInvocation = 
			new DuRtrvPensionFundDocPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		// name of search
		preparedQuery.setName("kg_internet_reports_query");
		// context of search, not needed for this search
		preparedQuery.setContextName(null);
		

		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();
		// create named multivalue parameter with name "documentFormIdList", 
		//which will contain list of makat'im
		params.add(createNamedMultivalueStringParam(objectFactory, "DocumentFormIdList",
				new String[] {"5555550110","5555500114","5555500129"}));
		
		// add dates interval to list of parameters
		Calendar now = Calendar.getInstance();
		Calendar tenYearsAgo = Calendar.getInstance();
		tenYearsAgo.setTimeInMillis(System.currentTimeMillis() - 3600L*24L*366L*10L*1000L);
		
		params.add(createNamedDateParam(objectFactory, "StartDate", tenYearsAgo));
		params.add(createNamedDateParam(objectFactory, "EndDate", now));
		
		// add parameter for kupa
		params.add(createNamedIntegerParam(objectFactory, "PensionFundNbr",469));
		params.add(createNamedIntegerParam(objectFactory, "PlanholderNumber",62525));
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth details, will be different between DEV/ST/PROD environments
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		// request executor details, will be written to server logs by server  
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("Id of user");
		executorDetails.setExecutingEmpFullName("Name of user");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		// for this search
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		
		//search definitions - how to return results in pages - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 26;
		searchDef.setMaxResultCount(pageSize);
		// starting result index, 0 based
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			
			// print some details on each one
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document["+i+"] id="+ddfr.getDocIdData().getDctmDocumentId());
				List accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				if (accounts.size()>0) {
					System.out.println(" document["+i+"] has "+accounts.size()+ " accounts:");
					for (int j = 0; i < accounts.size() ; j++) {
						System.out.println(accounts.get(i));
					}
				}
				
				System.out.println(" document["+i+"] legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				System.out.println(" document["+i+"] name="+ddfr.getDocData().getDocCustomerData().getDocDetails().getObjectName());
				System.out.println(" document["+i+"] form id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getDocumentFormId());
				System.out.println(" document["+i+"] form name="+ddfr.getDocDataDescr().getDocCustomerData().getDocDetails().getDocumentFormId());
				System.out.println(" document["+i+"] has content flag="+ddfr.isDoesFileContentExist());
			}
			// set required index for next page
			searchDef.setStartIndex(page * pageSize);
		} while ( docs.size()>=pageSize);
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	
	private NamedQueryParam createNamedMultivalueStringParam(
			ObjectFactory objectFactory, String paramName, String[] strings) throws JAXBException {
		NamedQueryParam param = objectFactory.createNamedQueryParam();
		param.setName(paramName);
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		param.setParamOrMultivalueParamOrParamList(paramValue);
		
		MultivalueQueryParam mvQueryParam = objectFactory.createMultivalueQueryParam();
		paramValue.setMultivalueParam(mvQueryParam);
		
		List valueList = param.getParamOrMultivalueParamOrParamList()
		.getMultivalueParam().getStringOrIntegerOrLong();
		for (String string : strings) {
			com.poalim.matbea.service.durtrvpensionfunddoc.QueryParam.StringOrIntegerOrLong value =
				objectFactory.createQueryParamStringOrIntegerOrLong();
			value.setString(string);
			valueList.add(value);
		}
		return param;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\OfflineCreateObjectServiceTest.java
-----------------------------------------------------

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import junit.framework.Assert;

import org.junit.Test;


//Those are from package du-ecm-customer in Artifactory
/*
<dependency>
  <groupId>com.poalim.saf.services</groupId>
  <artifactId>du-ecm-customer-temp</artifactId>
  <version>1.143.0</version>
</dependency>
*/
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.CreateDocuments;
import com.poalim.matbea.service.duecmcustomer.Custom;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DocPropertyExtension;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.Group;
import com.poalim.matbea.service.duecmcustomer.PensionFund;
import com.poalim.matbea.service.duecmcustomer.PropertyKeyValue;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;

// from saf-core
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

/**
 * 
 * Example for using the documentum OFFLINE load service
 * 
 * @author FW0
 *
 */
public class OfflineCreateObjectServiceTest  {
	// name project-specific upload subfolders (created for each project like Faxes, Tofes Peula, etc)
	public static final String PROJECT_SUBFOLDER = "Tofes_Peula";
	// Upload folders for SYSTEM TEST are at 
	// Windows: \\172.22.13.146\MesilaDocsProcessing
	// NFS: 172.22.13.146:/vol/psmnas01_data/MesilaDocsProcessing
	//  path to upload content files (as seen from client system) 
	public static final String LOCAL_UPLOAD_DIR =  "/DocumentumAsyncNew/Async_Service_DEV7_TEMP/"+PROJECT_SUBFOLDER;
	//  path to upload xml requests (as seen from client system)
	public static final String LOCAL_REQUEST_DIR =  "/DocumentumAsyncNew/Async_Service_DEV7_TEMP/"+PROJECT_SUBFOLDER;
	public static final String TESTFILE =  "/home/FW0/projects/M28008_DocumentumProjects/duecmcustomerexamples/HELLO.pdf";
	
	// relative path to upload directory as seen from server system,
	// that is name of clent subdirectory which is located inside of
	// common upload directory on NAS
	public static final String UPLOAD_URL_PREFIX =  "file:///"+PROJECT_SUBFOLDER;

	@Test
	public void testOfflineCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// create SAF data structure (without using SafInvocation)
		CreateDocuments theType = factory.createCreateDocuments();
		//CreateDocuments_type theType = 
		//	factory.createCreateDocuments_type();
		//createDocuments.s
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
		// optional label
		//theType.setVersionLabel("CURRENT");
		
		// no need to provide user/password for OFFLINE load
		//theType.setSecurityContext(safSC);

		// generated random subdir name - there are 10 subdirectories
		// in each upload dir to avoid placing too many files in the same folder
		Random r = new Random();
		String subdirName="/"+r.nextInt(10)+"/";
		
		// First local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		File copyFile = copyResourceForUpload(TESTFILE, LOCAL_UPLOAD_DIR + subdirName);
		// add DocFile structure that contains link to the content file
		// in the form file:///Faxes/0/some_file_name.pdf
		DocFile docFile = createDocFile(factory,subdirName + copyFile.getName(), "pdf", copyFile.length());
		docData.setDocFile(docFile);
		
		// Prepare xml request:
		JAXBContext context = JAXBContext.newInstance("com.poalim.matbea.service.duecmcustomer");
		// We do not write file right into .xml, 
		// but firstNow we save the request into temporary file name (with tmp extension),
		// close it, and then rename it into xml file. This trick is needed
		// to avoid the rather improbable possiblility of partial reads since
		// write operation is not atomic.
		File requestTempFile = File.createTempFile("offlineInvoke-", ".offline",
				new File(LOCAL_REQUEST_DIR  + subdirName));
		OutputStream os = new FileOutputStream(requestTempFile);
		Writer writer = new OutputStreamWriter(os);
		
		//writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n");
		//writer.write("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n");
		//writer.write("<soap:Body>\n");
		Marshaller marshaller = context.createMarshaller();
		//marshaller.setProperty("com.sun.xml.bind.xmlDeclaration", Boolean.FALSE);
		// our context is a fragment, stop producing <?xml..>
		marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		//marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.FALSE);
		// actually convert SAF objects to XML and write it to output file
		marshaller.marshal(theType, writer);
		//writer.write("</soap:Body>\n</soap:Envelope>");
		writer.close();
		os.close();
		// now rename temporary file into xml file
		File requestFile = new File(requestTempFile.getAbsolutePath()+".xml"); 
		requestTempFile.renameTo(requestFile);
		System.out.println("wrote request to "+requestFile.getAbsolutePath());
		
		Unmarshaller unmarshaller = context.createUnmarshaller();
		Object a=unmarshaller.unmarshal(requestFile);
		
		
	}
	
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL(UPLOAD_URL_PREFIX+"/"+fileName);
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		System.err.println("creating file in '"+uploadDir+"'");
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		return outFile;
	}
	
	
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */


	/**
	 * Create DocFile for in-band based upload: content
	 * is transferred as base64 encoded data in the DocFile.docStream field
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(40);
		bankAccount2.setAccountBankId(41);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(43);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(1);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setExecutingEmpFullName("Dave");
		executorDetails.setIpAddress("ip");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(1);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("testgroup");
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details
				.setLegacyDocumentId("L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(2);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
	
}

	



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\PensionFundCreateExample.java
-----------------------------------------------------

/**
 * Example for creation of pension document using the 
 * DuRtrvPensionFundDoc.CreateDocuments service
 * 
 */
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;

import javax.xml.bind.JAXBException;

import junit.framework.Assert;

import org.junit.Test;

import com.poalim.matbea.service.durtrvpensionfunddoc.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;


public class PensionFundCreateExample {
	/**
	 * Junit test for pension fund document creation
	 * 
	 * @throws InvocationException
	 * @throws ApplicationException
	 * @throws JAXBException
	 * @throws IOException
	 */
	@Test
	public void testCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		// *** PREPARE METADATA
		// make security context
		SecurityContext safSC = this.makeUserSC(factory);
				
		// generate metadata data for the created document 
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createDocData(factory);
		
		
		// ** Copy file to NAS for upload by service
		// local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// automatically by service after load (or load failure)
		File copyFile = copyResourceForUpload("HELLO.pdf", this.getLocalUploadDir());
		// attach created file to the message
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		// *** create package of documents for upload
		// add created document to the upload packet
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		
		
		// create one or more events together with document creation
		DocEventData eventData = createDocEventData();
		docDataForCreate.getDocEventData().add(eventData);
		
		
		// add created DocData to the list: it's possible to upload several documents at once
		docDataForCreateList.add(docDataForCreate);
		
		// *** send message to the SAF service
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		// service return dctmDocumentIds of created documents
		for (DocIdData idData : safResults) {
			System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		}
	}
	
	
	/**
	 * Create events, p.e. scanning event
	 * 
	 * @return
	 * @throws JAXBException 
	 */
	protected DocEventData createDocEventData() throws JAXBException {
		ObjectFactory factory = new ObjectFactory();
		DocEventData eventData = factory.createDocEventData();
		// created manually
		eventData.setAutoEventInd(false);
		eventData.setChannelId(90);
		// event category, scanning event for pension documents
		eventData.setEventCategoryCode(301);
		// not really useful for scan event 
		eventData.setEventCategoryTypeCode(301);
		
		// event date
		eventData.setLegacyEventEntryDttm(this.createDateNoMili(factory));
		// event name -  
		eventData.setObjectName("some event");
				
		eventData.setBankolId(11);
		eventData.setEmpIdDocumentTypeCode(1);
		eventData.setExecutingBranchId(222);
		eventData.setExecutingEmpIdCode("1234567890");
		eventData.setExecutingEmpFullName("Pakid Ploni");
		eventData.setIpAddress("127.0.0.1");
		return eventData;
	}

	/**
	 * Call service to create documents
	 * 
	 * @param docDataForCreateList
	 * @param safSC
	 * @return
	 * @throws JAXBException
	 * @throws IOException
	 * @throws InvocationException
	 * @throws ApplicationException
	 */
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		DuRtrvPensionFundDocCreateDocumentsInvocation theInvocation = 
			new DuRtrvPensionFundDocCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		CreateDocuments_type theType = theInvocation.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
		
		// version label, not used for pension documents
		theType.setVersionLabel("");
		
		
		theInvocation.setParameters(theType);
		
		theInvocation.invoke();
		DuRtrvPensionFundDocCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	/**
	 * create security context: proper name and password must be provided.
	 * repository name is ignored
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		// replace with proper user/password according to environment
		safSc.setUserName("user");
		safSc.setPassword("password");
		// repository name according to environment: 
		// banhap_dev1 - DEV
		// banhap_qa1 - ST
		// banhap_prd -- production
		// currently server ignores this value and uses one that provided in server configuration
		safSc.setRepositoryName("banhap_qa1");
		return safSc;
	}
	
	/**
	 * Creates docDataForCreate - outermost type for uploaded documents
	 * 
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	/**
	 * Create extension part that stores 
	 * attributes of paper original
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "9999"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "77"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "55"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	
	/**
	 * Copy local file to NAS for upload
	 * 
	 * @param srcFilePath
	 * @param uploadDirPath
	 * @return
	 * @throws IOException
	 */
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}

	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		// pdf or tiff supported
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		// size of uploaded document will be checked by server after upload
		file.setDocSize(size);
		return file;
	}

	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "KAPAG";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		return "R:/Async_Service_QA/"+getUploadDir()+"/";
	}

	/**
	 * Create DocFile for ESB based upload. 
	 * Deprecated and not recommended for use 
	 * 
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	/**
	 * Create bank account data, this supposedly not needed for pension
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	/**
	 * Create customer data
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("123456789");
		customerKey.setCustomerFullName("Israel Israeli");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(1);
		customerKey.setOccasionalCustomerInd(false);
		// code 1- Israeli id
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	/**
	 *  Create full details of person that created the document
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
 		executorDetails.setBankolId(11);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(222);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		// code 1- Israeli id
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	/**
	 *  Create minimally acceptable details
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("BATCH #45678");
		executorDetails.setIpAddress("127.0.0.1");
		return executorDetails;
	}
	
	/**
	 * create DocCustomerData that contains document business metadata
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		// details on performer of document creation
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		// details of the document
		customerData.setDocDetails(createFullDocDetails(factory));
		
		// set extension attribute - not needed supposedly for pension documents
		//customerData.setCustom(createCustom(factory));
		// set group -  not needed supposedly for pension documents
		//customerData.setGroup(createGroup(factory));
		
		// set pension fund data
		customerData.setPensionFund(createPensionFund(factory));
		
		// bank accounts details --   not needed supposedly for pension documents
		//List<BankAccount> accounts =customerData.getBankAccounts();
		//accounts.clear();
		//accounts.add(createFullBankAccount(factory));
		//accounts.add(createFullBankAccount(factory));
		
		// customer details -  not needed supposedly for pension documents
		//customerData.getCustomerKeys().clear();
		//customerData.getCustomerKeys().add(createFullCustomer(factory));
		//customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// makat, business area/ subarea - must be consistent according to DPT
		details.setDocumentFormId("5555510052");
		details.setBusinessAreaCode(190);
		details.setBusinessSubAreaCode(90);
		
		// Id of business process
		details.setBusinessProcessId(4);
		
		// Channel (Arutz) id
		details.setChannelId(90);

		// not used for pension docs??
		// details.setCurrencyCode(1);

		// concatenated events - not used by pension documents
		//List<String> concEventIds = details.getConcatenatedEventIds();
		///concEventIds.clear();
		//concEventIds.add("event1");
		//concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		
		// Document group id - usually PID from process server - 
		// List documentGroupIds = details.getDocumentGroupIds();
		// documentGroupIds.clear();
		// documentGroupIds.add("group1");
		// documentGroupIds.add("group2");
		
		// document date
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		
		// generate unique ID for document (mandatory for pension documents)
		details.setLegacyDocumentId(java.util.UUID.randomUUID().toString());
								
		
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("dome object name.PDF");
		// mandatory: 1 - ongoing (shotef), 2 - history
		details.setOngoingOrHistoryCode(2);
		// project id - 4 for pension documents
		details.setProjectId(4);
		// is document already complete or must be completed in future?
		details.setDocCompletenessCode(0);
		// scan status code - not used for pension docs?
		//details.setScanStatusCode(0);

		// not needed for pension documents
		//details.setSystemCode(0);
		//details.setTemplateDataExistsInd(true);
		//details.setTransactionAmt(20.7);
		return details;
	}
	
	
	/**
	 * Creates current date w/o milliseconds, so this value can be used 
	 * in automated testing of document storage - 
	 * documentum/oracle do not store milliseconds in the database
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	/** 
	 * Create group - not needed for pension project
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	/** 
	 * Create custome attribute - not used for pension project
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	
	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	
	/**
	 * create pension funs and planholder numbers
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\PreparedSearchExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class PreparedSearchExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","dctm");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","dctm1");
//	private final static String DCTM_USER = System.getProperty("dctm_user","tofespeulausrtst");
//    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","1234");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
//    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_dev1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		PreparedSearchExample ex = new PreparedSearchExample();
		ex.search();
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value)
		throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("kg_main_query");

		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();
		// create named parameter  and give it name "tatTchum" and value 10 and add it to
		// list of parameters
		params.add(createNamedIntegerParam(objectFactory, "tatTchum",10));
		
		// create named parameter with name "kupot", which will contain list of pairs
		NamedQueryParam pairs = createNamedQueryParamList(objectFactory, "kupot");
		// add parameter "kuput" to list of parameters
		params.add(pairs);	
		
		
		// create first pair of (kupa, cheshbon)
		NamedQueryParam pair1 = createNamedQueryParamList(objectFactory, "pair1");

		// add parameter kupa with value 100 to first pair
		pair1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
			add(createNamedIntegerParam(objectFactory, "kupa",100));
		// add parameter cheshbon with value 12345 to first pair
		pair1.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "cheshbon",12345));
	
		// add first pair to the "kupot" list
		pairs.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(pair1);
		
		
		// create second pair of (kupa, cheshbon)
		NamedQueryParam pair2 = createNamedQueryParamList(objectFactory, "pair2");

		// add parameter kupa with value 101 to first pair
		pair2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
			add(createNamedIntegerParam(objectFactory, "kupa",101));
		// add parameter cheshbon with value 12346 to first pair
		pair2.getParamOrMultivalueParamOrParamList().getParamList().getParams().
		add(createNamedIntegerParam(objectFactory, "cheshbon",12346));
	
		// add first pair to the "kupot" list
		pairs.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(pair2);
		
				
		// add dates interval to list of parameters
		Calendar now = Calendar.getInstance();
		Calendar yesterday = Calendar.getInstance();
		yesterday.setTimeInMillis(System.currentTimeMillis() - 86400*3);
		
//		params.add(this.createNamedDateParam(objectFactory, "untilDate", now));
//		params.add(this.createNamedDateParam(objectFactory, "sinceDate", yesterday));
		params.add(this.createNamedDateParam(objectFactory, "EndDate", now));
		params.add(this.createNamedDateParam(objectFactory, "StartDate", yesterday));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth

		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		// search definitions - how to return results - not mandatory
		//SearchDefinition searchDef = objectFactory.createSearchDefinition();
		//searchDef.setMaxResultCount(25);
		//searchDef.setStartIndex(0);
		//theType.setSearchDefinition(searchDef);
		
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(475);
		executorDetails.setExecutingEmpIdCode("309999092");
		executorDetails.setExecutingEmpFullName("àìé àåæï");
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setTerminalChannelId(2);
		executorDetails.setInstructionReceiveTypeCode(0);
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		theInvocation.invoke();
		PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
		SearchResult searchResult = response.getSearchResult();
		
		//  get current search status
		SearchStatus status = searchResult.getSearchStatus();
		
		// get list of documents
		List docs = searchResult.getDocuments();
		System.out.println("returned "+docs.size()+" documents");
		
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\PutDocumentVersionExample.java
-----------------------------------------------------

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;

import javax.xml.bind.JAXBException;

import junit.framework.Assert;



import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class PutDocumentVersionExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws Exception {
		PutDocumentVersionExample ex = new PutDocumentVersionExample();
		ex.testPut();
	}
	

	
	public void testPut() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		DocDataForUpdate ddfu = factory.createDocDataForUpdate();
		DocData docData = createValidFullDocData(factory);
		ddfu.setDocData(docData);
		ddfu.setLegacyDocumentId("TEST_ID_FOR_PUT_DOCUMENT2");
		
		// 3. Upload file to NAS
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		// For Internet: it should be sent instead via CyberArk Safe (Kasefet)
		// YOUM MAY NEED TO CHANGE getLocalUploadDir() FOR THIS TO WORK
		//File copyFile = copyResourceForUpload("HELLO.pdf", this.getLocalUploadDir());
		//docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		
		putDocuments(ddfu , safSC);
		
	}
	
	public DocIdData putDocuments(DocDataForUpdate ddfu, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerPutDocumentVersionByLegacyDocumentIdInvocation theInvocation = new DuEcmCustomerPutDocumentVersionByLegacyDocumentIdInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.PutDocumentVersionByLegacyDocumentId_type theType = theInvocation
		.getObjectFactory().createPutDocumentVersionByLegacyDocumentId_type();
		
		theType.setSecurityContext(safSC);
		
		theType.setDocDataForUpdate(ddfu);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		
		// SYNC INVOCATION
		theInvocation.invoke();
		 DuEcmCustomerPutDocumentVersionByLegacyDocumentIdResult responce = theInvocation.getResult();
		DocIdData docIdData= responce.getPutDocumentVersionByLegacyDocumentIdResponse().getDocIdData();
		System.out.println("created/updated document "+docIdData.getDctmDocumentId());
		return docIdData;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {

		SecurityContext context = factory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		return context;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", ""));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		//propertyKeyValues
		//		.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "Tofes_Peula";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		// Upload folders for SYSTEM TEST are at 
		// Windows: \\172.22.13.146\MesilaDocsProcessing
		// NFS: 172.22.13.146:/vol/psmnas01_data/MesilaDocsProcessing
		// for SYSTEM TEST and DEV environments
		// the folder R:/Async_Service_QA contains sub folders per projectId,
		// e.g Faxes is for peojectId=3 (Faxes) 
		//     Tofes_peula is for peojectId=1,2 (Mismachey Yesod and Snif lelo Neyar)
		// This is same subfolder that is sent to server as part of upload URI
		// file:///Faxes/some_path.pdf
		return "/Async_Service_QA/Tofes_Peula";
	}

	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details
				.setLegacyDocumentId("L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(2);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SafAppReqMesilaUpdateAccountServiceExample.java
-----------------------------------------------------
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBException;

import org.junit.Test;

import com.poalim.matbea.service.duecmcustomer.AnyType;
import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;


/**
 * Example for the applicative update
 * appx_mesila_UpdateAccountDetails
 * 
 * @author FW0
 *
 */
public class SafAppReqMesilaUpdateAccountServiceExample  {

	@Test
	public void testMesilaUpdateAccount() throws Exception {
		// legacy id of document to be updated
		String legacyDocumentId = "L:502614333292464896";
		
		// 0. Create invocation, type and object factory
		DuEcmCustomerApplicativeRequestInvocation theInvocation = 
				new DuEcmCustomerApplicativeRequestInvocation();
		ObjectFactory of = theInvocation.getObjectFactory();
		ApplicativeRequest_type theType = of.createApplicativeRequest_type();
		theInvocation.setParameters(theType);
		
		// 1. Fill and set security context
		SecurityContext secCont = of.createSecurityContext();
		// NOTE: CHANGE THE USERNAME
		secCont.setUserName("tofespeulausrtst");
		// NOTE: CHANGE THE PASSWORD
		secCont.setPassword("1234");
		// QA repository
		secCont.setRepositoryName("banhap_qa1");
		theType.setSecurityContext(secCont);

		

		// 2. Fill and set request 
		PreparedQuery preparedQuery = of.createPreparedQuery();		
		// 2.1 request name
		preparedQuery.setContextName(null);
		preparedQuery.setName("appx_mesila_UpdateAccountDetails");
		
		// Create list of parameters
		List<NamedQueryParam> params = (List<NamedQueryParam>)preparedQuery.getParams();
			
		// parameters for locating documents
		// This one uniquely identifies the document
		params.add(createNamedStringParam(of, "LegacyDocumentId",legacyDocumentId));
		// those are additional attributes that are used in search for the document
		// Their value must correspond exactly 
		params.add(createNamedIntegerParam(of, "ProjectId", 2));
		params.add(createNamedIntegerParam(of, "BusinessSubAreaCode", 30));
		params.add(createNamedIntegerParam(of, "BusinessAreaCode", 190));
			
			
		// 2.2 Bank Account data for update
		BankAccount account = of.createBankAccount();
		account.setAccountBankId(12);
		account.setAccountNbr(123344);
		account.setBranchId(123);
		account.setDivisionId(1);
		account.setSpecialHandlingCode(true);
			
		params.add(createNamedObjectParam(of,"BankAccount",account));
		theType.setPreparedQuery(preparedQuery);
			
		// 2.3 Details of bank clerk/system thet performs the update
		ExecutorDetails executorDetails = of.createExecutorDetails();
		executorDetails.setBankolId(100);
		
		executorDetails.setExecutingEmpIdCode("ZEHUT01");
		executorDetails.setIpAddress("192.168.0.1");
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(767);
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		// 1 - israeli id
		executorDetails.setEmpIdDocumentTypeCode(1);
		// 1  - service box
		executorDetails.setInstructionReceiveTypeCode(1);
		executorDetails.setTerminalChannelId(111222);
				
		theType.setExecutorDetails(executorDetails);
	
		// invocation 
		theInvocation.invoke();
		List <NamedQueryParam>resultList = theInvocation.getResult().getApplicativeRequestResponse().getRequestResultsList();
		// there is no real need to handle results:
		// if we've got here the update has succeded
		for (NamedQueryParam result : resultList) {
			// SAF makes us work hard
			System.out.println(result.getName()+"="+result.getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		}
	}
	
	private NamedQueryParam createNamedObjectParam(ObjectFactory objectFactory,
			String name, Object object) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        AnyType anyType = objectFactory.createAnyType();
        List <Object>anyTypeContent = (List <Object>)anyType.getContent();
        anyTypeContent.add(object);
		param.getStringOrIntegerOrLong().setObject(anyType);
		ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
	}

	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
          NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
          namedParam.setName(name);
          // create single valued parameter and set its value (Integer)
          QueryParam param = objectFactory.createQueryParam();
          param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
          param.getStringOrIntegerOrLong().setString(value);
          // give value to the named parameter
          ParamOrMultivalueParamOrParamList paramValue =
                  objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
          paramValue.setParam(param);
          namedParam.setParamOrMultivalueParamOrParamList(paramValue);
          return namedParam;
  }
	
    public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);
        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setInteger(value);
        // give value to the named parameter
        ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);
        return namedParam;
    }

    

    public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
    	NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
    	namedParam.setName(name);
    	// create parameter (list)
    	QueryParamList paramList = objectFactory.createQueryParamList();
    	// give value to the named parameter
    	ParamOrMultivalueParamOrParamList paramValue =
    			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
    	paramValue.setParamList(paramList);
    	namedParam.setParamOrMultivalueParamOrParamList(paramValue);
    	return namedParam;
    }
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByAccountExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;



import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchByAccountExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchByAccountExample ex = new SearchByAccountExample();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchByAccount");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();

		// add executor parameters
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBankId",12));
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBranchId",170));
		
		// add account parameters
		params.add(createNamedIntegerParam(objectFactory, "AccountBankId",12));
		params.add(createNamedIntegerParam(objectFactory, "AccountNbr",5544));
		params.add(createNamedIntegerParam(objectFactory, "BranchId",170));

		// add dpt parameters
		params.add(createNamedIntegerParam(objectFactory, "BusinessAreaCode",50));
		params.add(createNamedIntegerParam(objectFactory, "BusinessSubAreaCode",10));
		
		
		// add dates interval to list of parameters
		Calendar now = Calendar.getInstance();
		Calendar start = Calendar.getInstance();
		start.set(Calendar.YEAR, 2000);
	
		
		params.add(this.createNamedDateParam(objectFactory, "EndDate", now));
		params.add(this.createNamedDateParam(objectFactory, "StartDate", start));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
		// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				
				
				List <BankAccount>accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				for (BankAccount account : accounts) {
					System.out.println("Account Number="+account.getAccountNbr());
					System.out.println("Account branch="+account.getBranchId());
					System.out.println("Account bank="+account.getAccountBankId());
				}

				ExecutorDetails exDetails = ddfr.getDocData().getDocCustomerData().getExecutorDetails();
				System.out.println("Executing bank="+exDetails.getExecutingBankId());
				System.out.println("Executing branch="+exDetails.getExecutingBranchId());
				System.out.println("Bank clerk ID="+exDetails.getExecutingEmpIdCode());
				System.out.println("Bank clerk full name="+exDetails.getExecutingEmpFullName());
				
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByCustomerAndFormId.java
-----------------------------------------------------
import java.util.List;
import javax.xml.bind.JAXBException;
import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchByCustomerAndFormId
{
    private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","1234");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

    public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException
    {
        SearchByCustomerAndFormId ex = new SearchByCustomerAndFormId();
        ex.search();
    }

    public void search() throws JAXBException, InvocationException, ApplicationException
    {
        DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = new DuEcmCustomerPreparedQueryMetaSearchInvocation();
        ObjectFactory objectFactory = theInvocation.getObjectFactory();

        PreparedQueryMetaSearch_type theType = objectFactory.createPreparedQueryMetaSearch_type();
        theInvocation.setParameters(theType);

        PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
        preparedQuery.setContextName(null);

        preparedQuery.setName("SearchByCustomerAndFormId");
        List<NamedQueryParam> params = preparedQuery.getParams();

        params.add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
        params.add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","CGTYWJRLN"));

        params.add(this.createNamedMultivalueStringParam(objectFactory, "DocumentFormIdList", new String[] {"5555500001","0000000001"}));

        theType.setPreparedQuery(preparedQuery);

        SecurityContext context = objectFactory.createSecurityContext();
        context.setUserName(DCTM_USER);
        context.setPassword(DCTM_PASSWORD);

        context.setRepositoryName(DCTM_REPO);
        theType.setSecurityContext(context);

        ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
        executorDetails.setExecutingBankId(12);
        executorDetails.setExecutingEmpIdCode("123456789");
        executorDetails.setExecutingEmpFullName("Ploni Almoni");
        executorDetails.setIpAddress("127.0.0.1");
        theType.setExecutorDetails(executorDetails);

        theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());

        FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
        METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
        meta.setMETA(objectFactory.createMeta());
        fetchTypeSet.setMETAOrFILEOrFULL(meta);
        theType.setFetchTypeSet(fetchTypeSet);

        SearchDefinition searchDef = objectFactory.createSearchDefinition();
        final int pageSize = 26;
        searchDef.setMaxResultCount(pageSize);
        searchDef.setStartIndex(0);
        searchDef.setCachedSearchId(0);
        theType.setSearchDefinition(searchDef);
        SearchStatus status = null;
        List <DocDataForRetrieve>docs = null;
        int page = 0;

        do {
            theInvocation.invoke();
            PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
            SearchResult searchResult = response.getSearchResult();

            //  get current search status
            status = searchResult.getSearchStatus();

            // get list of documents
            docs = searchResult.getDocuments();
            System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");

            for(int i = 0; i < docs.size(); i++)
            {
                DocDataForRetrieve ddfr =  docs.get(i);
                System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
                System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
            }

            searchDef.setStartIndex(page * pageSize);

        } while (docs.size()>=pageSize);
    }



    public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException
    {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);

        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setInteger(value);

        // give value to the named parameter
        NamedQueryParam.ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();

        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);

        return namedParam;
    }

    private NamedQueryParam createNamedMultivalueStringParam(
            ObjectFactory objectFactory, String paramName, String[] strings) throws JAXBException {
        NamedQueryParam param = objectFactory.createNamedQueryParam();
        param.setName(paramName);
        NamedQueryParam.ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
        param.setParamOrMultivalueParamOrParamList(paramValue);

        MultivalueQueryParam mvQueryParam = objectFactory.createMultivalueQueryParam();
        paramValue.setMultivalueParam(mvQueryParam);

        List valueList = param.getParamOrMultivalueParamOrParamList()
                .getMultivalueParam().getStringOrIntegerOrLong();
        for (String string : strings) {
            QueryParam.StringOrIntegerOrLong value =
                    objectFactory.createQueryParamStringOrIntegerOrLong();
            value.setString(string);
            valueList.add(value);
        }
        return param;
    }

    public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException
    {
        NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
        namedParam.setName(name);

        // create single valued parameter and set its value (Integer)
        QueryParam param = objectFactory.createQueryParam();
        param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
        param.getStringOrIntegerOrLong().setString(value);

        // give value to the named parameter
        NamedQueryParam.ParamOrMultivalueParamOrParamList paramValue =
                objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();

        paramValue.setParam(param);
        namedParam.setParamOrMultivalueParamOrParamList(paramValue);

        return namedParam;
    }
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByCustomerExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;



import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchByCustomerExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
	

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchByCustomerExample ex = new SearchByCustomerExample();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchByCustomerEx");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();

		// add executor parameters
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBankId",12));
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBranchId",855));
		
		// add customer parameters
		params.add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
		params.add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","14239099"));

		
		params.add(createNamedBooleanParam(objectFactory, "PerformCrossBankSearch",true));

		// add dpt parameters
		params.add(createNamedIntegerParam(objectFactory, "BusinessAreaCode",40));
		params.add(createNamedIntegerParam(objectFactory, "BusinessSubAreaCode",10));
		
		
		// add dates interval to list of parameters
		Calendar now = Calendar.getInstance();
		Calendar start = Calendar.getInstance();
		start.set(Calendar.YEAR, 2000);
	
		
		params.add(this.createNamedDateParam(objectFactory, "EndDate", now));
		params.add(this.createNamedDateParam(objectFactory, "StartDate", start));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 26;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
		// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	public NamedQueryParam createNamedBooleanParam(ObjectFactory objectFactory, String name, Boolean value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setBoolean(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByDocumentGroupId.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;



import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchByDocumentGroupId {
	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchByDocumentGroupId ex = new SearchByDocumentGroupId();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchByDocumentGroupId");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();

		// add executor parameters
		params.add(createNamedStringParam(objectFactory, "DocumentGroupId","ZZSOMEGROUPID11113"));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName("TSTDU11");
		context.setPassword("123456");
		//context.setRepositoryName("banhap_qa1");
		theType.setSecurityContext(context);
		
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata - not relevant for searches
		/*FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);*/
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.setTimeout(20000);
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
		// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				
				
				List <BankAccount>accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				for (BankAccount account : accounts) {
					System.out.println("Account Number="+account.getAccountNbr());
					System.out.println("Account branch="+account.getBranchId());
					System.out.println("Account bank="+account.getAccountBankId());
				}

				ExecutorDetails exDetails = ddfr.getDocData().getDocCustomerData().getExecutorDetails();
				System.out.println("Executing bank="+exDetails.getExecutingBankId());
				System.out.println("Executing branch="+exDetails.getExecutingBranchId());
				System.out.println("Bank clerk ID="+exDetails.getExecutingEmpIdCode());
				System.out.println("Bank clerk full name="+exDetails.getExecutingEmpFullName());
				
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByGroupIdExample.java
-----------------------------------------------------



import java.util.List;

import javax.xml.bind.JAXBException;




import com.poalim.matbea.service.duecmcustomer.BHPeulaPakidDataContext_type;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerSearchByDocumentGroupIdInvocation;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.SearchByDocumentGroupIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.SearchByDocumentGroupId_type;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchByGroupIdExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
    private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
    // currently ignored and overridden by server
    private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchByGroupIdExample ex = new SearchByGroupIdExample();
		ex.search();
	}
	
	
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		DuEcmCustomerSearchByDocumentGroupIdInvocation theInvocation = 
			new DuEcmCustomerSearchByDocumentGroupIdInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
		SearchByDocumentGroupId_type theType = 
			objectFactory.createSearchByDocumentGroupId_type();
		theInvocation.setParameters(theType);
		// group id to search for
		theType.setDocumentGroupId("ZZSOMEGROUPID11113");
		
		// executor details of caller
		BHPeulaPakidDataContext_type pakidContext = objectFactory.createBHPeulaPakidDataContext_type();
		pakidContext.setTachanaIpAddrs("127.0.0.1");
		pakidContext.setMprZihuyPakidMevatzea("1234456");
		theType.setPakidDataContext(pakidContext);
		
		// 2. prepare rest of parameters
		// auth
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		
		// search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		// default is 10
		searchDef.setMaxResultCount(25);
		// start of page of result list
		searchDef.setStartIndex(0);
		// not used
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		
		
		
		
		// if return additional info, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata for searches
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		theInvocation.setMessageExpiry(1000);
		theInvocation.invoke();
		SearchByDocumentGroupIdResponse_type response = theInvocation.getResult().getSearchByDocumentGroupIdResponse();
		SearchResult searchResult = response.getSearchResult();
		
		//  get current search status
		SearchStatus status = searchResult.getSearchStatus();
		
		// get list of documents
		List docs = searchResult.getDocuments();
		System.out.println("returned "+docs.size()+" documents");
		for(int i = 0; i < docs.size(); i++) {
			DocDataForRetrieve ddfr =  (DocDataForRetrieve)docs.get(i);
			System.out.println(" document["+i+"] id="+ddfr.getDocIdData().getDctmDocumentId());
			System.out.println(" document["+i+"] legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
			System.out.println(" document["+i+"] name="+ddfr.getDocData().getDocCustomerData().getDocDetails().getObjectName());
			System.out.println(" document["+i+"] form id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getDocumentFormId());
			System.out.println(" document["+i+"] form name="+ddfr.getDocDataDescr().getDocCustomerData().getDocDetails().getDocumentFormId());
			System.out.println(" document["+i+"] has content flag="+ddfr.isDoesFileContentExist());
		}
		
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchByParamGroupIdForDocData.java
-----------------------------------------------------
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class  SearchByParamGroupIdForDocData {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchByParamGroupIdForDocData ex = new SearchByParamGroupIdForDocData();
		ex.search();
	}

	public String str(int i) {
		return Integer.toString(i);
	}

	public String str(Double d) {
		return Double.toString(d);
	}

	// formats date in Zulu time, works with java 6
	//private static SimpleDateFormat rfc3339fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
	private static SimpleDateFormat mffmt = new SimpleDateFormat("yyyyMMdd  ");
	static {
		mffmt.setTimeZone(TimeZone.getTimeZone("UTC"));
	}

	public String str(Calendar c) {
		return mffmt.format(c.getTime());
	}

	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchByParamGroupIdForDocData_multi");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();


		
		params.add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode","332558088"));
		// add account parameters
		params.add(createNamedStringParam(objectFactory, "AccountBankId",str(12)));
		params.add(createNamedStringParam(objectFactory, "AccountNbr",str(591113)));
		params.add(createNamedStringParam(objectFactory, "BranchId",str(42)));
		//params.add(createNamedStringParam(objectFactory, "AccountType",-1));

		params.add(createNamedStringParam(objectFactory, "DocumentFormId","5555510052"));
		params.add(createNamedStringParam(objectFactory, "DocumentFormId","5555510051"));
		params.add(createNamedStringParam(objectFactory, "DocumentFormId","5555510053"));
			
		// add ext parameters
		params.add(createNamedStringParam(objectFactory, "NumberBranchConfidence",str(122)));
		params.add(createNamedStringParam(objectFactory, "NumberConfidence",str(1122)));
		
		// add dates interval to list of parameters
		Calendar ddate = Calendar.getInstance();
		ddate.set(Calendar.YEAR,  2018);
		ddate.set(Calendar.MONTH, 2);
		ddate.set(Calendar.DAY_OF_MONTH, 14);
		params.add(this.createNamedStringParam(objectFactory, "LegacyDocumentEntryDttm", str(ddate)));
		
		Calendar expdate = Calendar.getInstance();
		expdate.set(Calendar.YEAR,  2019);
		expdate.set(Calendar.MONTH, 2);
		expdate.set(Calendar.DAY_OF_MONTH, 14);
		params.add(this.createNamedStringParam(objectFactory, "ExpirationDate", str(expdate)));

		params.add(createNamedStringParam(objectFactory, "CreditType", str(12)));
		params.add(createNamedStringParam(objectFactory, "DepositNumber","12345678901234.0"));

		params.add(createNamedStringParam(objectFactory, "CurrencyCode",str(1)));

		params.add(createNamedStringParam(objectFactory, "SerialNbrLoanGuarantee",str(123444)));

		params.add(createNamedStringParam(objectFactory, "GushNumber",str(20334)));
		params.add(createNamedStringParam(objectFactory, "HelkaNumber","2.718281828"));
		params.add(createNamedStringParam(objectFactory, "CarNumber",str(12345678)));
		


		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
			// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				
				
				List <BankAccount>accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				for (BankAccount account : accounts) {
					System.out.println("Account Number="+account.getAccountNbr());
					System.out.println("Account branch="+account.getBranchId());
					System.out.println("Account bank="+account.getAccountBankId());
				}

				ExecutorDetails exDetails = ddfr.getDocData().getDocCustomerData().getExecutorDetails();
				System.out.println("Executing bank="+exDetails.getExecutingBankId());
				System.out.println("Executing branch="+exDetails.getExecutingBranchId());
				System.out.println("Bank clerk ID="+exDetails.getExecutingEmpIdCode());
				System.out.println("Bank clerk full name="+exDetails.getExecutingEmpFullName());
				
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}

	public void search_typed() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchByParamGroupIdForDocData_typed");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();

		// add account parameters
		params.add(createNamedIntegerParam(objectFactory, "AccountBankId",12));
		params.add(createNamedIntegerParam(objectFactory, "AccountNbr",591113));
		params.add(createNamedIntegerParam(objectFactory, "BranchId",42));
		//params.add(createNamedIntegerParam(objectFactory, "AccountType",-1));

		params.add(createNamedStringParam(objectFactory, "DocumentFormId","5555510052"));

			
		// add ext parameters
		params.add(createNamedIntegerParam(objectFactory, "NumberBranchConfidence",122));
		params.add(createNamedIntegerParam(objectFactory, "NumberConfidence",1122));
		
		
		// add dates interval to list of parameters
		Calendar ddate = Calendar.getInstance();
		ddate.set(Calendar.YEAR,  2018);
		ddate.set(Calendar.MONTH, 2);
		ddate.set(Calendar.DAY_OF_MONTH, 14);
		params.add(this.createNamedDateParam(objectFactory, "LegacyDocumentEntryDttm", ddate));

		
		Calendar expdate = Calendar.getInstance();
		expdate.set(Calendar.YEAR,  2019);
		expdate.set(Calendar.MONTH, 2);
		expdate.set(Calendar.DAY_OF_MONTH, 14);
		params.add(this.createNamedDateParam(objectFactory, "ExpirationDate", expdate));

		params.add(createNamedIntegerParam(objectFactory, "CreditType",12));
		params.add(createNamedDoubleParam(objectFactory, "DepositNumber",12345678901234.0));

		params.add(createNamedIntegerParam(objectFactory, "CurrencyCode",1));

		params.add(createNamedIntegerParam(objectFactory, "SerialNbrLoanGuarantee",123444));

		params.add(createNamedIntegerParam(objectFactory, "GushNumber",20334));
		params.add(createNamedDoubleParam(objectFactory, "HelkaNumber",2.718281828));
		params.add(createNamedIntegerParam(objectFactory, "CarNumber",12345678));
		


		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName("dctm");
		context.setPassword("dctm1");
		context.setRepositoryName("banhap_qa1");
		theType.setSecurityContext(context);
		
		
		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		meta.setMETA(objectFactory.createMeta());
		fetchTypeSet.setMETAOrFILEOrFULL(meta);
		theType.setFetchTypeSet(fetchTypeSet);
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
			// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				
				
				List <BankAccount>accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				for (BankAccount account : accounts) {
					System.out.println("Account Number="+account.getAccountNbr());
					System.out.println("Account branch="+account.getBranchId());
					System.out.println("Account bank="+account.getAccountBankId());
				}

				ExecutorDetails exDetails = ddfr.getDocData().getDocCustomerData().getExecutorDetails();
				System.out.println("Executing bank="+exDetails.getExecutingBankId());
				System.out.println("Executing branch="+exDetails.getExecutingBranchId());
				System.out.println("Bank clerk ID="+exDetails.getExecutingEmpIdCode());
				System.out.println("Bank clerk full name="+exDetails.getExecutingEmpFullName());
				
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
	}		


	
		public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
			NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
			namedParam.setName(name);
			// create single valued parameter and set its value (Integer)
			QueryParam param = objectFactory.createQueryParam();
			param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
			param.getStringOrIntegerOrLong().setDouble(value);
			// give value to the named parameter
			ParamOrMultivalueParamOrParamList paramValue = 
				objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
			paramValue.setParam(param);
			namedParam.setParamOrMultivalueParamOrParamList(paramValue);
			return namedParam;
		}
	
		public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
			NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
			namedParam.setName(name);
			// create single valued parameter and set its value (Integer)
			QueryParam param = objectFactory.createQueryParam();
			param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
			param.getStringOrIntegerOrLong().setString(value);
			// give value to the named parameter
			ParamOrMultivalueParamOrParamList paramValue = 
				objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
			paramValue.setParam(param);
			namedParam.setParamOrMultivalueParamOrParamList(paramValue);
			return namedParam;
		}
	
		public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
			NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
			namedParam.setName(name);
			// create single valued parameter and set its value (Integer)
			QueryParam param = objectFactory.createQueryParam();
			param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
			param.getStringOrIntegerOrLong().setInteger(value);
			// give value to the named parameter
			ParamOrMultivalueParamOrParamList paramValue = 
				objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
			paramValue.setParam(param);
			namedParam.setParamOrMultivalueParamOrParamList(paramValue);
			return namedParam;
		}
	
		public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
			NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
			namedParam.setName(name);
			// create single valued parameter and set its value (Calendar)
			QueryParam param = objectFactory.createQueryParam();
			param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
			param.getStringOrIntegerOrLong().setDate(value);
			// give value to the named parameter
			ParamOrMultivalueParamOrParamList paramValue = 
				objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
			paramValue.setParam(param);
			namedParam.setParamOrMultivalueParamOrParamList(paramValue);
			return namedParam;
		}
	
		public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
			NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
			namedParam.setName(name);
			// create parameter (list)
			QueryParamList paramList = objectFactory.createQueryParamList();
			// give value to the named parameter
			ParamOrMultivalueParamOrParamList paramValue = 
				objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
			paramValue.setParamList(paramList);
			namedParam.setParamOrMultivalueParamOrParamList(paramValue);
			return namedParam;
		}
	}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SearchDivisionBusinessExample.java
-----------------------------------------------------


import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;



import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerPreparedQueryMetaSearchInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearchResponse_type;
import com.poalim.matbea.service.duecmcustomer.PreparedQueryMetaSearch_type;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SearchDefinition;
import com.poalim.matbea.service.duecmcustomer.SearchResult;
import com.poalim.matbea.service.duecmcustomer.SearchStatus;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet.METAOrFILEOrFULL;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SearchDivisionBusinessExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException {
		SearchDivisionBusinessExample ex = new SearchDivisionBusinessExample();
		ex.search();
	}
	
	public void search() throws JAXBException, InvocationException, ApplicationException {
		
		DuEcmCustomerPreparedQueryMetaSearchInvocation theInvocation = 
			new DuEcmCustomerPreparedQueryMetaSearchInvocation();
		ObjectFactory objectFactory = theInvocation.getObjectFactory();
	
		PreparedQueryMetaSearch_type theType = 
			objectFactory.createPreparedQueryMetaSearch_type();
		theInvocation.setParameters(theType);
		
		// 1. prepare prepared query param
		PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		preparedQuery.setContextName(null);
		preparedQuery.setName("SearchDivisionBusiness");
		
		// get list of parameters
		List<NamedQueryParam> params = preparedQuery.getParams();

		// add executor parameters
		params.add(createNamedIntegerParam(objectFactory, "ExecutingBankId",12));
		//params.add(createNamedIntegerParam(objectFactory, "ExecutingBranchId",170));
		
		// Add operator for accounts/customers
		params.add(createNamedStringParam(objectFactory, "OperatorByCustomesrAndAccounts", "OR"));
		
		// Add list of accounts
		final int accountsCount  = 3;
		int accountVals[] = new int[] {5544  , 226219, 9129};
		int branchVals [] = new int[] { 170  ,  753,    716};
		int bankVals   [] = new int[] {  12  ,   12,     12};
		
		NamedQueryParam accountsList = createNamedQueryParamList(objectFactory, "Accounts");
		params.add(accountsList);	
		
		for (int i = 0; i < accountsCount; i++) {
			NamedQueryParam accountEntry = createNamedQueryParamList(objectFactory, "Account");
			accountEntry.getParamOrMultivalueParamOrParamList().getParamList().getParams().
				add(createNamedIntegerParam(objectFactory, "AccountNbr", accountVals[i]));
			accountEntry.getParamOrMultivalueParamOrParamList().getParamList().getParams().
				add(createNamedIntegerParam(objectFactory, "BranchId",   branchVals[i]));
			accountEntry.getParamOrMultivalueParamOrParamList().getParamList().getParams().
   			    add(createNamedIntegerParam(objectFactory, "AccountBankId",   bankVals[i]));
			accountsList.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(accountEntry);
		}
		
		
		
		NamedQueryParam customersList = createNamedQueryParamList(objectFactory, "Customers");
		params.add(customersList);	
		
		String customerIdVals[] = new String[] { "14239099", "5423173"};
		int customerIdTypeCodeVals[] = new int[]  { 1,         1};
		int customerCount=2;
		for (int i = 0; i < customerCount; i++) {
			NamedQueryParam customerEntry = createNamedQueryParamList(objectFactory, "CustomerKey");
			customerEntry.getParamOrMultivalueParamOrParamList().getParamList().getParams().
				add(createNamedStringParam(objectFactory, "CompleteCustomerIdCode", customerIdVals[i]));
			customerEntry.getParamOrMultivalueParamOrParamList().getParamList().getParams().
				add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",  customerIdTypeCodeVals[i]));
			customersList.getParamOrMultivalueParamOrParamList().getParamList().getParams().add(customerEntry);
		}
		
		// dates interval and exp date
		Calendar now = Calendar.getInstance();
		Calendar start = Calendar.getInstance();
		start.set(Calendar.YEAR, 2000);
		//Calendar expDate = Calendar.getInstance();
		//expDate.set(Calendar.YEAR, now.get(Calendar.YEAR));
		
		
		// add some business parameters
		params.add(createNamedIntegerParam(objectFactory, "original_document"   ,1));
		params.add(createNamedIntegerParam(objectFactory, "serial_nbr_loan_guarantee"   ,3));
		params.add(createNamedIntegerParam(objectFactory, "number_confidence"   ,7403929));
		// new attributes
		// params.add(createNamedIntegerParam(objectFactory,"number_deal",22));
		// params.add(createNamedIntegerParam(objectFactory,"number_branch_confidence",55));

		
		// params.add(createNamedDateParam(objectFactory, "expiration_date", expDate));
		
		// params.add(createNamedIntegerParam(objectFactory,"credit_type",12345));
		// params.add(createNamedDoubleParam(objectFactory,"deposit_number", 1234567891234.0));
		// params.add(createNamedIntegerParam(objectFactory,"car_number",425452));
		// params.add(createNamedIntegerParam(objectFactory,"gush_number",20334));
		// params.add(createNamedDoubleParam(objectFactory,"helka_number",3.1415926));
		// params.add(createNamedIntegerParam(objectFactory,"tat_helka_number",2222));
		// params.add(createNamedIntegerParam(objectFactory,"property_type",3333));
		
		
		params.add(createNamedStringParam(objectFactory, "OperatorByOtherDataForDivisionBusiness", "OR"));
		
		params.add(createNamedStringParam(objectFactory, "ExecutingEmpIdCode","054169891"));
		params.add(createNamedIntegerParam(objectFactory, "EmpIdDocumentTypeCode"   ,1));
		
		 
		
		// add general parameters
		params.add(createNamedIntegerParam(objectFactory, "BusinessAreaCode"   ,999));
		params.add(createNamedIntegerParam(objectFactory, "BusinessSubAreaCode",999));
	
		
		params.add(this.createNamedDateParam(objectFactory, "EndDate", now));
		params.add(this.createNamedDateParam(objectFactory, "StartDate", start));
		
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		
		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		// if return additional info, not relevant for pensions, the defaults will do 
		theType.setDocRetrievalFlags(objectFactory.createDocRetrievalFlags());
		
		// return content, metadata or both - select metadata
		
		
//		METAOrFILEOrFULL meta = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
//		
//		meta.setMETA(objectFactory.createMeta());
//		fetchTypeSet.setMETAOrFILEOrFULL(meta);
//		theType.setFetchTypeSet(fetchTypeSet);
//		
		FetchTypeSet fetchTypeSet = objectFactory.createFetchTypeSet();
		METAOrFILEOrFULL full = objectFactory.createFetchTypeSetMETAOrFILEOrFULL();
		full.setFULL(objectFactory.createFull());
		fetchTypeSet.setMETAOrFILEOrFULL(full);
		theType.setFetchTypeSet(fetchTypeSet);
		
		
		//search definitions - how to return results - not mandatory
		SearchDefinition searchDef = objectFactory.createSearchDefinition();
		final int pageSize = 10;
		searchDef.setMaxResultCount(pageSize);
		searchDef.setStartIndex(0);
		searchDef.setCachedSearchId(0);
		theType.setSearchDefinition(searchDef);
		SearchStatus status = null;
		List <DocDataForRetrieve>docs = null;
		int page = 0;
		// get all results possibly in several pages
		do {
			theInvocation.invoke();
			PreparedQueryMetaSearchResponse_type response = theInvocation.getResult().getPreparedQueryMetaSearchResponse();
			SearchResult searchResult = response.getSearchResult();
		
			//  get current search status
			status = searchResult.getSearchStatus();
		
		// get list of documents
			docs = searchResult.getDocuments();
			System.out.println("page "+(page++)+" returned "+docs.size()+" documents:");
			for(int i = 0; i < docs.size(); i++) {
				DocDataForRetrieve ddfr =  docs.get(i);
				System.out.println(" document id="+ddfr.getDocIdData().getDctmDocumentId());
				System.out.println(" document legacy id="+ddfr.getDocData().getDocCustomerData().getDocDetails().getLegacyDocumentId());
				
				
				List <BankAccount>accounts = ddfr.getDocData().getDocCustomerData().getBankAccounts();
				for (BankAccount account : accounts) {
					System.out.println("Account Number="+account.getAccountNbr());
					System.out.println("Account branch="+account.getBranchId());
					System.out.println("Account bank="+account.getAccountBankId());
				}

				ExecutorDetails exDetails = ddfr.getDocData().getDocCustomerData().getExecutorDetails();
				System.out.println("Executing bank="+exDetails.getExecutingBankId());
				System.out.println("Executing branch="+exDetails.getExecutingBranchId());
				System.out.println("Bank clerk ID="+exDetails.getExecutingEmpIdCode());
				System.out.println("Bank clerk full name="+exDetails.getExecutingEmpFullName());
				
				System.out.println("Docfile: "+ddfr.getDocData().getDocFile());
				
			}
			searchDef.setStartIndex(page * pageSize);
		} while (docs.size()>=pageSize);
		
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedStringParam(ObjectFactory objectFactory, String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\SecurityTokenProducerExample.java
-----------------------------------------------------

import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.dusecuritytokenproducer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class SecurityTokenProducerExample {
	public static void main(String [] argv) throws JAXBException, ApplicationException {
		ObjectFactory factory = new ObjectFactory();
		DuSecurityTokenProducerEncryptInvocation invocation = new  DuSecurityTokenProducerEncryptInvocation();
		
		Encrypt_type theType = factory.createEncrypt_type();
		List paramsList = theType.getEncryptionParamsList();

		EncryptionParams params = factory.createEncryptionParams();
		params.setAllowedUser("SOMEUSER");
		params.setObjectId("SOME_OBJECT_ID");
		paramsList.add(params);

		EncryptionParams params2 = factory.createEncryptionParams();
		params2.setAllowedUser("SOMEUSER2");
		params2.setObjectId("SOME_OBJECT_ID2");
		paramsList.add(params2);
		
		invocation.setParameters(theType);
		try {
			invocation.invoke();
		} catch ( InvocationException ex) {
			System.err.println("Exception occured: "+ex.toString());
			ex.printStackTrace(System.err);
		}
		DuSecurityTokenProducerEncryptResult result = invocation.getResult();
		EncryptResponse_type response = result.getEncryptResponse();
		List <TokenReply> list = response.getTokenReplyList();
		for (int idx = 0; idx < list.size() ; idx++) {
			System.out.println("response["+idx+"]:");
			TokenReply reply = list.get(idx);
			System.out.println("  token='"+reply.getToken()+"'");
		}
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\TestsSSLConfiguration.java
-----------------------------------------------------

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import javax.net.ssl.SSLContext;

//import com.sun.net.ssl.HttpsURLConnection;

public class TestsSSLConfiguration {
	protected static TrustManager[] credulousTrustManagers = new TrustManager[] {
			new X509TrustManager() {
				// FIXME: why @Override causes error?!!!
				//@Override
				public void checkClientTrusted(X509Certificate[] arg0,
						String arg1) throws CertificateException {
				}

				//@Override
				public void checkServerTrusted(X509Certificate[] arg0,
						String arg1) throws CertificateException {
				}

				//@Override
				public X509Certificate[] getAcceptedIssuers() {
					return null;
				}
				
			}
	};
	
	public static SSLSocketFactory getCredulousSocketFactory() throws KeyManagementException, NoSuchAlgorithmException {
		SSLContext context = SSLContext.getInstance("TLS");
		KeyManager[] keyManagers = null;
		TrustManager[] trustManagers = credulousTrustManagers;
		SecureRandom secureRandom = new SecureRandom();
		context.init(keyManagers, trustManagers, secureRandom);
		return context.getSocketFactory();
	}
	
	public static void configSSL() throws NoSuchAlgorithmException,
	KeyManagementException {
		SSLContext context = SSLContext.getInstance("TLS");
		KeyManager[] keyManagers = null;
		TrustManager[] trustManagers = credulousTrustManagers;
		SecureRandom secureRandom = new SecureRandom();
		//context.init((KeyManager[])null, credulousTrustManagers, new SecureRandom());
		context.init(keyManagers, trustManagers, secureRandom);
		//HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
	}
	
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\UpdateTfsPeulaVersContExample.java
-----------------------------------------------------


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.List;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.ApplicativeRequestResponse_type;
import com.poalim.matbea.service.duecmcustomer.ApplicativeRequest_type;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerApplicativeRequestInvocation;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PreparedQuery;
import com.poalim.matbea.service.duecmcustomer.QueryParam;
import com.poalim.matbea.service.duecmcustomer.QueryParamList;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.NamedQueryParam.ParamOrMultivalueParamOrParamList;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class UpdateTfsPeulaVersContExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");
	
	public static void main(String [] args) throws InvocationException, ApplicationException, JAXBException, IOException {
		UpdateTfsPeulaVersContExample ex = new UpdateTfsPeulaVersContExample();
		ex.perform();
	}
	
	public void perform() throws JAXBException, InvocationException, ApplicationException, IOException {
		
		 DuEcmCustomerApplicativeRequestInvocation theInvocation = new DuEcmCustomerApplicativeRequestInvocation();
		 ObjectFactory objectFactory = theInvocation.getObjectFactory();
		 ApplicativeRequest_type theType = objectFactory.createApplicativeRequest_type();
		 theInvocation.setParameters(theType);
		
		 // 1. prepare prepared query param
		 PreparedQuery preparedQuery = objectFactory.createPreparedQuery();
		
		 preparedQuery.setContextName(null);
		 preparedQuery.setName("appx_mesila_UpdateTfsPeulaVersCont");

		 // get list of parameters 
		 List<NamedQueryParam> params = preparedQuery.getParams();
		 // add to it parameters
		 
		 // ID to locate the document, may be LegacyDocumentId as well 
		 params.add(createNamedStringParam(objectFactory,
				 "DctmDocumentId","a5cd4847-d9eb-49ff-8fa6-4a8dcdaf5e04"));
		 
		 // add current time as new document date
		 Calendar now = Calendar.getInstance();
		 now.setTimeInMillis(System.currentTimeMillis());
		 params.add(this.createNamedDateParam(objectFactory, "LegacyDocumentEntryDttm", now));
		 
		 params.add(this.createNamedDoubleParam(objectFactory, "TransactionAmt", 9.99));
		 
		 // 4 - not for scanning
		 params.add(createNamedIntegerParam(objectFactory, "ScanStatusCode",4));
		 
		 // 1 - w/o signature
		 params.add(createNamedIntegerParam(objectFactory, "SignatureStatusCode",1));
		
		 // extansion attributes 
		 params.add(createNamedIntegerParam(objectFactory, "document_page_cnt",1));
		 params.add(createNamedDateParam(objectFactory, "archive_date",now));
		 
		 // ID to locate the document, may be LegacyDocumentId as well 
		 params.add(createNamedStringParam(objectFactory,
				 "CustomText","someField=SomeValue,SomeMoreField=SomeMoreValue"));
		
		 
		 // customer atributes
		 params.add(createNamedStringParam(objectFactory,
				 "CompleteCustomerIdCode","123456789"));
		 // 1 = Israeli I.D.
		 params.add(createNamedIntegerParam(objectFactory, "CustomerIdDocTypeCode",1));
		 	 
		 params.add(createNamedDoubleParam(objectFactory,"CustomerId",76767676768D));
		 params.add(createNamedStringParam(objectFactory,
				 "CustomerFullName","Mr. Nice Guy"));
		 // I.D. instance num
		 params.add(createNamedIntegerParam(objectFactory, "CustomerSerialNbr",1));
		 
		 params.add(createNamedBooleanParam(objectFactory,"OccasionalCustomerInd",Boolean.FALSE));
		 
//		 // make file for upload 
		 byte[] content = "BOGUS CONTENT\n".getBytes();
		 String serverUploadDir = "/Async_Service_QA/";
		 String relPath = "Tofes_Peula/1/";
		 String uploadPath= serverUploadDir + relPath;
		 File uploadFile = File.createTempFile("upload_", ".txt", new File(uploadPath));
		 OutputStream uploadStream = new FileOutputStream(uploadFile);
		 uploadStream.write(content);
		 uploadStream.flush();
		 uploadStream.close();

		 // set file related params
		 params.add(createNamedStringParam(objectFactory,
				 "DocURL","file:///"+relPath+uploadFile.getName()));
		 params.add(createNamedStringParam(objectFactory,
				 "DocFormat","text"));
		 params.add(createNamedLongParam(objectFactory,
				 "DocSize",uploadFile.length()));
		// set prepared query
		theType.setPreparedQuery(preparedQuery);
		
		// 2. prepare rest of parameters
		// auth
		
		SecurityContext context = objectFactory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		theType.setSecurityContext(context);

		ExecutorDetails executorDetails = objectFactory.createExecutorDetails();
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingEmpIdCode("123456789");
		executorDetails.setExecutingEmpFullName("Ploni Almoni");
		executorDetails.setIpAddress("127.0.0.1");
		theType.setExecutorDetails(executorDetails);
		
		
		theInvocation.invoke();
		// if we got here than the method has succeded, so the following
		ApplicativeRequestResponse_type response = theInvocation.getResult().getApplicativeRequestResponse();
		List <NamedQueryParam>resultList = response.getRequestResultsList();
		System.out.println("return value: "+resultList.get(0).getName()+"=" + 
				resultList.get(0).getParamOrMultivalueParamOrParamList().getParam().getStringOrIntegerOrLong().getString());
		
	}
	
	public NamedQueryParam createNamedBooleanParam(ObjectFactory objectFactory,
			String name, Boolean value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setBoolean(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}

	private NamedQueryParam createNamedStringParam(ObjectFactory objectFactory,
			String name, String value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (String)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setString(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}

	public NamedQueryParam createNamedIntegerParam(ObjectFactory objectFactory, String name, Integer value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setInteger(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedLongParam(ObjectFactory objectFactory, String name, Long value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setLong(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDoubleParam(ObjectFactory objectFactory, String name, Double value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Integer)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDouble(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedDateParam(ObjectFactory objectFactory, String name, Calendar value) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create single valued parameter and set its value (Calendar)
		QueryParam param = objectFactory.createQueryParam();
		param.setStringOrIntegerOrLong(objectFactory.createQueryParamStringOrIntegerOrLong());
		param.getStringOrIntegerOrLong().setDate(value);
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParam(param);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
	
	public NamedQueryParam createNamedQueryParamList(ObjectFactory objectFactory, String name) throws JAXBException {
		NamedQueryParam namedParam = objectFactory.createNamedQueryParam();
		namedParam.setName(name);
		// create parameter (list)
		QueryParamList paramList = objectFactory.createQueryParamList();
		// give value to the named parameter
		ParamOrMultivalueParamOrParamList paramValue = 
			objectFactory.createNamedQueryParamParamOrMultivalueParamOrParamList();
		paramValue.setParamList(paramList);
		namedParam.setParamOrMultivalueParamOrParamList(paramValue);
		return namedParam;
	}
}


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\UploadCreateExample.java
-----------------------------------------------------

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;

import javax.xml.bind.JAXBException;

import junit.framework.Assert;

import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class UploadCreateExample {
	// NOTE: NEED TO CHANGE CONNECTION PROPERTIES: APPLICATIVE USER/PASSWORD/REPO + NAS upload path
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public void main(String argv[]) throws Exception {
		(new UploadCreateExample()).testCreate();
	}
	
	
	public void testCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		// 3. Upload file to NAS
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		// For Internet: it should be sent instead via CyberArk Safe (Kasefet)
		File copyFile = copyResourceForUpload("HELLO.pdf", this.getLocalUploadDir());
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		
		// call ESB 
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		}
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		
		// SYNC INVOCATION
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext context = factory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);

		context.setRepositoryName(DCTM_REPO);
		return context;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "Tofes_Peula";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		// Upload folders for SYSTEM TEST are at 
		// Windows: \\172.22.13.146\MesilaDocsProcessing
		// NFS: 172.22.13.146:/vol/psmnas01_data/MesilaDocsProcessing
		// for SYSTEM TEST and DEV environments
		// the folder R:/Async_Service_QA contains sub folders per projectId,
		// e.g Faxes is for peojectId=3 (Faxes) 
		//     Tofes_peula is for peojectId=1,2 (Mismachey Yesod and Snif lelo Neyar)
		// This is same subfolder that is sent to server as part of upload URI
		// file:///Faxes/some_path.pdf
		return "/Async_Service_QA/Tofes_Peula";
	}

	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details
				.setLegacyDocumentId("L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(2);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\UploadCreateExampleWithCustData.java
-----------------------------------------------------

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;

import javax.xml.bind.JAXBException;

import junit.framework.Assert;

import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

// SAMPLE for creating Customer Document
// by calling the DuECMCustomer.createDocuments service
// with NAS based file transfer
public class UploadCreateExampleWithCustData {
	
	// NOTE: NEED TO CHANGE CONNECTION PROPERTIES: APPLICATIVE USER/PASSWORD/REPO + NAS upload path
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	// upload directory as seen from client:

	// Upload folders for SYSTEM TEST are at 
	// Windows: \\172.22.13.146\MesilaDocsProcessing
	// NFS: 172.22.13.146:/vol/psmnas01_data/MesilaDocsProcessing
	// for SYSTEM TEST and DEV environments
	// the folder \\172.22.13.146\MesilaDocsProcessing\Async_Service_QA contains sub folders per projectId,
	// e.g Faxes is for peojectId=3 (Faxes) 
	// Tofes_peula is for peojectId=1,2 (Mismachey Yesod and Snif lelo Neyar), etc
	// This is same subfolder that is sent to server as part of upload URI
	// file:///Faxes/some_path.pdf
	
	/**
	 * relative path to project's upload directory as seen from server system,
	 * that is name of client subdirectory which is located inside of
	 * common upload directory on NAS */
	private final static String UPLOAD_SUBDIR="Tofes_Peula";
	// full path as seen from the client
	private final static String UPLOAD_PATH="/Async_Service_QA/"+UPLOAD_SUBDIR;
	
	public void testCreate() throws InvocationException, ApplicationException, JAXBException, IOException {
		ObjectFactory factory = new ObjectFactory();
		
		// 1. Create SecurityContext with username/password and repository name
		SecurityContext safSC = this.makeUserSC(factory);
				
		// 2. create document metadata
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		// 3. Upload file to NAS
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		// For Internet: it should be sent instead via CyberArk Safe (Kasefet)
		File copyFile = copyResourceForUpload("HELLO.pdf", UPLOAD_PATH);
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		
		// call ESB 
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with id: "+idData.getDctmDocumentId()+" label is "+idData.getVersionLabel());
		}
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		// For Async
		//DuEcmCustomerCreateDocumentsAsyncInvocation theInvocation = new DuEcmCustomerCreateDocumentsAsyncInvocation();
		// For Sync
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		// ASYNC INVOCATION: 
		// value is name of an ESB configuration, not a regular queue name   
		//theInvocation.setLogicalReplyToQueueName(value);
		//theInvocation.setLogicalReplyToQueue(true);
		//theInvocation.invokeSendAsync();
		
		// SYNC INVOCATION
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		// banhap_qa1 ST
		// banhap_prd PROD
		// banhap_dev1 DEV
		safSc.setRepositoryName(DCTM_REPO);
		return safSc;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload. Path must be provided as standard file URL
	 * with empty server part and only with relative path filled 
	 * (because server and clients may see full path differently)
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+UPLOAD_SUBDIR+"/"+fileName);
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	
	
	
	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		// not known
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(1);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	/**
	 * Create document metadata
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		// Custom text
		//customerData.setCustom(createCustom(factory));
		// group
		//customerData.setGroup(createGroup(factory));
		// pension fund data
		//customerData.setPensionFund(createPensionFund(factory));
		// bank account data
		//List<BankAccount> accounts =customerData.getBankAccounts();
		//accounts.clear();
		//accounts.add(createFullBankAccount(factory));
		//accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		// document can have multiple customers
		//customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	
	/**
	 * Create general document METADATA, that is attributes that
	 * describe document itself, not it's customer, account, contents, paper copy, etc
	 * 
	 * @param factory
	 * @return
	 * @throws JAXBException
	 */
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// Id of business process that creates this document - from ARIS - doron segev
		details.setBusinessProcessId(11);

		// Those 3 fields are mandatory. The triple must be consistent with DPT204X
		// (managed by Ronen Sofer). 
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		// code of document type  "MAKAT", 
		details.setDocumentFormId("5555510052");
		
		// Source channel: branch office, Internet, mobile, fax, etc
		details.setChannelId(13);
		// code of transaction currency
		//details.setCurrencyCode(1);

		//  One may attach one or more events at creation time
		//		List<String> concEventIds = details.getConcatenatedEventIds();
		//		concEventIds.clear();
		//		concEventIds.add("event1");
		//		concEventIds.add("event2");

		// complete document with full metadata that will be checked for validity before document is created
		details.setDocCompletenessCode(0);
				
		// group id that can be used to identify group of related documents. 
		// a document can be member of several groups
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificGoupId());
		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("ZZSOMEGROUPID11113");
		//documentGroupIds.add("group2");
		
		// document date - in most cases must be same date that appears in the text of the document
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		// optional customer's document user provided unique document id
		// if provided must contain predefined system specific prefix - Doron Segev
		// or, alternatively, be standard UUID
		// details.setLegacyDocumentId("ZZ"+getSystemSpecificLegacyId());
		details.setLegacyDocumentId(java.util.UUID.randomUUID().toString());
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		// this should be set to original file name (if there is one)
		details.setObjectName("someObjectName");
		// is the document current or historic: 1 - current
		details.setOngoingOrHistoryCode(1);
		// project ID (Faxes, tofes peula, etc).
		details.setProjectId(2);
		// scan status code - not for scanning
		details.setScanStatusCode(4);
		// code of system that creates documents (from ARIS)
		details.setSystemCode(0);
		// has printboss data that can be used to recreate the content
		details.setTemplateDataExistsInd(false);
		// finansial transaction amount (if any)
		//details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\UploadCreateUpdateExample.java
-----------------------------------------------------
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import javax.xml.bind.JAXBException;
import junit.framework.Assert;
import org.junit.Test;
import com.poalim.matbea.service.duecmcustomer.*;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

public class UploadCreateUpdateExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	
	public static void main(String [] argv) throws Exception {
		(new UploadCreateUpdateExample()).testCreateUpdate();
	}
	/**
	 * Example for create, retrieve, update for customer documents
	 * 
	 * @throws InvocationException
	 * @throws ApplicationException
	 * @throws JAXBException
	 * @throws IOException
	 */
	@Test 
	public void testCreateUpdate() throws InvocationException, ApplicationException, JAXBException, IOException {
		// 0. generate legacy document ID - UUID is 32 chars 
		final String legacyDocId = UUID.randomUUID().toString();
		
		/* Short legacy document id is required for project_id = 1,2 
		 * (compatibility with the old Tofes Peula data type that limits
		 * legacyDocumentid to 23 characters) 
		 * 
		 final String legacyDocId = "L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		*/
		
		System.out.println("Legacy document is '"+legacyDocId+"'");
		
		ObjectFactory factory = new ObjectFactory();
		
		// security context to be used for all the operations
		SecurityContext safSC = this.makeUserSC(factory);
		
		// 1. Creation of initial object, note versionLabel that is returned
		testCreateWithFile(legacyDocId, safSC);
		
		// Now let's suppose that some time has passes since we'd created the document and  
		// we're an another process that does not have the original data available. 
		// So before doing an update we need to fetch the existing metadata,
		// modify it according to our requirements, upload new  contents and create
		// new version of document
		//
		// 2. Fetch existing document
		
		DocData retrievedDocData = retrieveDocumentMetadataByLegacyId(legacyDocId, 	 safSC);
		
		
		// 3. Update metadata and contents
		testUpdateDocumentVersion(retrievedDocData, safSC);
		
		
	}
	
	// Default version label for current version
	public static final String CURRENT_VERSION_LABEL = "CURRENT";
	
	public  void testUpdateDocumentVersion(DocData docData,
			SecurityContext safSC) throws JAXBException, InvocationException, ApplicationException, IOException {
		DuEcmCustomerUpdateDocumentVersionByLegacyDocumentIdInvocation theInvocation = 
				new DuEcmCustomerUpdateDocumentVersionByLegacyDocumentIdInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		UpdateDocumentVersionByLegacyDocumentId_type theType = factory.createUpdateDocumentVersionByLegacyDocumentId_type();
		
		// Create update data
		DocDataForUpdate docDataForUpdate = factory.createDocDataForUpdate();
		// 
		// Document metadata is the same as retrieved, with some changes
		docDataForUpdate.setDocData(docData);
		// For example document date
		Calendar date = docData.getDocCustomerData().getDocDetails().getLegacyDocumentEntryDttm();
		date.add(Calendar.HOUR, 1);
		docData.getDocCustomerData().getDocDetails().setLegacyDocumentEntryDttm(date);
		// and transaction amount
		double amt = docData.getDocCustomerData().getDocDetails().getTransactionAmt();
		amt += 100;
		docData.getDocCustomerData().getDocDetails().setTransactionAmt(amt);
		
		// upload new content to NAS and set DocFile to point to it
		// 
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		File copyFile = copyResourceForUpload("HELLO2.pdf", this.getLocalUploadDir());
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		// legacy ID - used to locate document for update
		docDataForUpdate.setLegacyDocumentId(docData.getDocCustomerData().getDocDetails().getLegacyDocumentId());
			
		theType.setDocDataForUpdate(docDataForUpdate);
		theType.setSecurityContext(safSC);
		
		// Version label - we can specify version label to uniquely specify newly created document version. 
		// final String newVersionLabel = "FOO_VERSION";
		// If this is not required - need to provide default version label
		// and newly created version will get it's automatic numeric label incremented
		final String newVersionLabel = CURRENT_VERSION_LABEL;
		
		theType.setVersionLabel(newVersionLabel);
		
		// update invocation with created data
		theInvocation.setParameters(theType);
		
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		System.out.println("Invoking update...");
		DuEcmCustomerUpdateDocumentVersionByLegacyDocumentIdResult result = theInvocation.getResult();
		UpdateDocumentVersionByLegacyDocumentIdResponse_type response = result.getUpdateDocumentVersionByLegacyDocumentIdResponse();
		DocIdData idData = response.getDocIdData();
		System.out.println("updated document has dctm id: "+idData.getDctmDocumentId()+" version label is "+idData.getVersionLabel());

		if (!newVersionLabel.equals(CURRENT_VERSION_LABEL)) {
			// If we set custom version label, we expect to get same version label that we requested
			Assert.assertEquals(newVersionLabel, idData.getVersionLabel());
		} else {
			// when there is no custom version label,
			// we expect version number to be incremented automatically
			Assert.assertEquals( "1.1",idData.getVersionLabel());
		}
		
	}


	private DocData retrieveDocumentMetadataByLegacyId(String legacyDocId, 	SecurityContext safSC) throws JAXBException, InvocationException, ApplicationException   {
		DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation theInvocation = 
			new DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		RetrieveDocForLegacyDocumentId_type theType = factory.createRetrieveDocForLegacyDocumentId_type();
		theInvocation.setParameters(theType);
		
		// set Id
		theType.setLegacyDocumentId(legacyDocId);
		
		// specify if we want only content (FILE), 
		// attributes(META) or both (FULL)
		FetchTypeSet fetchTypeSet = factory.createFetchTypeSet();
		// here we want both metadata only
		fetchTypeSet.setMETAOrFILEOrFULL(factory.createFetchTypeSetMETAOrFILEOrFULL());
		//fetchTypeSet.getMETAOrFILEOrFULL().setFILE(factory.createFile());
		fetchTypeSet.getMETAOrFILEOrFULL().setMETA(factory.createMeta());
		theType.setFetchTypeSet(fetchTypeSet);
		
		// create default retrieval flags, that means only primary content and no events
		theType.setDocRetrievalFlags(factory.createDocRetrievalFlags());
		// this defines attributes and protocol for retrieveal of content
		// 
		// theType.getDocRetrievalFlags().setRetrieveProfile("HTTP");
		// theType.getDocRetrievalFlags().setRetrieveProfile("STREAM");

		
		// user and password 
		theType.setSecurityContext(safSC);
		
		// details of end-user, those are minimally required attributes
		
		theType.setExecutorDetails(createFullExecutorDetails(factory));
		
		// invoke of saf
		System.out.println("Invoking retrieve...");
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuEcmCustomerRetrieveDocForLegacyDocumentIdResult result = theInvocation.getResult();
		
		RetrieveDocForLegacyDocumentIdResponse_type response = result.getRetrieveDocForLegacyDocumentIdResponse();
		DocDataForRetrieve docDataForRetrieve = response.getDocDataForRetrieve();
		DocData docData = docDataForRetrieve.getDocData();
		Assert.assertNotNull(docData);
		if (null!= docData.getDocCustomerData() &&
				null!=docData.getDocCustomerData().getDocDetails()) {
			DocDetails details = docData.getDocCustomerData().getDocDetails();
			System.out.println("Some doocument attributes:");
			System.out.println(" document date:"+details.getLegacyDocumentEntryDttm().getTime());
			System.out.println(" document MAKAT:"+details.getDocumentFormId());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		
		return docData;
	}

	public void testCreateWithFile(String legacyDocId,	SecurityContext safSC) throws IOException, JAXBException, InvocationException, ApplicationException {

		ObjectFactory factory = new ObjectFactory();
				
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		docData.getDocCustomerData().getDocDetails().setLegacyDocumentId(legacyDocId);
		
		
		// Upload content to nas and set DocFile to point to it
		// 
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		File copyFile = copyResourceForUpload("HELLO.pdf", this.getLocalUploadDir());
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		// Invoke creation service
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" version label is "+idData.getVersionLabel());
			Assert.assertEquals("1.0", idData.getVersionLabel());
		}
		
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		System.out.println("Invoking create...");
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext context = factory.createSecurityContext();
		context.setUserName(DCTM_USER);
		context.setPassword(DCTM_PASSWORD);
		context.setRepositoryName(DCTM_REPO);
		return context;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}
	
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension = factory.createDocPropertyExtension();
		docPropertyExtension.setExtensionName("bnhp_paper_doc");
		List<PropertyKeyValue> propertyKeyValues = docPropertyExtension.getPropertyKeyValues();
		docPropertyExtension.getPropertyKeyValues();

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_box_nbr", "50"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_date",
				"2001-10-26T21:32:52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bank_archive_id", "51"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"bar_code", "52"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"box_batch_nbr", "53"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"box_doc_serial_nbr", "54"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"doc_location_code", "1"));
		propertyKeyValues
				.add(createPropertyKeyValue(factory,"document_page_cnt", "56"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"paper_destruction_dttm",
				"2001-10-26T21:32:52"));

		propertyKeyValues.add(createPropertyKeyValue(factory,"archive_film_nbr", "57"));
		propertyKeyValues.add(createPropertyKeyValue(factory,"film_frame_nbr", "58"));
		
		//docPropertyExtension.setPropertyKeyValues(propertyKeyValues);
		docPropertyExtensions.add(docPropertyExtension);
		return docPropertyExtensions;
	}
	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		// Not required by VERY recommended to set docSize 
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "Faxes";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		return "s:/Async_Service_QA/Faxes";
	}

	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}
	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);
		

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(3);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\src\UploadCreateUpdateMetadataExample.java
-----------------------------------------------------
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.UUID;

import javax.xml.bind.JAXBException;

import com.poalim.matbea.service.duecmcustomer.BankAccount;
import com.poalim.matbea.service.duecmcustomer.Custom;
import com.poalim.matbea.service.duecmcustomer.CustomerKey;
import com.poalim.matbea.service.duecmcustomer.DocCustomerData;
import com.poalim.matbea.service.duecmcustomer.DocData;
import com.poalim.matbea.service.duecmcustomer.DocDataForCreate;
import com.poalim.matbea.service.duecmcustomer.DocDataForRetrieve;
import com.poalim.matbea.service.duecmcustomer.DocDataForUpdate;
import com.poalim.matbea.service.duecmcustomer.DocDetails;
import com.poalim.matbea.service.duecmcustomer.DocFile;
import com.poalim.matbea.service.duecmcustomer.DocIdData;
import com.poalim.matbea.service.duecmcustomer.DocPropertyExtension;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerCreateDocumentsResult;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerRetrieveDocForLegacyDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerUpdateDocumentsByLegacyDocumentIdInvocation;
import com.poalim.matbea.service.duecmcustomer.DuEcmCustomerUpdateDocumentsByLegacyDocumentIdResult;
import com.poalim.matbea.service.duecmcustomer.ExecutorDetails;
import com.poalim.matbea.service.duecmcustomer.FetchTypeSet;
import com.poalim.matbea.service.duecmcustomer.Group;
import com.poalim.matbea.service.duecmcustomer.ObjectFactory;
import com.poalim.matbea.service.duecmcustomer.PensionFund;
import com.poalim.matbea.service.duecmcustomer.PropertyKeyValue;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.RetrieveDocForLegacyDocumentId_type;
import com.poalim.matbea.service.duecmcustomer.SecurityContext;
import com.poalim.matbea.service.duecmcustomer.UpdateDocumentsByLegacyDocumentIdResponse_type;
import com.poalim.matbea.service.duecmcustomer.UpdateDocumentsByLegacyDocumentId_type;
import com.poalim.saf.exception.ApplicationException;
import com.poalim.saf.exception.InvocationException;

import junit.framework.Assert;

public class UploadCreateUpdateMetadataExample {
	private final static String DCTM_USER = System.getProperty("dctm_user","uploadfaxuser");
	private final static String DCTM_PASSWORD= System.getProperty("dctm_password","CHANGEME");
	// currently ignored and overridden by server
	private final static String DCTM_REPO=System.getProperty("dctm_repo","banhap_qa1");

	public static void main(String [] argv) throws Exception {
		(new UploadCreateUpdateMetadataExample()).testCreateUpdate();
	}
	/**
	 * Example for create, retrieve, update for customer documents
	 * 
	 * @throws InvocationException
	 * @throws ApplicationException
	 * @throws JAXBException
	 * @throws IOException
	 */
	 
	public void testCreateUpdate() throws InvocationException, ApplicationException, JAXBException, IOException {
		// 0. generate legacy document ID - UUID is 32 chars 
		final String legacyDocId = UUID.randomUUID().toString();
		
		/* Short legacy document id is required for project_id = 1,2 
		 * (compatibility with the old Tofes Peula data type that limits
		 * legacyDocumentid to 23 characters) 
		 * 
		 final String legacyDocId = "L:"
						+ (java.util.UUID.randomUUID()
								.getLeastSignificantBits() & 0x7fffffffffffffffL));
		System.out.println("Legacy id is: '"+details.getLegacyDocumentId()+"'");
		*/
		
		System.out.println("Legacy document is '"+legacyDocId+"'");
		
		ObjectFactory factory = new ObjectFactory();
		
		// security context to be used for all the operations
		SecurityContext safSC = this.makeUserSC(factory);
		
		// 1. Creation of initial object, note versionLabel that is returned
		testCreateWithFile(legacyDocId, safSC);
		
		// Now let's suppose that some time has passes since we'd created the document and  
		// we're an another process that does not have the original data available. 
		// So before doing an update we need to fetch the existing metadata,
		// modify it according to our requirements, upload new  contents and create
		// new version of document
		//
		// 2. Fetch existing document
		
		DocData retrievedDocData = retrieveDocumentMetadataByLegacyId(legacyDocId, 	 safSC);
		
		
		// 3. Update metadata and contents
		testUpdateDocument(retrievedDocData, safSC);
		
		
	}
	
	public  void testUpdateDocument(DocData docData,
			SecurityContext safSC) throws JAXBException, InvocationException, ApplicationException, IOException {
		DuEcmCustomerUpdateDocumentsByLegacyDocumentIdInvocation theInvocation =
			new DuEcmCustomerUpdateDocumentsByLegacyDocumentIdInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		UpdateDocumentsByLegacyDocumentId_type theType = factory.createUpdateDocumentsByLegacyDocumentId_type();
		
		// Create update data
		DocDataForUpdate docDataForUpdate = factory.createDocDataForUpdate();
		// 
		// Document metadata is the same as retrieved, with some changes
		docDataForUpdate.setDocData(docData);
		// For example document date

		// set document complete
		docData.getDocCustomerData().getDocDetails().setDocCompletenessCode(0);

		// add bank account
		List<BankAccount> accounts =docData.getDocCustomerData().getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));


		// add extension data
		docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));

		
		// legacy ID - used to locate document for update
		docDataForUpdate.setLegacyDocumentId(docData.getDocCustomerData().getDocDetails().getLegacyDocumentId());
		
		theType.getDocDataForUpdateList().add(docDataForUpdate);
		theType.setSecurityContext(safSC);
		
		
		// update invocation with created data
		theInvocation.setParameters(theType);
		
		// invoke of saf
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		System.out.println("Invoking update...");
		DuEcmCustomerUpdateDocumentsByLegacyDocumentIdResult result = theInvocation.getResult();
		UpdateDocumentsByLegacyDocumentIdResponse_type response = result.getUpdateDocumentsByLegacyDocumentIdResponse();
		List <DocIdData>idDataList = response.getDocIdDataList();
		for (DocIdData docIddata: idDataList) {
			System.out.println("updated document has dctm id: "+ docIddata.getDctmDocumentId());
		}


		
	}


	private DocData retrieveDocumentMetadataByLegacyId(String legacyDocId, 	SecurityContext safSC) throws JAXBException, InvocationException, ApplicationException   {
		DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation theInvocation = 
			new DuEcmCustomerRetrieveDocForLegacyDocumentIdInvocation();
		
		ObjectFactory factory = theInvocation.getObjectFactory();
		RetrieveDocForLegacyDocumentId_type theType = factory.createRetrieveDocForLegacyDocumentId_type();
		theInvocation.setParameters(theType);
		
		// set Id
		theType.setLegacyDocumentId(legacyDocId);
		
		// specify if we want only content (FILE), 
		// attributes(META) or both (FULL)
		FetchTypeSet fetchTypeSet = factory.createFetchTypeSet();
		// here we want both metadata only
		fetchTypeSet.setMETAOrFILEOrFULL(factory.createFetchTypeSetMETAOrFILEOrFULL());
		//fetchTypeSet.getMETAOrFILEOrFULL().setFILE(factory.createFile());
		fetchTypeSet.getMETAOrFILEOrFULL().setMETA(factory.createMeta());
		theType.setFetchTypeSet(fetchTypeSet);
		
		// create default retrieval flags, that means only primary content and no events
		theType.setDocRetrievalFlags(factory.createDocRetrievalFlags());
		// this defines attributes and protocol for retrieveal of content
		// 
		// theType.getDocRetrievalFlags().setRetrieveProfile("HTTP");
		// theType.getDocRetrievalFlags().setRetrieveProfile("STREAM");

		
		// user and password 
		theType.setSecurityContext(safSC);
		
		// details of end-user, those are minimally required attributes
		
		theType.setExecutorDetails(createFullExecutorDetails(factory));
		
		// invoke of saf
		System.out.println("Invoking retrieve...");
		theInvocation.invoke();
		// if we got communication/auth/etc error or the document does not exists
		// we'll not get here because of exception 
		DuEcmCustomerRetrieveDocForLegacyDocumentIdResult result = theInvocation.getResult();
		
		RetrieveDocForLegacyDocumentIdResponse_type response = result.getRetrieveDocForLegacyDocumentIdResponse();
		DocDataForRetrieve docDataForRetrieve = response.getDocDataForRetrieve();
		DocData docData = docDataForRetrieve.getDocData();
		Assert.assertNotNull(docData);
		if (null!= docData.getDocCustomerData() &&
				null!=docData.getDocCustomerData().getDocDetails()) {
			DocDetails details = docData.getDocCustomerData().getDocDetails();
			System.out.println("Some doocument attributes:");
			System.out.println(" document date:"+details.getLegacyDocumentEntryDttm().getTime());
			System.out.println(" document MAKAT:"+details.getDocumentFormId());
		} else {
			System.out.println("Document retrieved w/o METADATA");			
		}
		
		return docData;
	}

	public void testCreateWithFile(String legacyDocId,	SecurityContext safSC) throws IOException, JAXBException, InvocationException, ApplicationException {

		ObjectFactory factory = new ObjectFactory();
				
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocCustomerData docCustomerData = this.createMinimalDocCustomerData(factory);
		docCustomerData.getDocDetails().setLegacyDocumentId(legacyDocId);
		DocData docData = factory.createDocData();
		docData.setDocCustomerData(docCustomerData);
		
		
		// Upload content to nas and set DocFile to point to it
		// 
		// copyFile:  local file HELLO.pdf is copied to temporary file on NAS  
		// There is no need to clear temporary file since it will be cleaned
		// authomatically by service after load (or load failure)
		File copyFile = copyResourceForUpload("HELLO.pdf", "c:/shai/work");//this.getLocalUploadDir());
		docData.setDocFile(createDocFile(factory,copyFile.getName(), "pdf", copyFile.length()));
		
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		
		// Invoke creation service
		List<DocIdData> safResults = createDocuments(docDataForCreateList, safSC);
		for (DocIdData idData : safResults) {
			System.out.println("created document with dctm id: "+idData.getDctmDocumentId()+" version label is "+idData.getVersionLabel());
			Assert.assertEquals("1.0", idData.getVersionLabel());
		}
		
	}
	
	public List<DocIdData> createDocuments(List<DocDataForCreate> docDataForCreateList, SecurityContext safSC) 
	throws JAXBException, IOException, InvocationException, ApplicationException {
		DuEcmCustomerCreateDocumentsInvocation theInvocation = 
			new DuEcmCustomerCreateDocumentsInvocation();
		ObjectFactory factory = theInvocation.getObjectFactory();
		
		com.poalim.matbea.service.duecmcustomer.CreateDocuments_type theType = theInvocation
		.getObjectFactory().createCreateDocuments_type();
		
		theType.setSecurityContext(safSC);
		
		theType.getDocDataForCreateList().addAll(docDataForCreateList);
	
		theType.setVersionLabel("");
		
		theInvocation.setParameters(theType);
		
		System.out.println("Invoking create...");
		theInvocation.invoke();
		DuEcmCustomerCreateDocumentsResult responce = theInvocation.getResult();
		List<DocIdData> safResults = responce.getCreateDocumentsResponse().getDocIdDataList();
		System.out.println("created "+safResults.size()+ " documents");
		return safResults;
	}
	
	
	public SecurityContext makeUserSC(ObjectFactory factory) throws JAXBException {
		SecurityContext safSc = factory.createSecurityContext();
		safSc.setUserName(DCTM_USER);
		safSc.setPassword(DCTM_PASSWORD);
		// ignored by server
		safSc.setRepositoryName(DCTM_REPO);
		return safSc;
	}
	
	public List<DocDataForCreate> createDocdata() throws IOException, JAXBException {
		ObjectFactory factory = new ObjectFactory();
		List<DocDataForCreate> docDataForCreateList = new ArrayList<DocDataForCreate>();
		DocData docData = createValidFullDocData(factory);
		DocDataForCreate docDataForCreate = factory.createDocDataForCreate();
		docDataForCreate.setDocData(docData);
		docDataForCreateList.add(docDataForCreate);
		return docDataForCreateList;
	}
	
	public static PropertyKeyValue createPropertyKeyValue(ObjectFactory factory, String key,
			String value) throws JAXBException {
		PropertyKeyValue propertyKeyValue = factory.createPropertyKeyValue();
		propertyKeyValue.setKey(key);
		propertyKeyValue.setValue(value);
		return propertyKeyValue;
	}

	// formats date in Zulu time, works with java 6
	private static SimpleDateFormat rfc3339fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
	static {
		rfc3339fmt.setTimeZone(TimeZone.getTimeZone("UTC"));
	}
	 
	public static List<DocPropertyExtension> createFullDocPropertyExtensions(ObjectFactory factory) throws JAXBException {
		List<DocPropertyExtension> docPropertyExtensions = new ArrayList<DocPropertyExtension>();
		DocPropertyExtension docPropertyExtension2 = factory.createDocPropertyExtension();
		docPropertyExtension2.setExtensionName("bnhp_division_business");
		docPropertyExtensions.add(docPropertyExtension2);
		List<PropertyKeyValue> propertyKeyValues2 = docPropertyExtension2.getPropertyKeyValues();
		propertyKeyValues2.add(createPropertyKeyValue(factory,"original_document" ,"1333213"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"serial_nbr_loan_guarantee" ,"123444"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_confidence" ,"1122"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_deal" ,"222"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"number_branch_confidence" ,"122"));
		// date according to RFC-3339, here is sample in UTC timezone, like "2029-10-26T21:32:52Z"
		Date date = new Date(System.currentTimeMillis() + 1000L*3600L*24L*365L);
		String dateStr = rfc3339fmt.format(date);
		propertyKeyValues2.add(createPropertyKeyValue(factory,"expiration_date" , dateStr));
		//System.out.println(dateStr);
		//propertyKeyValues2.add(createPropertyKeyValue(factory,"expiration_date" ,"2029-10-26T21:32:52Z"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"credit_type" ,"12"));
		// double
		propertyKeyValues2.add(createPropertyKeyValue(factory,"deposit_number" ,"12345678901234"));
		// repeating integer
		propertyKeyValues2.add(createPropertyKeyValue(factory,"car_number" ,"45678122"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"car_number" ,"12345678"));
		
		propertyKeyValues2.add(createPropertyKeyValue(factory,"gush_number" ,"20334"));
		// double
		propertyKeyValues2.add(createPropertyKeyValue(factory,"helka_number" ,"2.718281828"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"tathelka_number" ,"2222"));
		propertyKeyValues2.add(createPropertyKeyValue(factory,"property_type","3333"));
		
		return docPropertyExtensions;
	}

	public DocData createValidFullDocData(ObjectFactory factory) throws IOException, JAXBException {
		DocData docData = factory.createDocData();
		docData.getDocPropertyExtensions().clear();
		//docData.getDocPropertyExtensions().addAll(createFullDocPropertyExtensions(factory));
		docData.setDocCustomerData(createFullDocCustomerData(factory));
		return docData;
	}
	
	
	
	/**
	 * 
	 * Create doc file for NAS file upload
	 * 
	 * @param factory
	 * @param fileName
	 * @param format
	 * @return
	 * @throws JAXBException
	 */
	public  DocFile createDocFile(ObjectFactory factory, String fileName, String format, Long size) throws JAXBException {
		DocFile file = factory.createDocFile();
		file.setDocFormat(format);
		file.setDocURL("file:///"+getUploadDir()+"/"+fileName);
		// Not required by VERY recommended to set docSize 
		file.setDocSize(size);
		return file;
	}
	
	protected File copyResourceForUpload(String srcFilePath, String uploadDirPath) throws IOException {
		Assert.assertNotNull(uploadDirPath);
		File uploadDir = new File(uploadDirPath); 
		
		File srcFile = new File(srcFilePath);
		
		FileChannel src = null;
		FileChannel dst = null;
		File outFile = File.createTempFile("test_upload_", ".pdf",uploadDir);
		try {
			
			src = new FileInputStream(srcFile).getChannel();
			dst = new FileOutputStream(outFile).getChannel();
			
			System.out.println("Copying "+srcFilePath+" to "+outFile.getAbsolutePath());
			dst.transferFrom(src,0, src.size());
		} finally {
			if (null!=src) {
				src.close();
			}
			if (null!=dst) {
				dst.close();
			}
		}
		//return outFile.getAbsolutePath().substring(uploadDir.getAbsolutePath().length()+1);
		return outFile;
	}
	
	/**
	 * relative path to upload directory as seen from server system,
	 * that is name of clent subdirectory which is located inside of
	 * common upload directory on nas
	 * 
	 * @return
	 */
	public String getUploadDir() {
		return "Faxes";
	}
	
	/**
	 * path to upload directory as seen from client system 
	 * 
	 * @return
	 */
	public String getLocalUploadDir() {
		return "/mnt/network/psmnas01.bnhpgroup.com/MesilaDocsProcessing/Async_Service_QA/Faxes";
		//return "s:/Async_Service_QA/Faxes";
	}

	/**
	 * Create DocFile for ESB based upload
	 * 
	 * @param factory
	 * @param fullResName
	 * @param format
	 * @return
	 * @throws IOException
	 * @throws JAXBException
	 */
	public  DocFile createInBandDocFile(ObjectFactory factory, String fullResName, String format)
	throws IOException, JAXBException {
		InputStream fs = this.getClass().getResourceAsStream(
				fullResName);
		if (fs == null) {
			throw new IOException("File - " + fullResName
					+ " Could not be read");
		}
		DocFile file = factory.createDocFile();
		byte[] buffer = new byte[2048];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		int num;
		do {
			num = fs.read(buffer);
			if (num > 0) {
				outputStream.write(buffer, 0, num);
			} else {
				break;
			}
		} while (true);

		file.setDocFormat(format);
		byte ar[] = outputStream.toByteArray();
		file.setDocStream(ar);

		return file;
	}
	
	public static BankAccount createFullBankAccount(ObjectFactory factory) throws JAXBException {
		BankAccount bankAccount2 = factory.createBankAccount();
		bankAccount2.setAccountNbr(591113);
		bankAccount2.setAccountBankId(12);
		bankAccount2.setBranchId(42);
		bankAccount2.setDivisionId(-1);
		bankAccount2.setSpecialHandlingCode(true);
		return bankAccount2;
	}
	
	public static CustomerKey createFullCustomer(ObjectFactory factory) throws JAXBException {
		CustomerKey customerKey = factory.createCustomerKey();
		customerKey.setCompleteCustomerIdCode("completeCode");
		customerKey.setCustomerFullName("fullName");
		customerKey.setCustomerId(32L);
		customerKey.setCustomerSerialNbr(33);
		customerKey.setOccasionalCustomerInd(true);
		customerKey.setCustomerIdDocTypeCode(1);
		return customerKey;
	}
	
	public static ExecutorDetails createFullExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setBankolId(1);
		executorDetails.setEmpIdDocumentTypeCode(1);
		executorDetails.setExecutingBankId(12);
		executorDetails.setExecutingBranchId(1);
		executorDetails.setExecutingEmpIdCode("1234567890");
		executorDetails.setExecutingEmpFullName("Pakid Ploni");
		executorDetails.setIpAddress("127.0.0.1");
		executorDetails.setTerminalChannelId(1);
		return executorDetails;
	}

	public static ExecutorDetails createMinimalExecutorDetails(ObjectFactory factory) throws JAXBException {
		ExecutorDetails executorDetails = factory.createExecutorDetails();
		executorDetails.setExecutingEmpIdCode("some code");
		executorDetails.setIpAddress("ip");
		return executorDetails;
	}
	
	public static DocCustomerData createFullDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createFullExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		customerData.setCustom(createCustom(factory));
		customerData.setGroup(createGroup(factory));
		customerData.setPensionFund(createPensionFund(factory));
		List<BankAccount> accounts =customerData.getBankAccounts();
		accounts.clear();
		accounts.add(createFullBankAccount(factory));
		accounts.add(createFullBankAccount(factory));
		
		// INFO - why are the accounts not added ? why not use the existing
		// method ?
		customerData.getCustomerKeys().clear();
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		customerData.getCustomerKeys().add(createFullCustomer(factory));
		return customerData;
	}

	public static DocCustomerData createMinimalDocCustomerData(ObjectFactory factory) throws JAXBException {
		DocCustomerData customerData = factory.createDocCustomerData();
		customerData.setExecutorDetails(createMinimalExecutorDetails(factory));
		customerData.setDocDetails(createFullDocDetails(factory));
		// incomplete
		customerData.getDocDetails().setDocCompletenessCode(1);
		
		return customerData;
	}

	
	public static DocDetails createFullDocDetails(ObjectFactory factory) throws JAXBException {
		DocDetails details = factory.createDocDetails();
		// details.setBusinessAreaCode(10); This is not part of documentum data
		// structure
		details.setBusinessProcessId(11);
		// this one should match FormId, legacy code checks that
		details.setBusinessAreaCode(190);
		// this one should match FormId, legacy code checks that
		details.setBusinessSubAreaCode(90);
		details.setChannelId(13);
		details.setCurrencyCode(1);
		

		List<String> concEventIds = details.getConcatenatedEventIds();
		concEventIds.clear();
		concEventIds.add("event1");
		concEventIds.add("event2");
		
		details.setDocCompletenessCode(0);
		details.setDocumentEditionNbr(14);
		details.setDocumentFormId("5555510052");

		List documentGroupIds = details.getDocumentGroupIds();
		documentGroupIds.clear();
		documentGroupIds.add("group1");
		documentGroupIds.add("group2");
		
		details.setLegacyDocumentEntryDttm(createDateNoMili(factory));
		details.setObjectName("someObjectName");
		details.setOngoingOrHistoryCode(1);
		details.setProjectId(3);
		details.setScanStatusCode(1);
		details.setSystemCode(0);
		details.setTemplateDataExistsInd(true);
		details.setTransactionAmt(20.7);
		return details;
	}
	
	
	public static Calendar createDateNoMili(ObjectFactory factory) throws JAXBException {
		String str = (String.valueOf((new Date()).getTime())).substring(0, 10)
				+ "000";
		Date date = new Date(Long.valueOf(str));
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}
	
	public static Group createGroup(ObjectFactory factory) throws JAXBException {
		Group group = factory.createGroup();
		group.setAccountClusterId(70L);
		return group;
	}

	public static Custom createCustom(ObjectFactory factory) throws JAXBException {
		Custom custom = factory.createCustom();
		custom.setCustomText("customText");
		return custom;
	}
	

	public static PensionFund createPensionFund(ObjectFactory factory) throws JAXBException {
		PensionFund funds = factory.createPensionFund();
		funds.setPensionFundNbr(60);
		funds.setPlanholderNumber(61);
		return funds;
	}
}



file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\target\classes\META-INF\maven\com.poalim.documentum\duecmcustomer-saf-examples\pom.properties
-----------------------------------------------------
#Generated by Maven Integration for Eclipse
#Thu May 20 19:17:45 IDT 2021
m2e.projectLocation=C\:\\Users\\AP068\\git\\documentum\\duecmcustomerexamples
m2e.projectName=duecmcustomer-saf-examples
groupId=com.poalim.documentum
artifactId=duecmcustomer-saf-examples
version=1.0-SNAPSHOT


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\target\classes\META-INF\maven\com.poalim.documentum\duecmcustomer-saf-examples\pom.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--parent> <groupId>com.poalim.documentum</groupId> <artifactId>parent</artifactId> 
		<version>1.0-SNAPSHOT</version> </parent -->

	<artifactId>duecmcustomer-saf-examples</artifactId>
	<groupId>com.poalim.documentum</groupId>
	<packaging>jar</packaging>
	<name>duecmcustomer-saf-examples</name>
	<description>DocumentumTesterHTTP</description>
	<version>1.0-SNAPSHOT</version>
	<dependencies>

		<!--dependency> <groupId>com.poalim.dependencies</groupId> <artifactId>documentum-71-deps</artifactId> 
			<type>pom</type> </dependency -->

		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-manage-general-doc</artifactId>
			<version>1.12.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-rtrv-general-doc</artifactId>
			<version>1.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-ecm-customer</artifactId>
			<!-- version>1.143.0</version> BEFORE CANCELING OF MANDATORY FIELDS IN 
				DocDetails -->
			<version>1.105.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-rtrv-pension-fund-doc</artifactId>
			<version>LATEST</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>to-cyberark-transfer</artifactId>
			<version>1.47.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>to-cyberark-transfer</artifactId>
			<version>1.47.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.saf.services</groupId>
			<artifactId>du-security-token-producer</artifactId>
			<version>1.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.poalim.ht</groupId>
			<artifactId>saf-core</artifactId>
			<version>1.28.3.14</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
		</dependency>
	</dependencies>
	<build>
		<sourceDirectory>src</sourceDirectory>
		<resources>
			<resource>
				<directory>resources/</directory>
			</resource>
		</resources>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<distributionManagement>
		<repository>
			<id>artifactory</id>
			<name>documentum-test</name>
			<url>https://repo.devops.poalim.bank/artifactory/s-28008-local</url>
		</repository>
	</distributionManagement>

	  <scm>
			<developerConnection>scm:git:ssh://git@gitlab.devops.poalim.bank:31007/m28008doc/duecmcustomerexamples.git</developerConnection>
			<tag>explang-0.1</tag>
	  </scm>


</project>


file Read:C:\Users\AP068\git\documentum\duecmcustomerexamples\target\maven-archiver\pom.properties
-----------------------------------------------------
#Generated by Maven
#Thu Apr 08 09:56:07 IDT 2021
version=1.0-SNAPSHOT
groupId=com.poalim.documentum
artifactId=duecmcustomer-saf-examples
total files:66
