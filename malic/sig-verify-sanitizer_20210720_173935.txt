

file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\config
-----------------------------------------------------
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://git.devops.poalim.bank/scm/sigversan/sig-verify-sanitizer.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\applypatch-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\commit-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\fsmonitor-watchman.sample
-----------------------------------------------------
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 1) and a time in nanoseconds
# formatted as a string and outputs to stdout all files that have been
# modified since the given time. Paths must be relative to the root of
# the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $time) = @ARGV;

# Check the hook interface version

if ($version == 1) {
	# convert nanoseconds to seconds
	$time = int $time / 1000000000;
} else {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree;
if ($^O =~ 'msys' || $^O =~ 'cygwin') {
	$git_work_tree = Win32::GetCwd();
	$git_work_tree =~ tr/\\/\//;
} else {
	require Cwd;
	$git_work_tree = Cwd::cwd();
}

my $retry = 1;

launch_watchman();

sub launch_watchman {

	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	    or die "open2() failed: $!\n" .
	    "Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $time but were not transient (ie created after
	# $time but no longer exist).
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	#
	# The category of transient files that we want to ignore will have a
	# creation clock (cclock) newer than $time_t value and will also not
	# currently exist.

	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $time,
			"fields": ["name"],
			"expression": ["not", ["allof", ["since", $time, "cclock"], ["not", "exists"]]]
		}]
	END

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	die "Watchman: command returned no output.\n" .
	    "Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	    "Falling back to scanning...\n" unless $response =~ /^\{/;

	my $json_pkg;
	eval {
		require JSON::XS;
		$json_pkg = "JSON::XS";
		1;
	} or do {
		require JSON::PP;
		$json_pkg = "JSON::PP";
	};

	my $o = $json_pkg->new->utf8->decode($response);

	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
		$retry--;
		qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		print "/\0";
		eval { launch_watchman() };
		exit 0;
	}

	die "Watchman: $o->{error}.\n" .
	    "Falling back to scanning...\n" if $o->{error};

	binmode STDOUT, ":utf8";
	local $, = "\0";
	print @{$o->{files}};
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\post-update.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\pre-applypatch.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\pre-commit.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\pre-push.sample
-----------------------------------------------------
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\pre-rebase.sample
-----------------------------------------------------
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\pre-receive.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\prepare-commit-msg.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.git\hooks\update.sample
-----------------------------------------------------
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.gitattributes
-----------------------------------------------------
# Auto detect text files and perform LF normalization
# http://davidlaing.com/2012/09/19/customise-your-gitattributes-to-become-a-git-ninja/
* text=auto

# The above will handle all files NOT found below
# These files are text and should be normalized (Convert crlf => lf)

*.bat           text eol=crlf
*.coffee        text
*.css           text
*.cql           text
*.df            text
*.ejs           text
*.html          text
*.java          text
*.js            text
*.json          text
*.less          text
*.properties    text
*.sass          text
*.scss          text
*.sh            text eol=lf
*.sql           text
*.txt           text
*.ts            text
*.xml           text
*.yaml          text
*.yml           text

# Documents
*.doc           diff=astextplain
*.DOC           diff=astextplain
*.docx          diff=astextplain
*.DOCX          diff=astextplain
*.dot           diff=astextplain
*.DOT           diff=astextplain
*.pdf           diff=astextplain
*.PDF           diff=astextplain
*.rtf           diff=astextplain
*.RTF           diff=astextplain
*.markdown      text
*.md            text
*.adoc          text
*.textile       text
*.mustache      text
*.csv           text
*.tab           text
*.tsv           text
*.txt           text
AUTHORS         text
CHANGELOG       text
CHANGES         text
CONTRIBUTING    text
COPYING         text
copyright       text
*COPYRIGHT*     text
INSTALL         text
license         text
LICENSE         text
NEWS            text
readme          text
*README*        text
TODO            text

# Graphics
*.png           binary
*.jpg           binary
*.jpeg          binary
*.gif           binary
*.tif           binary
*.tiff          binary
*.ico           binary
# SVG treated as an asset (binary) by default. If you want to treat it as text,
# comment-out the following line and uncomment the line after.
*.svg           binary
#*.svg          text
*.eps           binary

# These files are binary and should be left untouched
# (binary is a macro for -text -diff)
*.class         binary
*.jar           binary
*.war           binary

## LINTERS
.csslintrc      text
.eslintrc       text
.jscsrc         text
.jshintrc       text
.jshintignore   text
.stylelintrc    text

## CONFIGS
*.conf          text
*.config        text
.editorconfig   text
.gitattributes  text
.gitconfig      text
.gitignore      text
.htaccess       text
*.npmignore     text

## HEROKU
Procfile        text
.slugignore     text

## AUDIO
*.kar           binary
*.m4a           binary
*.mid           binary
*.midi          binary
*.mp3           binary
*.ogg           binary
*.ra            binary

## VIDEO
*.3gpp          binary
*.3gp           binary
*.as            binary
*.asf           binary
*.asx           binary
*.fla           binary
*.flv           binary
*.m4v           binary
*.mng           binary
*.mov           binary
*.mp4           binary
*.mpeg          binary
*.mpg           binary
*.swc           binary
*.swf           binary
*.webm          binary

## ARCHIVES
*.7z            binary
*.gz            binary
*.rar           binary
*.tar           binary
*.zip           binary

## FONTS
*.ttf           binary
*.eot           binary
*.otf           binary
*.woff          binary
*.woff2         binary


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.gitignore
-----------------------------------------------------
######################
# Eclipse
######################
*.pydevproject
.project
.metadata
tmp/
tmp/**/*
*.tmp
*.bak
*.swp
*~.nib
local.properties
.classpath
.settings/
.loadpath
.factorypath
/src/main/resources/rebel.xml

# External tool builders
.externalToolBuilders/**

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# PDT-specific
.buildpath

######################
# Intellij
######################
.idea/
*.iml
*.iws
*.ipr
*.ids
*.orig
classes/
out/

######################
# Visual Studio Code
######################
.vscode/

######################
# Maven
######################
/log/
/target/

######################
# Gradle
######################
.gradle/
/build/

######################
# Package Files
######################
*.jar
*.war
*.ear
*.db

######################
# Windows
######################
# Windows image file caches
Thumbs.db

# Folder config file
Desktop.ini

######################
# Mac OSX
######################
.DS_Store
.svn

# Thumbnails
._*

# Files that might appear on external disk
.Spotlight-V100
.Trashes

######################
# Directories
######################
/bin/
/deploy/

######################
# Logs
######################
*.log*

######################
# Others
######################
*.class
*.*~
*~
.merge_file*

######################
# Gradle Wrapper
######################
!gradle/wrapper/gradle-wrapper.jar

######################
# Maven Wrapper
######################
!.mvn/wrapper/maven-wrapper.jar


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\.gitignore
-----------------------------------------------------
# Default ignored files
/shelf/
/workspace.xml


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\compiler.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="sig-verify-sanitizer" />
      </profile>
    </annotationProcessing>
    <bytecodeTargetLevel>
      <module name="sig-verify-sanitizer" target="11" />
    </bytecodeTargetLevel>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="sig-verify-sanitizer" options="-parameters" />
    </option>
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\encodings.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\jarRepositories.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="poalim_core" />
      <option name="name" value="poalim-core" />
      <option name="url" value="https://repo.devops.poalim.bank:443/artifactory/poalim-core" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="libs-release" />
      <option name="url" value="https://repo.devops.poalim.bank:443/artifactory/s-28008-repo" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="snapshots" />
      <option name="name" value="libs-snapshot" />
      <option name="url" value="https://repo.devops.poalim.bank:443/artifactory/s-28008-repo" />
    </remote-repository>
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_classmate_1_5_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml:classmate:1.5.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/classmate/1.5.1/classmate-1.5.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/classmate/1.5.1/classmate-1.5.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_core_jackson_annotations_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.core:jackson-annotations:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-annotations/2.11.3/jackson-annotations-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-annotations/2.11.3/jackson-annotations-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-annotations/2.11.3/jackson-annotations-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_core_jackson_core_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.core:jackson-core:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-core/2.11.3/jackson-core-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-core/2.11.3/jackson-core-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-core/2.11.3/jackson-core-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_core_jackson_databind_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.core:jackson-databind:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-databind/2.11.3/jackson-databind-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-databind/2.11.3/jackson-databind-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/core/jackson-databind/2.11.3/jackson-databind-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_xml_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.11.3/jackson-dataformat-xml-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.11.3/jackson-dataformat-xml-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.11.3/jackson-dataformat-xml-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.11.3/jackson-dataformat-yaml-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.11.3/jackson-dataformat-yaml-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.11.3/jackson-dataformat-yaml-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.11.3/jackson-datatype-jdk8-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.11.3/jackson-datatype-jdk8-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.11.3/jackson-datatype-jdk8-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.11.3/jackson-datatype-jsr310-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.11.3/jackson-datatype-jsr310-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.11.3/jackson-datatype-jsr310-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_module_jackson_module_jaxb_annotations_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.11.3/jackson-module-jaxb-annotations-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.11.3/jackson-module-jaxb-annotations-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.11.3/jackson-module-jaxb-annotations-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_11_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.11.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-parameter-names/2.11.3/jackson-module-parameter-names-2.11.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-parameter-names/2.11.3/jackson-module-parameter-names-2.11.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/jackson/module/jackson-module-parameter-names/2.11.3/jackson-module-parameter-names-2.11.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_fasterxml_woodstox_woodstox_core_6_2_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.fasterxml.woodstox:woodstox-core:6.2.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/woodstox/woodstox-core/6.2.1/woodstox-core-6.2.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/woodstox/woodstox-core/6.2.1/woodstox-core-6.2.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/fasterxml/woodstox/woodstox-core/6.2.1/woodstox-core-6.2.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_google_code_findbugs_jsr305_3_0_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.google.code.findbugs:jsr305:3.0.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_jayway_jsonpath_json_path_2_4_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.jayway.jsonpath:json-path:2.4.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/jayway/jsonpath/json-path/2.4.0/json-path-2.4.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/jayway/jsonpath/json-path/2.4.0/json-path-2.4.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/jayway/jsonpath/json-path/2.4.0/json-path-2.4.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_poalim_msa_error_handling_1_2_0_RELEASE.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.poalim.msa:error-handling:1.2.0-RELEASE">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/poalim/msa/error-handling/1.2.0-RELEASE/error-handling-1.2.0-RELEASE.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/poalim/msa/error-handling/1.2.0-RELEASE/error-handling-1.2.0-RELEASE-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/poalim/msa/error-handling/1.2.0-RELEASE/error-handling-1.2.0-RELEASE-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_github_classgraph_classgraph_4_8_69.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.github.classgraph:classgraph:4.8.69">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/github/classgraph/classgraph/4.8.69/classgraph-4.8.69.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/github/classgraph/classgraph/4.8.69/classgraph-4.8.69-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/github/classgraph/classgraph/4.8.69/classgraph-4.8.69-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_micrometer_micrometer_core_1_6_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.micrometer:micrometer-core:1.6.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-core/1.6.2/micrometer-core-1.6.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-core/1.6.2/micrometer-core-1.6.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-core/1.6.2/micrometer-core-1.6.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_micrometer_micrometer_registry_prometheus_1_6_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.micrometer:micrometer-registry-prometheus:1.6.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-registry-prometheus/1.6.2/micrometer-registry-prometheus-1.6.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-registry-prometheus/1.6.2/micrometer-registry-prometheus-1.6.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/micrometer/micrometer-registry-prometheus/1.6.2/micrometer-registry-prometheus-1.6.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_prometheus_simpleclient_0_9_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.prometheus:simpleclient:0.9.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient/0.9.0/simpleclient-0.9.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient/0.9.0/simpleclient-0.9.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient/0.9.0/simpleclient-0.9.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_prometheus_simpleclient_common_0_9_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.prometheus:simpleclient_common:0.9.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient_common/0.9.0/simpleclient_common-0.9.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient_common/0.9.0/simpleclient_common-0.9.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/prometheus/simpleclient_common/0.9.0/simpleclient_common-0.9.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_swagger_core_v3_swagger_annotations_2_1_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.swagger.core.v3:swagger-annotations:2.1.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-annotations/2.1.6/swagger-annotations-2.1.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-annotations/2.1.6/swagger-annotations-2.1.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-annotations/2.1.6/swagger-annotations-2.1.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_swagger_core_v3_swagger_core_2_1_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.swagger.core.v3:swagger-core:2.1.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-core/2.1.6/swagger-core-2.1.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-core/2.1.6/swagger-core-2.1.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-core/2.1.6/swagger-core-2.1.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_swagger_core_v3_swagger_integration_2_1_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.swagger.core.v3:swagger-integration:2.1.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-integration/2.1.6/swagger-integration-2.1.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-integration/2.1.6/swagger-integration-2.1.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-integration/2.1.6/swagger-integration-2.1.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_swagger_core_v3_swagger_models_2_1_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.swagger.core.v3:swagger-models:2.1.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-models/2.1.6/swagger-models-2.1.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-models/2.1.6/swagger-models-2.1.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/core/v3/swagger-models/2.1.6/swagger-models-2.1.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_swagger_swagger_annotations_1_5_10.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.swagger:swagger-annotations:1.5.10">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/swagger-annotations/1.5.10/swagger-annotations-1.5.10.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/swagger-annotations/1.5.10/swagger-annotations-1.5.10-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/swagger/swagger-annotations/1.5.10/swagger-annotations-1.5.10-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_aws_brave_propagation_aws_0_21_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.aws:brave-propagation-aws:0.21.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/aws/brave-propagation-aws/0.21.3/brave-propagation-aws-0.21.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/aws/brave-propagation-aws/0.21.3/brave-propagation-aws-0.21.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/aws/brave-propagation-aws/0.21.3/brave-propagation-aws-0.21.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave/5.13.1/brave-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave/5.13.1/brave-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave/5.13.1/brave-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_context_slf4j_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-context-slf4j:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-context-slf4j/5.13.1/brave-context-slf4j-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-context-slf4j/5.13.1/brave-context-slf4j-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-context-slf4j/5.13.1/brave-context-slf4j-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_httpasyncclient_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-httpasyncclient:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpasyncclient/5.13.1/brave-instrumentation-httpasyncclient-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpasyncclient/5.13.1/brave-instrumentation-httpasyncclient-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpasyncclient/5.13.1/brave-instrumentation-httpasyncclient-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_httpclient_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-httpclient:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpclient/5.13.1/brave-instrumentation-httpclient-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpclient/5.13.1/brave-instrumentation-httpclient-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-httpclient/5.13.1/brave-instrumentation-httpclient-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_http_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-http:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-http/5.13.1/brave-instrumentation-http-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-http/5.13.1/brave-instrumentation-http-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-http/5.13.1/brave-instrumentation-http-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_jms_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-jms:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-jms/5.13.1/brave-instrumentation-jms-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-jms/5.13.1/brave-instrumentation-jms-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-jms/5.13.1/brave-instrumentation-jms-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_kafka_clients_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-kafka-clients:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-clients/5.13.1/brave-instrumentation-kafka-clients-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-clients/5.13.1/brave-instrumentation-kafka-clients-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-clients/5.13.1/brave-instrumentation-kafka-clients-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_kafka_streams_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-kafka-streams:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-streams/5.13.1/brave-instrumentation-kafka-streams-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-streams/5.13.1/brave-instrumentation-kafka-streams-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-kafka-streams/5.13.1/brave-instrumentation-kafka-streams-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_messaging_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-messaging:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-messaging/5.13.1/brave-instrumentation-messaging-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-messaging/5.13.1/brave-instrumentation-messaging-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-messaging/5.13.1/brave-instrumentation-messaging-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_mongodb_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-mongodb:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-mongodb/5.13.1/brave-instrumentation-mongodb-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-mongodb/5.13.1/brave-instrumentation-mongodb-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-mongodb/5.13.1/brave-instrumentation-mongodb-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_rpc_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-rpc:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-rpc/5.13.1/brave-instrumentation-rpc-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-rpc/5.13.1/brave-instrumentation-rpc-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-rpc/5.13.1/brave-instrumentation-rpc-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_brave_brave_instrumentation_spring_rabbit_5_13_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.brave:brave-instrumentation-spring-rabbit:5.13.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-spring-rabbit/5.13.1/brave-instrumentation-spring-rabbit-5.13.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-spring-rabbit/5.13.1/brave-instrumentation-spring-rabbit-5.13.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/brave/brave-instrumentation-spring-rabbit/5.13.1/brave-instrumentation-spring-rabbit-5.13.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_reporter2_zipkin_reporter_2_16_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.reporter2:zipkin-reporter:2.16.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter/2.16.0/zipkin-reporter-2.16.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter/2.16.0/zipkin-reporter-2.16.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter/2.16.0/zipkin-reporter-2.16.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_reporter2_zipkin_reporter_metrics_micrometer_2_16_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.reporter2:zipkin-reporter-metrics-micrometer:2.16.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter-metrics-micrometer/2.16.0/zipkin-reporter-metrics-micrometer-2.16.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter-metrics-micrometer/2.16.0/zipkin-reporter-metrics-micrometer-2.16.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/reporter2/zipkin-reporter-metrics-micrometer/2.16.0/zipkin-reporter-metrics-micrometer-2.16.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__io_zipkin_zipkin2_zipkin_2_22_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: io.zipkin.zipkin2:zipkin:2.22.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/zipkin2/zipkin/2.22.2/zipkin-2.22.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/zipkin2/zipkin/2.22.2/zipkin-2.22.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/io/zipkin/zipkin2/zipkin/2.22.2/zipkin-2.22.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__jakarta_activation_jakarta_activation_api_1_2_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: jakarta.activation:jakarta.activation-api:1.2.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__jakarta_annotation_jakarta_annotation_api_1_3_5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: jakarta.annotation:jakarta.annotation-api:1.3.5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__jakarta_validation_jakarta_validation_api_2_0_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: jakarta.validation:jakarta.validation-api:2.0.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/validation/jakarta.validation-api/2.0.2/jakarta.validation-api-2.0.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/validation/jakarta.validation-api/2.0.2/jakarta.validation-api-2.0.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/validation/jakarta.validation-api/2.0.2/jakarta.validation-api-2.0.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__junit_junit_4_13.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: junit:junit:4.13">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/junit/junit/4.13/junit-4.13.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/junit/junit/4.13/junit-4.13-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/junit/junit/4.13/junit-4.13-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__net_bytebuddy_byte_buddy_1_10_18.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: net.bytebuddy:byte-buddy:1.10.18">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy/1.10.18/byte-buddy-1.10.18.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy/1.10.18/byte-buddy-1.10.18-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy/1.10.18/byte-buddy-1.10.18-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__net_bytebuddy_byte_buddy_agent_1_10_18.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: net.bytebuddy:byte-buddy-agent:1.10.18">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy-agent/1.10.18/byte-buddy-agent-1.10.18.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy-agent/1.10.18/byte-buddy-agent-1.10.18-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/bytebuddy/byte-buddy-agent/1.10.18/byte-buddy-agent-1.10.18-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__net_minidev_accessors_smart_1_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: net.minidev:accessors-smart:1.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/accessors-smart/1.2/accessors-smart-1.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/accessors-smart/1.2/accessors-smart-1.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/accessors-smart/1.2/accessors-smart-1.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__net_minidev_json_smart_2_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: net.minidev:json-smart:2.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/json-smart/2.3/json-smart-2.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/json-smart/2.3/json-smart-2.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/net/minidev/json-smart/2.3/json-smart-2.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apache_commons_commons_lang3_3_11.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apache.commons:commons-lang3:3.11">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apache_logging_log4j_log4j_api_2_13_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apache.logging.log4j:log4j-api:2.13.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-api/2.13.3/log4j-api-2.13.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-api/2.13.3/log4j-api-2.13.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-api/2.13.3/log4j-api-2.13.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apache_logging_log4j_log4j_to_slf4j_2_13_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apache.logging.log4j:log4j-to-slf4j:2.13.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-to-slf4j/2.13.3/log4j-to-slf4j-2.13.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-to-slf4j/2.13.3/log4j-to-slf4j-2.13.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/logging/log4j/log4j-to-slf4j/2.13.3/log4j-to-slf4j-2.13.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_41.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.41">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-core/9.0.41/tomcat-embed-core-9.0.41.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-core/9.0.41/tomcat-embed-core-9.0.41-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-core/9.0.41/tomcat-embed-core-9.0.41-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_41.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.41">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.41/tomcat-embed-websocket-9.0.41.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.41/tomcat-embed-websocket-9.0.41-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.41/tomcat-embed-websocket-9.0.41-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_apiguardian_apiguardian_api_1_1_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.apiguardian:apiguardian-api:1.1.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_aspectj_aspectjrt_1_9_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.aspectj:aspectjrt:1.9.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjrt/1.9.6/aspectjrt-1.9.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjrt/1.9.6/aspectjrt-1.9.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjrt/1.9.6/aspectjrt-1.9.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_aspectj_aspectjweaver_1_9_6.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.aspectj:aspectjweaver:1.9.6">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjweaver/1.9.6/aspectjweaver-1.9.6.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjweaver/1.9.6/aspectjweaver-1.9.6-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/aspectj/aspectjweaver/1.9.6/aspectjweaver-1.9.6-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_assertj_assertj_core_3_18_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.assertj:assertj-core:3.18.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/assertj/assertj-core/3.18.1/assertj-core-3.18.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/assertj/assertj-core/3.18.1/assertj-core-3.18.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/assertj/assertj-core/3.18.1/assertj-core-3.18.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_bouncycastle_bcpkix_jdk15on_1_64.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.bouncycastle:bcpkix-jdk15on:1.64">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcpkix-jdk15on/1.64/bcpkix-jdk15on-1.64.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcpkix-jdk15on/1.64/bcpkix-jdk15on-1.64-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcpkix-jdk15on/1.64/bcpkix-jdk15on-1.64-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_bouncycastle_bcprov_jdk15on_1_64.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.bouncycastle:bcprov-jdk15on:1.64">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcprov-jdk15on/1.64/bcprov-jdk15on-1.64.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcprov-jdk15on/1.64/bcprov-jdk15on-1.64-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/bouncycastle/bcprov-jdk15on/1.64/bcprov-jdk15on-1.64-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_codehaus_woodstox_stax2_api_4_2_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.codehaus.woodstox:stax2-api:4.2.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_glassfish_jakarta_el_3_0_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.glassfish:jakarta.el:3.0.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/glassfish/jakarta.el/3.0.3/jakarta.el-3.0.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/glassfish/jakarta.el/3.0.3/jakarta.el-3.0.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/glassfish/jakarta.el/3.0.3/jakarta.el-3.0.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_hamcrest_hamcrest_2_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.hamcrest:hamcrest:2.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest/2.2/hamcrest-2.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest/2.2/hamcrest-2.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_hamcrest_hamcrest_core_2_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.hamcrest:hamcrest-core:2.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_hdrhistogram_HdrHistogram_2_1_12.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.hdrhistogram:HdrHistogram:2.1.12">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_hibernate_validator_hibernate_validator_6_1_6_Final.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.hibernate.validator:hibernate-validator:6.1.6.Final">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hibernate/validator/hibernate-validator/6.1.6.Final/hibernate-validator-6.1.6.Final.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hibernate/validator/hibernate-validator/6.1.6.Final/hibernate-validator-6.1.6.Final-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/hibernate/validator/hibernate-validator/6.1.6.Final/hibernate-validator-6.1.6.Final-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_jboss_logging_jboss_logging_3_4_1_Final.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.jboss.logging:jboss-logging:3.4.1.Final">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/jboss/logging/jboss-logging/3.4.1.Final/jboss-logging-3.4.1.Final.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/jboss/logging/jboss-logging/3.4.1.Final/jboss-logging-3.4.1.Final-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/jboss/logging/jboss-logging/3.4.1.Final/jboss-logging-3.4.1.Final-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_jupiter_junit_jupiter_5_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.jupiter:junit-jupiter:5.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_jupiter_junit_jupiter_api_5_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.jupiter:junit-jupiter-api:5.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_jupiter_junit_jupiter_engine_5_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.jupiter:junit-jupiter-engine:5.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_jupiter_junit_jupiter_params_5_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.jupiter:junit-jupiter-params:5.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_platform_junit_platform_commons_1_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.platform:junit-platform-commons:1.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_junit_platform_junit_platform_engine_1_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.junit.platform:junit-platform-engine:1.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_latencyutils_LatencyUtils_2_0_3.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.latencyutils:LatencyUtils:2.0.3">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_mockito_mockito_core_3_6_28.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.mockito:mockito-core:3.6.28">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-core/3.6.28/mockito-core-3.6.28.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-core/3.6.28/mockito-core-3.6.28-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-core/3.6.28/mockito-core-3.6.28-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_mockito_mockito_junit_jupiter_3_6_28.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.mockito:mockito-junit-jupiter:3.6.28">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-junit-jupiter/3.6.28/mockito-junit-jupiter-3.6.28.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-junit-jupiter/3.6.28/mockito-junit-jupiter-3.6.28-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/mockito/mockito-junit-jupiter/3.6.28/mockito-junit-jupiter-3.6.28-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_objenesis_objenesis_3_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.objenesis:objenesis:3.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/objenesis/objenesis/3.1/objenesis-3.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/objenesis/objenesis/3.1/objenesis-3.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/objenesis/objenesis/3.1/objenesis-3.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_opentest4j_opentest4j_1_2_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.opentest4j:opentest4j:1.2.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_ow2_asm_asm_5_0_4.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.ow2.asm:asm:5.0.4">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/ow2/asm/asm/5.0.4/asm-5.0.4.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/ow2/asm/asm/5.0.4/asm-5.0.4-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/ow2/asm/asm/5.0.4/asm-5.0.4-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_projectlombok_lombok_1_14_8.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.projectlombok:lombok:1.14.8">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/projectlombok/lombok/1.14.8/lombok-1.14.8.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/projectlombok/lombok/1.14.8/lombok-1.14.8-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/projectlombok/lombok/1.14.8/lombok-1.14.8-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_skyscreamer_jsonassert_1_5_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.skyscreamer:jsonassert:1.5.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_slf4j_jul_to_slf4j_1_7_30.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.slf4j:jul-to-slf4j:1.7.30">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/jul-to-slf4j/1.7.30/jul-to-slf4j-1.7.30.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/jul-to-slf4j/1.7.30/jul-to-slf4j-1.7.30-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/jul-to-slf4j/1.7.30/jul-to-slf4j-1.7.30-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_slf4j_slf4j_api_1_7_30.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.slf4j:slf4j-api:1.7.30">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springdoc_springdoc_openapi_common_1_5_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springdoc:springdoc-openapi-common:1.5.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-common/1.5.1/springdoc-openapi-common-1.5.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-common/1.5.1/springdoc-openapi-common-1.5.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-common/1.5.1/springdoc-openapi-common-1.5.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springdoc_springdoc_openapi_ui_1_5_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springdoc:springdoc-openapi-ui:1.5.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-ui/1.5.1/springdoc-openapi-ui-1.5.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-ui/1.5.1/springdoc-openapi-ui-1.5.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-ui/1.5.1/springdoc-openapi-ui-1.5.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springdoc_springdoc_openapi_webmvc_core_1_5_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springdoc:springdoc-openapi-webmvc-core:1.5.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-webmvc-core/1.5.1/springdoc-openapi-webmvc-core-1.5.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-webmvc-core/1.5.1/springdoc-openapi-webmvc-core-1.5.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springdoc/springdoc-openapi-webmvc-core/1.5.1/springdoc-openapi-webmvc-core-1.5.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot/2.4.1/spring-boot-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot/2.4.1/spring-boot-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot/2.4.1/spring-boot-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_actuator_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-actuator:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator/2.4.1/spring-boot-actuator-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator/2.4.1/spring-boot-actuator-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator/2.4.1/spring-boot-actuator-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_actuator_autoconfigure_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-actuator-autoconfigure:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator-autoconfigure/2.4.1/spring-boot-actuator-autoconfigure-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator-autoconfigure/2.4.1/spring-boot-actuator-autoconfigure-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-actuator-autoconfigure/2.4.1/spring-boot-actuator-autoconfigure-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_autoconfigure_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-autoconfigure/2.4.1/spring-boot-autoconfigure-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-autoconfigure/2.4.1/spring-boot-autoconfigure-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-autoconfigure/2.4.1/spring-boot-autoconfigure-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_configuration_processor_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-configuration-processor:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-configuration-processor/2.4.1/spring-boot-configuration-processor-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-configuration-processor/2.4.1/spring-boot-configuration-processor-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-configuration-processor/2.4.1/spring-boot-configuration-processor-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter/2.4.1/spring-boot-starter-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter/2.4.1/spring-boot-starter-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter/2.4.1/spring-boot-starter-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_actuator_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-actuator:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-actuator/2.4.1/spring-boot-starter-actuator-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-actuator/2.4.1/spring-boot-starter-actuator-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-actuator/2.4.1/spring-boot-starter-actuator-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_aop_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-aop:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-aop/2.4.1/spring-boot-starter-aop-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-aop/2.4.1/spring-boot-starter-aop-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-aop/2.4.1/spring-boot-starter-aop-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_json_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-json:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-json/2.4.1/spring-boot-starter-json-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-json/2.4.1/spring-boot-starter-json-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-json/2.4.1/spring-boot-starter-json-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_logging_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-logging:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-logging/2.4.1/spring-boot-starter-logging-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-logging/2.4.1/spring-boot-starter-logging-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-logging/2.4.1/spring-boot-starter-logging-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_test_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-test:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-test/2.4.1/spring-boot-starter-test-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-test/2.4.1/spring-boot-starter-test-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-test/2.4.1/spring-boot-starter-test-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_tomcat_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-tomcat/2.4.1/spring-boot-starter-tomcat-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-tomcat/2.4.1/spring-boot-starter-tomcat-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-tomcat/2.4.1/spring-boot-starter-tomcat-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_validation_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-validation:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-validation/2.4.1/spring-boot-starter-validation-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-validation/2.4.1/spring-boot-starter-validation-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-validation/2.4.1/spring-boot-starter-validation-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_starter_web_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-starter-web:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-web/2.4.1/spring-boot-starter-web-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-web/2.4.1/spring-boot-starter-web-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-starter-web/2.4.1/spring-boot-starter-web-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_test_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-test:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test/2.4.1/spring-boot-test-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test/2.4.1/spring-boot-test-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test/2.4.1/spring-boot-test-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_4_1.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.4.1">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test-autoconfigure/2.4.1/spring-boot-test-autoconfigure-2.4.1.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test-autoconfigure/2.4.1/spring-boot-test-autoconfigure-2.4.1-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/boot/spring-boot-test-autoconfigure/2.4.1/spring-boot-test-autoconfigure-2.4.1-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_commons_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-commons:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-commons/3.0.0-M5/spring-cloud-commons-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-commons/3.0.0-M5/spring-cloud-commons-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-commons/3.0.0-M5/spring-cloud-commons-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_context_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-context:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-context/3.0.0-M5/spring-cloud-context-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-context/3.0.0-M5/spring-cloud-context-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-context/3.0.0-M5/spring-cloud-context-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_sleuth_brave_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-sleuth-brave:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-brave/3.0.0-M5/spring-cloud-sleuth-brave-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-brave/3.0.0-M5/spring-cloud-sleuth-brave-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-brave/3.0.0-M5/spring-cloud-sleuth-brave-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_sleuth_core_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-sleuth-core:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-core/3.0.0-M5/spring-cloud-sleuth-core-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-core/3.0.0-M5/spring-cloud-sleuth-core-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-sleuth-core/3.0.0-M5/spring-cloud-sleuth-core-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_starter_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-starter:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter/3.0.0-M5/spring-cloud-starter-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter/3.0.0-M5/spring-cloud-starter-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter/3.0.0-M5/spring-cloud-starter-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_cloud_spring_cloud_starter_sleuth_3_0_0_M5.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.cloud:spring-cloud-starter-sleuth:3.0.0-M5">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter-sleuth/3.0.0-M5/spring-cloud-starter-sleuth-3.0.0-M5.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter-sleuth/3.0.0-M5/spring-cloud-starter-sleuth-3.0.0-M5-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/cloud/spring-cloud-starter-sleuth/3.0.0-M5/spring-cloud-starter-sleuth-3.0.0-M5-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_retry_spring_retry_1_2_5_RELEASE.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.retry:spring-retry:1.2.5.RELEASE">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/retry/spring-retry/1.2.5.RELEASE/spring-retry-1.2.5.RELEASE.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/retry/spring-retry/1.2.5.RELEASE/spring-retry-1.2.5.RELEASE-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/retry/spring-retry/1.2.5.RELEASE/spring-retry-1.2.5.RELEASE-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_security_spring_security_crypto_5_4_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.security:spring-security-crypto:5.4.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-crypto/5.4.2/spring-security-crypto-5.4.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-crypto/5.4.2/spring-security-crypto-5.4.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-crypto/5.4.2/spring-security-crypto-5.4.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_security_spring_security_rsa_1_0_9_RELEASE.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework.security:spring-security-rsa:1.0.9.RELEASE">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-rsa/1.0.9.RELEASE/spring-security-rsa-1.0.9.RELEASE.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-rsa/1.0.9.RELEASE/spring-security-rsa-1.0.9.RELEASE-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/security/spring-security-rsa/1.0.9.RELEASE/spring-security-rsa-1.0.9.RELEASE-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_aop_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-aop:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-aop/5.3.2/spring-aop-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-aop/5.3.2/spring-aop-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-aop/5.3.2/spring-aop-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_beans_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-beans:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-beans/5.3.2/spring-beans-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-beans/5.3.2/spring-beans-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-beans/5.3.2/spring-beans-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_context_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-context:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-context/5.3.2/spring-context-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-context/5.3.2/spring-context-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-context/5.3.2/spring-context-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_core_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-core:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-core/5.3.2/spring-core-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-core/5.3.2/spring-core-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-core/5.3.2/spring-core-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_expression_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-expression:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-expression/5.3.2/spring-expression-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-expression/5.3.2/spring-expression-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-expression/5.3.2/spring-expression-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_jcl_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-jcl:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-jcl/5.3.2/spring-jcl-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-jcl/5.3.2/spring-jcl-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-jcl/5.3.2/spring-jcl-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_test_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-test:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-test/5.3.2/spring-test-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-test/5.3.2/spring-test-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-test/5.3.2/spring-test-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_webmvc_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-webmvc:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-webmvc/5.3.2/spring-webmvc-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-webmvc/5.3.2/spring-webmvc-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-webmvc/5.3.2/spring-webmvc-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_springframework_spring_web_5_3_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.springframework:spring-web:5.3.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-web/5.3.2/spring-web-5.3.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-web/5.3.2/spring-web-5.3.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/springframework/spring-web/5.3.2/spring-web-5.3.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_webjars_swagger_ui_3_37_2.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.webjars:swagger-ui:3.37.2">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/swagger-ui/3.37.2/swagger-ui-3.37.2.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/swagger-ui/3.37.2/swagger-ui-3.37.2-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/swagger-ui/3.37.2/swagger-ui-3.37.2-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_webjars_webjars_locator_core_0_46.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.webjars:webjars-locator-core:0.46">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/webjars-locator-core/0.46/webjars-locator-core-0.46.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/webjars-locator-core/0.46/webjars-locator-core-0.46-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/webjars/webjars-locator-core/0.46/webjars-locator-core-0.46-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_xmlunit_xmlunit_core_2_7_0.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.xmlunit:xmlunit-core:2.7.0">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/xmlunit/xmlunit-core/2.7.0/xmlunit-core-2.7.0.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/xmlunit/xmlunit-core/2.7.0/xmlunit-core-2.7.0-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/xmlunit/xmlunit-core/2.7.0/xmlunit-core-2.7.0-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\libraries\Maven__org_yaml_snakeyaml_1_27.xml
-----------------------------------------------------
<component name="libraryTable">
  <library name="Maven: org.yaml:snakeyaml:1.27">
    <CLASSES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/yaml/snakeyaml/1.27/snakeyaml-1.27.jar!/" />
    </CLASSES>
    <JAVADOC>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/yaml/snakeyaml/1.27/snakeyaml-1.27-javadoc.jar!/" />
    </JAVADOC>
    <SOURCES>
      <root url="jar://$USER_HOME$/.m2/.repository_idea/org/yaml/snakeyaml/1.27/snakeyaml-1.27-sources.jar!/" />
    </SOURCES>
  </library>
</component>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\misc.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/classes" />
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\modules.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/sig-verify-sanitizer.iml" filepath="$PROJECT_DIR$/sig-verify-sanitizer.iml" />
    </modules>
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\vcs.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.idea\workspace.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="8e88dec4-b817-4ea6-9454-fb6a79737eec" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/docker-compose.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/docker-compose.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/helm/sig-verify-sanitizer/values.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/helm/sig-verify-sanitizer/values.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/api/openapi.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/api/openapi.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/controller/v1/SigVerifySanitizerController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/controller/v1/SigVerifySanitizerController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/ApiClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/ApiClient.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/JavaTimeFormatter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/JavaTimeFormatter.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/AsynchronousRequestHandlingApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/AsynchronousRequestHandlingApi.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/InfrastructuralServicesObjectOperationsByIdApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/InfrastructuralServicesObjectOperationsByIdApi.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/RequestsApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/RequestsApi.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/SearchServicesApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/SearchServicesApi.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/TroubleshootingAndDebuggingApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/api/TroubleshootingAndDebuggingApi.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/ApiKeyAuth.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/ApiKeyAuth.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/HttpBasicAuth.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/HttpBasicAuth.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/HttpBearerAuth.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/auth/HttpBearerAuth.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/AsyncRequestStatus.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/AsyncRequestStatus.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BankAccount.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BankAccount.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDoc.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDoc.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDocAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDocAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDocAllOfProperties.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCorporateDocAllOfProperties.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCustomerDocData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCustomerDocData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCustomerDocDataAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpCustomerDocDataAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusiness.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusiness.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusinessAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusinessAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusinessAllOfProperties.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDivisionBusinessAllOfProperties.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDocFolderData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDocFolderData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDocFolderDataAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpDocFolderDataAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpGeneralDocData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpGeneralDocData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpGeneralDocDataAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpGeneralDocDataAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDoc.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDoc.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDocAllOf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDocAllOf.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDocAllOfProperties.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/BnhpPaperDocAllOfProperties.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/Customer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/Customer.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocCustomerData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocCustomerData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocDetails.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocDetails.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocFile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocFile.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocIdData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocIdData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocPropertyExtension.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocPropertyExtension.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocumentData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/DocumentData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/ErrorDetails.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/ErrorDetails.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/ExecutorDetails.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/ExecutorDetails.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject1.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject2.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject2.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject3.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject3.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject4.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject4.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject5.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject5.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject6.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineObject6.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineResponse200.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineResponse200.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineResponse202.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/InlineResponse202.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/PagingDefinition.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/PagingDefinition.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/PensionFund.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/PensionFund.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestAppendDocByParamRequestParameters.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestAppendDocByParamRequestParameters.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestAppendDocByParamRequestParametersAppendPath.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestAppendDocByParamRequestParametersAppendPath.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestConcatenateDocsByParamsRequestParameters.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestConcatenateDocsByParamsRequestParameters.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestConcatenateDocsByParamsRequestParametersDocList.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestConcatenateDocsByParamsRequestParametersDocList.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestCountDocumentsPagesRequestParameters.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestCountDocumentsPagesRequestParameters.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestRetrieveDocumentsByZipRequestParameters.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RequestRetrieveDocumentsByZipRequestParameters.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RetrieveFormat.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/RetrieveFormat.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchCustomerDocumentsAccounts.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchCustomerDocumentsAccounts.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchCustomerDocumentsCustomers.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchCustomerDocumentsCustomers.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchDocumentsByIdsSearchParameters.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchDocumentsByIdsSearchParameters.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchDocumentsByIdsSearchParametersDocumentIds.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SearchSearchDocumentsByIdsSearchParametersDocumentIds.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SysObjectData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/model/SysObjectData.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/proxy/DocumentumProxy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/documentum/proxy/DocumentumProxy.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/logging/client/RestTemplateCurlPrinterInterceptor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/logging/client/RestTemplateCurlPrinterInterceptor.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/logging/filter/LoggingFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/logging/filter/LoggingFilter.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/signature/verifier/CRLHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/poalim/sigverifysanitizer/signature/verifier/CRLHandler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/com/poalim/sigverifysanitizer/config/EmbeddedMongoConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/poalim/sigverifysanitizer/config/EmbeddedMongoConfig.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/resources/application-default.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/resources/application-default.yaml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="localRepository" value="C:\Users\AP068\.m2\.repository_idea" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectId" id="1t1fzQW7AMXLZnIGuQRzCZmUGE6" />
  <component name="ProjectViewState">
    <option name="autoscrollFromSource" value="true" />
    <option name="autoscrollToSource" value="true" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="SDKs" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.3321839" />
    <property name="settings.editor.selected.configurable" value="MavenSettings" />
  </component>
  <component name="RunAnythingCache">
    <option name="myCommands">
      <command value="mvn install" />
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Application" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.poalim.sigverifysanitizer.Application" />
      <module name="sig-verify-sanitizer" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.poalim.sigverifysanitizer.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Application" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="8e88dec4-b817-4ea6-9454-fb6a79737eec" name="Default Changelist" comment="" />
      <created>1621941781469</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1621941781469</updated>
    </task>
    <servers />
  </component>
</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\.mvn\wrapper\maven-wrapper.properties
-----------------------------------------------------
distributionUrl=https://repo.devops.poalim.bank/artifactory/Misc-repository/apache-maven-3.6.2-bin.zip


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\docs\error-handling.md
-----------------------------------------------------
# Errors Handling

The suggested errors handling mechanism relies on `com.poalim.msa.error-handling` artifact.
For detailed updated usage examples please refer to the [error handling documentation](https://git.devops.poalim.bank/projects/M10042MSA/repos/error-handling/browse/README.md).


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\makefiles\docker.mk
-----------------------------------------------------
### DOCKER
# ¯¯¯¯¯¯¯¯¯¯¯


docker.login: ## Login into the docker artifactory repository (example: make docker.login user="<user>" password="<password>")
	docker login -u ${user} -p ${password} docker-40620-repo.repo.devops.poalim.bank

docker.build: ## Build docker image
	docker build -t sig-verify-sanitizer:latest --build-arg JAR_PATH=target/*.jar .

docker.tag:  ## Tag the docker image into the designated artifactory url (example: make docker.tag version=0.0.1-snapshot-master-latest)
	docker tag sig-verify-sanitizer:latest docker-40620-repo.repo.devops.poalim.bank/com/poalim/sig-verify-sanitizer:${version}

docker.push: ## Push docker image to artifactory (example: make docker.push version=0.0.1-snapshot-master-latest)
	docker push docker-40620-repo.repo.devops.poalim.bank/com/poalim/sig-verify-sanitizer:${version}

docker.build.tag.push: ## Build & Tag & Push (example: make docker.build.tag.push version=0.0.1-snapshot-master-latest)
	$(MAKE) server.build
	$(MAKE) docker.build
	$(MAKE) docker.tag
	$(MAKE) docker.push


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\makefiles\helm.mk
-----------------------------------------------------
### HELM CHARTS
# ¯¯¯¯¯¯¯¯¯¯¯

helm.chart.sig-verify-sanitizer.install: ## var: namespace (example: make helm.chart.sig-verify-sanitizer.install namespace=sig-verify-sanitizer)
	helm upgrade -i sig-verify-sanitizer helm/sig-verify-sanitizer --namespace ${namespace}

helm.chart.sig-verify-sanitizer.dependencies: ## Update chart dependencies
	helm dependency update helm/sig-verify-sanitizer

helm.add.global.repo: ## Add helm repository (example: make helm.add.global.repo)
	helm repo add helm-repo https://repo.devops.poalim.bank/artifactory/helm-repo

helm.add.repo: ## Add helm repository (example: make helm.add.repo aris=40620)
	helm repo add helm-${aris}-repo https://repo.devops.poalim.bank/artifactory/helm-${aris}-repo

helm.chart.sig-verify-sanitizer.deploy: ## var: namespace (example: make helm.chart.sig-verify-sanitizer.deploy namespace=sig-verify-sanitizer)
	$(MAKE) helm.add.global.repo
	$(MAKE) helm.chart.sig-verify-sanitizer.dependencies
	$(MAKE) helm.chart.sig-verify-sanitizer.install


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\makefiles\help.mk
-----------------------------------------------------
# ¯¯¯¯¯¯¯¯

.PHONY: help
# Add the following 'help' target to your Makefile
# And add help text after each target name starting with '\#\#'

help:
	@fgrep -h "##" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\$$//' | sed -e 's/##//'



file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\makefiles\server.mk
-----------------------------------------------------
### SERVER
# ¯¯¯¯¯¯¯¯¯¯¯


server.build: ## Build microservice. (Example: make build)
	mvnw.cmd package -D skipTests

server.services: ## Start dependency services. (Example: make services)
	docker-compose up -d sig-verify-sanitizer-dependency-services

server.stop: ## Stop containers and remove the volumes mount. (Example: make stop)
	docker-compose stop

server.remove: ## Stop containers. (Example: make remove)
	docker-compose down -v

server.logs: ## Display docker containers tailing 100 rows. (Example: make logs)
	docker-compose logs -f -t --tail=100


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\makefiles\test.mk
-----------------------------------------------------
### TESTS
# ¯¯¯¯¯¯¯¯¯¯¯


test.unit: ## Unit tests.
	mvnw.cmd test

test.component: ## Component tests.
	cd component-tests && mvnw.cmd test


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\splunk\dashboards\sig-verify-sanitizer - Client Request Response.xml
-----------------------------------------------------
<form theme="dark">
    <label>sig-verify-sanitizer - Client Request Response</label>
    <fieldset submitButton="false" autoRun="false">
        <input type="time" token="time">
            <label>Time</label>
            <default>
                <earliest>-60m@m</earliest>
                <latest>now</latest>
            </default>
        </input>
        <input type="dropdown" token="application">
            <label>Environment</label>
            <choice value="*">All</choice>
            <default>*</default>
            <initialValue>*</initialValue>
            <fieldForLabel>application</fieldForLabel>
            <fieldForValue>application</fieldForValue>
            <search>
                <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
                    | spath application
                    | search application="sig-verify-sanitizer-*"
                    | search loggerName="com.poalim.sigverifysanitizer.logging.client.RestTemplateCurlPrinterInterceptor"
                    | stats count by application</query>
                <earliest>$time.earliest$</earliest>
                <latest>$time.latest$</latest>
            </search>
        </input>
        <input type="dropdown" token="url">
            <label>url</label>
            <choice value="*">All</choice>
            <default>*</default>
            <initialValue>*</initialValue>
            <fieldForLabel>clientHttpRequestResponse.url</fieldForLabel>
            <fieldForValue>clientHttpRequestResponse.url</fieldForValue>
            <search>
                <query>index=sig-verify-sanitizer application=sig-verify-sanitizer-*
                    | spath application
                    | search application="$application$"
                    | search clientHttpRequestResponse.url=*
                    | search clientHttpRequestResponse.statusCode="$httpStatus$"
                    | search clientHttpRequestResponse.method="$method$"
                    | stats count by clientHttpRequestResponse.url</query>
                <earliest>$time.earliest$</earliest>
                <latest>$time.latest$</latest>
            </search>
        </input>
        <input type="dropdown" token="method">
            <label>method</label>
            <choice value="*">All</choice>
            <fieldForLabel>clientHttpRequestResponse.method</fieldForLabel>
            <fieldForValue>clientHttpRequestResponse.method</fieldForValue>
            <search>
                <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
                    | spath application
                    | search application="$application$"
                    | search clientHttpRequestResponse.method=*
                    | search clientHttpRequestResponse.statusCode="$httpStatus$"
                    | search clientHttpRequestResponse.url="$url$"
                    | stats count by clientHttpRequestResponse.method</query>
                <earliest>$time.earliest$</earliest>
                <latest>$time.latest$</latest>
            </search>
            <default>*</default>
            <initialValue>*</initialValue>
        </input>
        <input type="dropdown" token="httpStatus">
            <label>httpStatus</label>
            <choice value="*">All</choice>
            <default>*</default>
            <initialValue>*</initialValue>
            <fieldForLabel>clientHttpRequestResponse.statusCode</fieldForLabel>
            <fieldForValue>clientHttpRequestResponse.statusCode</fieldForValue>
            <search>
                <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
                    | spath application
                    | search application="$application$"
                    | search clientHttpRequestResponse.statusCode=*
                    | search clientHttpRequestResponse.method="$method$"
                    | search clientHttpRequestResponse.url="$url$"
                    | stats count by clientHttpRequestResponse.statusCode</query>
                <earliest>$time.earliest$</earliest>
                <latest>$time.latest$</latest>
            </search>
        </input>
        <input type="text" token="traceId" searchWhenChanged="true">
            <label>traceId</label>
            <default>*</default>
        </input>
    </fieldset>
    <row>
        <panel>
            <table>
                <search>
                    <query>index="sig-verify-sanitizer"
                        | spath application
                        | search application="$application$"
                        | search clientHttpRequestResponse.url="$url$"
                        | search traceId="$traceId$"
                        | search clientHttpRequestResponse.statusCode="$httpStatus$"
                        | search clientHttpRequestResponse.method="$method$"
                        | table timestamp traceId spanId clientHttpRequestResponse.url clientHttpRequestResponse.method clientHttpRequestResponse.curl clientHttpRequestResponse.statusCode clientHttpRequestResponse.responseBody
                        | rename clientHttpRequestResponse.url as "url"
                        | rename clientHttpRequestResponse.method as "method"
                        | rename clientHttpRequestResponse.curl as "curl"
                        | rename clientHttpRequestResponse.statusCode as "http status"
                        | rename clientHttpRequestResponse.responseBody as "response body"</query>
                    <earliest>$time.earliest$</earliest>
                    <latest>$time.latest$</latest>
                    <sampleRatio>1</sampleRatio>
                </search>
                <option name="count">20</option>
                <option name="dataOverlayMode">none</option>
                <option name="drilldown">none</option>
                <option name="percentagesRow">false</option>
                <option name="refresh.display">progressbar</option>
                <option name="rowNumbers">false</option>
                <option name="totalsRow">false</option>
                <option name="wrap">true</option>
            </table>
        </panel>
    </row>
</form>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\attachments\splunk\dashboards\sig-verify-sanitizer - Request Response.xml
-----------------------------------------------------
<form theme="dark">
  <label>sig-verify-sanitizer - Request Response</label>
  <fieldset submitButton="false">
    <input type="time" token="time">
      <label>Time</label>
      <default>
        <earliest>-60m@m</earliest>
        <latest>now</latest>
      </default>
    </input>
    <input type="dropdown" token="application">
      <label>Environment</label>
      <choice value="*">All</choice>
      <default>*</default>
      <initialValue>*</initialValue>
      <fieldForLabel>application</fieldForLabel>
      <fieldForValue>application</fieldForValue>
      <search>
        <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*" | spath application | search application="sig-verify-sanitizer-*" | transaction spanId | stats count by application</query>
        <earliest>$time.earliest$</earliest>
        <latest>$time.latest$</latest>
      </search>
    </input>
    <input type="dropdown" token="uri">
      <label>uri</label>
      <choice value="*">All</choice>
      <default>*</default>
      <initialValue>*</initialValue>
      <fieldForLabel>RequestResponse.uri</fieldForLabel>
      <fieldForValue>RequestResponse.uri</fieldForValue>
      <search>
        <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
          | spath application
          | search application="$application$"
          | transaction spanId
          | search RequestResponse.statusCode="$httpStatus$"
          | search RequestResponse.method="$method$"
          | search RequestResponse.uri="*"
          | stats count by RequestResponse.uri</query>
        <earliest>$time.earliest$</earliest>
        <latest>$time.latest$</latest>
      </search>
    </input>
    <input type="dropdown" token="httpStatus">
      <label>httpStatus</label>
      <choice value="*">All</choice>
      <default>*</default>
      <initialValue>*</initialValue>
      <fieldForLabel>RequestResponse.statusCode</fieldForLabel>
      <fieldForValue>RequestResponse.statusCode</fieldForValue>
      <search>
        <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
          | spath application
          | search application="$application$"
          | transaction spanId
          | search RequestResponse.statusCode=*
          | search RequestResponse.uri="$uri$"
          | search RequestResponse.method="$method$"
          | stats count by RequestResponse.statusCode</query>
        <earliest>$time.earliest$</earliest>
        <latest>$time.latest$</latest>
      </search>
    </input>
    <input type="dropdown" token="method">
      <label>method</label>
      <choice value="*">All</choice>
      <default>*</default>
      <initialValue>*</initialValue>
      <fieldForLabel>RequestResponse.method</fieldForLabel>
      <fieldForValue>RequestResponse.method</fieldForValue>
      <search>
        <query>index=sig-verify-sanitizer application="sig-verify-sanitizer-*"
          | spath application
          | search application="$application$"
          | transaction spanId
          | search RequestResponse.method=*
          | search RequestResponse.uri="$uri$"
          | search RequestResponse.statusCode="$httpStatus$"
          | stats count by RequestResponse.method</query>
        <earliest>$time.earliest$</earliest>
        <latest>$time.latest$</latest>
      </search>
    </input>
  </fieldset>
  <row>
    <panel>
      <table>
        <search>
          <query>index="sig-verify-sanitizer" AND (loggerName="com.poalim.sigverifysanitizer.logging.filter.LoggingFilter")
            | spath application
            | search application="$application$"
            | transaction spanId
            | search RequestResponse.uri=*
            | search RequestResponse.statusCode="$httpStatus$"
            | search RequestResponse.uri="$uri$"
            | search RequestResponse.method="$method$"
            | eval timestamp=mvindex(timestamp,0)
            | table timestamp traceId spanId RequestResponse.uri RequestResponse.method RequestResponse.statusCode RequestResponse.timeElapsed RequestResponse.curl RequestResponse.responseBody
            | rename RequestResponse.uri as "uri"
            | rename RequestResponse.method as "method"
            | rename RequestResponse.curl as "curl"
            | rename RequestResponse.responseBody as "response body"
            | rename RequestResponse.statusCode as "http status"
            | rename RequestResponse.timeElapsed as "Took in MS"</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">20</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
  </row>
</form>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\CHANGELOG\CHANGELOG-0.1.md
-----------------------------------------------------
* 0.1
    * [0.0.1](#0.0.1)
    
<a name="0.0.1"></a>
## 0.0.1

#### Breaking changes

* Initial Release

#### Changes

* Initial Release

#### Features

* Initial Release

#### Bug fixes

* Initial Release


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\.mvn\wrapper\maven-wrapper.properties
-----------------------------------------------------
distributionUrl=https://repo.devops.poalim.bank/artifactory/Misc-repository/apache-maven-3.6.2-bin.zip


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\mvnw.cmd
-----------------------------------------------------
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven2 Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"

FOR /F "tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\pom.xml
-----------------------------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.poalim</groupId>
    <artifactId>component-tests</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>component-tests</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>11</java.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.8.1</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>2.11.3</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.11.3</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.1</version>
                <configuration>
                    <parallel>all</parallel>
                    <threadCount>4</threadCount>
                    <threadCountSuites>4</threadCountSuites>
                    <threadCountClasses>4</threadCountClasses>
                    <threadCountMethods>4</threadCountMethods>
                    <perCoreThreadCount>true</perCoreThreadCount>
                    <includes>
                        <include>**</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project> 


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\README.md
-----------------------------------------------------
## Running

#### Prerequisites

* Java 11
* Maven

### Debug/Run Project on IDE
If you want run component test locally, you should:

1. Run  `Application.java` in sig-verify-sanitizer project
2. Open component-tests in separate window
2. Run `ComponentTest.java`

Enjoy!










file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\EmployeeApiTest.java
-----------------------------------------------------
package component;

import static component.Util.SERVER_BASE_PATH;
import static component.Util.SERVICE_URL;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import component.model.Employee;
import java.io.IOException;
import okhttp3.*;
import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class EmployeeApiTest {

    public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,
                                                                                  false).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                                                                                                   false);

    @Test(timeout = 10_000)
    public void getEmployeeTest() throws IOException {
        String url = SERVICE_URL + SERVER_BASE_PATH + "/employee/1";
        System.out.println("Going to call to: " + url);
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("GET",
                                                       null)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(200,
                            response.code());
    }

    @Test(timeout = 10_000)
    public void createEmployeeTest() throws IOException {
        Employee employee = new Employee();
        employee.setId(1L);
        employee.setFirstName("Test");
        employee.setLastName("Test");
        String url = SERVICE_URL + SERVER_BASE_PATH + "/employee";
        String bodyString = OBJECT_MAPPER.writeValueAsString(employee);
        System.out.println("Going to call to: " + url);
        RequestBody body = RequestBody.create(bodyString,
                                              MediaType.parse("application/json"));
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("POST",
                                                       body)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(201,
                            response.code());
    }

    @Test(timeout = 10_000)
    public void updateEmployeeTest() throws IOException {
        Employee employee = new Employee();
        employee.setId(2L);
        employee.setFirstName("Test");
        employee.setLastName("Test1");
        String url = SERVICE_URL + SERVER_BASE_PATH + "/employee";
        String bodyString = OBJECT_MAPPER.writeValueAsString(employee);
        System.out.println("Going to call to: " + url);
        RequestBody body = RequestBody.create(bodyString,
                                              MediaType.parse("application/json"));
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("PUT",
                                                       body)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(200,
                            response.code());
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\ErrorControllerTest.java
-----------------------------------------------------
package component;

import static component.Util.SERVER_BASE_PATH;
import static component.Util.SERVICE_URL;
import java.io.IOException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.junit.Assert;
import org.junit.Test;

public class ErrorControllerTest {

    @Test(timeout = 10_000)
    public void errorExampleTest() throws IOException {
        String url = SERVICE_URL + SERVER_BASE_PATH + "/exception-example";
        System.out.println("Going to call to: " + url);
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("GET",
                                                       null)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(500,
                            response.code());
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\JsonUtil.java
-----------------------------------------------------
package component;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class JsonUtil {

    public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,
                                                                                  false).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                                                                                                   false).registerModule(new JavaTimeModule());

    public static final XmlMapper XML_MAPPER = new XmlMapper();

    public static String decodeValue(String value) throws UnsupportedEncodingException {
        return URLDecoder.decode(value,
                                 StandardCharsets.UTF_8.toString());
    }

    public static <T> T deserializeFromJson(String contentAsString, Class<T> responseClass) throws JsonProcessingException {
        return OBJECT_MAPPER.readValue(contentAsString,
                                       responseClass);
    }

    public static <T> T deserializeFromXML(String contentAsString, Class<T> responseClass) throws JsonProcessingException {
        return XML_MAPPER.readValue(contentAsString,
                                    responseClass);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\model\Employee.java
-----------------------------------------------------
package component.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Employee {

    private Long id;

    private String firstName;

    private String lastName;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\OpenAPITest.java
-----------------------------------------------------
package component;

import static component.Util.SERVER_BASE_PATH;
import static component.Util.SERVICE_URL;
import java.io.IOException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.junit.Assert;
import org.junit.Test;

public class OpenAPITest {

    @Test(timeout = 10_000)
    public void helloTest() throws IOException {
        String url = SERVICE_URL + SERVER_BASE_PATH + "/v1/hello";
        System.out.println("Going to call to: " + url);
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("GET",
                                                       null)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(200,
                            response.code());
    }

    @Test(timeout = 10_000)
    public void openApiTest() throws IOException {
        String url = SERVICE_URL + SERVER_BASE_PATH + "/api-docs";
        System.out.println("Going to call to: " + url);
        OkHttpClient client = new OkHttpClient().newBuilder()
                                                .build();
        Request request = new Request.Builder().url(url)
                                               .method("GET",
                                                       null)
                                               .build();
        Response response = client.newCall(request)
                                  .execute();
        Assert.assertEquals(200,
                            response.code());
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\java\component\Util.java
-----------------------------------------------------
package component;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class Util {

    public static final String SERVICE_URL = System.getProperty("testRoute") != null ? System.getProperty("testRoute") : "http://127.0.0.1:8080";

    public static final String SERVER_BASE_PATH = "/api";
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\component-tests\src\test\resources\mongoData\sampledb\employee.json
-----------------------------------------------------
{}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\docker-compose.yaml
-----------------------------------------------------
version: '3.7'

services:

  sig-verify-sanitizer-wiremock:
    image: docker-10042-local.repo.devops.poalim.bank/wiremock:2.27.1-master-277
    container_name: sig-verify-sanitizer-wiremock
    ports:
    - "5555:8080"
    volumes:
    - ./component-tests/src/test/resources/__files:/opt/wiremock/__files
    - ./component-tests/src/test/resources/mappings:/opt/wiremock/mappings

  sig-verify-sanitizer-dependency-services:
    depends_on:
    - sig-verify-sanitizer-wiremock
    image: docker-repo.repo.devops.poalim.bank/alpine:3.8
    container_name: sig-verify-sanitizer-dependency-services
    command: sh -c "echo start"



file Read:C:\Users\AP068\git\sig-verify-sanitizer\Dockerfile
-----------------------------------------------------
FROM docker-repo.repo.devops.poalim.bank/golden/openjdk:11-deb10-ssl
ARG JAR_PATH

ENV JAVA_HOME=/opt/jdk

ENV LANG=C.UTF-8
ADD ${JAR_PATH} /app.jar

RUN adduser appuser --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password
USER appuser
ENTRYPOINT ["java","-jar","/app.jar"]


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\public-cd.key
-----------------------------------------------------
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQENBF260WsBCADEQKm1PAAUy/0E8MKXWvmM9oJzyEpNzWasPYsUUgkdcoq3IGR4
ihRR7HqVqN/4Kgtl3DE2K2Pn8xjuxm02CgvWMg0ZoQpBi2YHI5OM0oofwXdV+TzJ
X1LSxqZHU52HInfPPcsKPJpSWDT9U1TyvSVmD3qJLESQkFZ5JSg8Ega6lJfRVlnb
Jq8XC89AP5kaoclXX2iEd7BTaZ9DNbtAqJXSV9TZFQjQZwLfF0jRrI6PoX/Apw2t
AKXPN4G3P4lDvoUVZ0bE9FJmXKR0tFXy66UC0n46Ea3+mqMxan3Q12b86f4N4AC7
xp4cJNEziXF8t3zZfT5HhY6pkItiUvEnlYv7ABEBAAG0IG1hdGFuIDxtYXRhbi5r
ZWxlckBwb2FsaW0uY28uaWw+iQFUBBMBCAA+FiEETUV/BGH2mdzFLiJW9RbkI2da
6M0FAl260WsCGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQ9Rbk
I2da6M2bLgf/Qtu7uZh3m1awSYupKBvWkjuJ4/YlZHeE8Wei4Gs5OK48KhmDzrm9
IPQL/fo1E8BOYSAMd/bs0nE6FjjuZ78KLN+PSwXXKH1RunIgbx59hyPo2CuCr8EX
hX2cBlifA817jH54NU/4+X9XCQ84k3JP653HSFPH61XQLwDgs7C4NRldW773MK+w
E0vENbFaYtNtNcZEzRky+KcvcRbS19tmkhLBRsif1pDfzbFcKAg+L3UXclSZ5ZPL
q3AplBTnIoQqfZkJqAkfm1mGjFBcdP/dVW9k7D+NFyYHjFReNOsAw8BmJ2ZiaRbc
oxf75Ux4silrKlWsEAaYesIGMRt0WqF4CrkBDQRdutFrAQgAvX73NVfl2IU8Kwty
ERUOy0I/PavCXsjSjuFv8JvoknkoblY1OXR/o5nJy7r6Vavvb6lw/tN7X7eqMq98
OipHsyRhbYPS1+ayt2jas3pd3wbjgbb4ULYdz/gMa+41PEUXc9GD+k0O3U59Phs1
YM22Ha8yXJT9tTnCvGnCSG4qY8jif0jogkWLuHXj8HbV/RFNx7Pekrak5CFH9GVU
+/5+rnwoo9WuQD/CGO5a5CtVV+Rp1P+td7ymU2N/GOP2jmEodDvv7PQjx1AumVfk
wJeb5IF+F70U03gruOv+eZQCM6QPp1/4/zvEIoVjFFUcQNCfKQACX3paqQZNnqJ5
0tMimwARAQABiQE8BBgBCAAmFiEETUV/BGH2mdzFLiJW9RbkI2da6M0FAl260WsC
GwwFCQPCZwAACgkQ9RbkI2da6M1IlAf+MS7RQCh8prpkP2osh55yKkWjGjG3IWkS
/Ug4jK93Xg6p/kuC/h5yUTm4Kto24GZd917sgl+itnbwXrzq/4Pn8Lh1LCtfuodL
A1TU5eN5iwe11j1+E/LlUetecqoym4lr+vhzQulFcUdtiGQBRRqCbQPIN/lDNAHV
/ldAAVvY0fL++N4If3xkp2FCG/f7GacboM4OXB3CYn8uqlARpgzOyQFHwwtDQhbQ
7cqp7OSbldB5Dc/DGjhX5FUXR9V2hD0ZX4yQ/02PfVCHlEk29SLZ4Davq7qK2U+r
KyKpLIO7uqgfGJumFh8mNyvpo7kn8KU66XUsgbLjqIE4mKSuuBGRSQ==
=Ol+5
-----END PGP PUBLIC KEY BLOCK-----


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\public-ci.key
-----------------------------------------------------
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBF4kC7cBCADkwRkh/sqWoOCep8iDHEHJyeAW/ariOy0cKaFGGvuPkiiY8sFM
uZH40Rd/2p75tll31cGCNaJ4wzeeWwq+eoyvt2YfJocx8VwLyXQ24SDZLsHNFi26
OpufA7yvC3SBruLsOEVKXYKIh3vi7BI8tO0r+L+ut+zo1xGDxa3sgmK2BJ3vrJJl
0QAxTep5048OuTXT/ZARZz1yDJ8ebzeSYVHeNenzsFSg+KywowRFMGQV3iyielLx
dlIQ3yqD/n/wXApDymH+ycGfE5j4evk21pYihXrqc9vnQqAMdQNo3pNttFQhBQi8
hTcP3Qiif6oU3BtR0h7x0emIEjQxmqoysuIPABEBAAG0IlJldXZlbiA8cmV1dmVu
LmNvaGVuQHBvYWxpbS5jby5pbD6JAVQEEwEIAD4WIQQECU34rUxHp5dB90Tq2HLH
X7azdgUCXiQLtwIbAwUJA8JnAAULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRDq
2HLHX7azdjUWCACX2H4XN/U3k9La+MUY/23kQItn7EvxGITaveAbcIEAJZGFo4XF
PdBMH+lVT0UTVReBqBwaP9qWoL1JRVG4xNu5NxmsKvWrjSK8VjQ0dLsEmsXC6M6Y
MnxOCFh1gIyf1gBAijEGFBQtKBBtQZRevl+G7VDgcIG3du3YqnHuY0NNSbjMHoK8
fm6anOFRLSxEd019em66PsrQ6QS1tkxO6hRxKWZtaSlcAXPJiQo+qPCD93Biqu5W
RAx48Icv4DmYtgs0pB//u7/lizlv53hI3YX02ktDAPMDidrxhy9P8aouQ9TNj9Z1
uKSfomp64/M8JgQ0C1Ly+pbAMr0+OGMbVQdVuQENBF4kC7cBCADEai5h1/tIf2BX
r12fnQ3b8KlRz70lqB0uv0LwYyvalIntN5q3AkKxglZlwrwDZSf+pxCMFDtuq195
L3S4aNzXbJnasGIzjKvDOsX+P+5bNiCPX4KUAufy8RhB/dVTBGv9sc70Uv45o24G
41dxXZStJdrwaq2a1NrsA1IIAMCr/d8Su6eXpUkQa3gQqhAwOsGqRmxF9jEQEuqu
SwkuTw/+ftn7UShiJt2O7Qa43azK+elVISzh1L7z9oPXycKZVg4pDutln31bwliK
lsOJYo25TJ3187W/3ut9psoB/FIfWewwZ0lZj9lROltocuxnjGPr6Qw82UTYqi0Y
Rh9G6fczABEBAAGJATwEGAEIACYWIQQECU34rUxHp5dB90Tq2HLHX7azdgUCXiQL
twIbDAUJA8JnAAAKCRDq2HLHX7azdrFPB/4oxlQANLLH9keo2hjzCXf6hQxqWXrX
WEj9kr17P6Zn7DmiGhDaDtLVFVJ07lPMVg64uOSyyE0CEitmmz9GTlUcCg/uA4gX
G38wj+JT3ap3X8l46oTcsV9ZigSP+w0mEz6FmZ5ZRLaW+rK+fWdzCFRSM4dVsHyI
AWx7TiI8iHXhGj6c6CNwYlpZhH1Vt2T+iC/G/R90w08+VWyVSEityhz1WMwr4bKf
Jb14JiO8G5Hr36smK52100XQNKeFl6dezucS3LJu9jzD64lTtxanuoykcBsV/VZT
R21YSL0iw7h/++rDcU+fNJnhVK9iwJCmjO/7iypFfygDU6jx4htd3Y7m
=rksm
-----END PGP PUBLIC KEY BLOCK-----


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\README.md
-----------------------------------------------------
## References

[HELM](https://git.devops.poalim.bank/projects/M10042MSE/repos/sample-helm/browse/)

##Secrets
Your secrets are written in `/sig-verify-sanitizer/secrets/secrets.yaml`.
Your secrets was encrypted using CD Team's public key (the public key exists here in file public-cd.key)
The secrets are relevant only in Deployment by CD Team
Also included file : public-ci.key for future usage (like system-integration tests)

##Helm Secrets :
Use public-cd.key file to encrypt your passwords and secure data
by using the command:
```bash
sops --encrypt --gcp-kms sops-key test.yaml > test.enc.yaml
```



file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\Chart.yaml
-----------------------------------------------------
apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: sig-verify-sanitizer
version: 0.0.1


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\secrets\.sops.yaml
-----------------------------------------------------
creation_rules:
  - pgp: '4D45 7F04 61F6 99DC C52E  2256 F516 E423 675A E8CD'


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\secrets\secrets.yaml
-----------------------------------------------------
secret:
    envVars:
        EXAMPLE_PASSWORD: ENC[AES256_GCM,data:AczcAFBjAA==,iv:oTxefnlFxM3J2MMJrCw5ZDBuPjnOAfS3AkHOycHo8WY=,tag:5mkpeAhzXQRdNDHjxjrNyA==,type:str]
        MONGODB_PASSWORD: ENC[AES256_GCM,data:+fQCMk1Li+1dIGilr6MT,iv:kJbjLNoESr3iRhAWFLTwpSkHMvFtreyDkz+GebJLhaQ=,tag:9PiWTAjvQep0XjFWmC7ydQ==,type:str]
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    lastmodified: '2021-04-26T08:49:20Z'
    mac: ENC[AES256_GCM,data:u2srrtCfpjxa/QM+X5kFODdYozH6bk/G9EKu+7dIKGfWhrGHuOPRs4cisKVH1AeKLe/FncsSWYrQ+1iPKCfiG+D5r8PskLdRH6C6KXzbs7SGoljI9YYeZYEjNIPSaoNhqwjmUq3vXqBvAiZnP3ZgC1uVV1gap7p0uSwMWvDA6dw=,iv:zaT9XFWAmIxb2f2YalXPyW5HFqa/C5vemfjZc7i4hXk=,tag:BtjMhgMOAP5KMLlvJiv+DQ==,type:str]
    pgp:
    -   created_at: '2021-04-26T08:49:20Z'
        enc: |-
            -----BEGIN PGP MESSAGE-----

            wcBMAzbH0R+EF/0sAQgArtAjPFYoS0VJDdB+4TgBjgERPX9CZuEyPsVkJx6x7h7W
            r2ZJr++71hIcZ/mryi1LjKpADBOH+IEqQh6GBqUsvJ3zPMZPwxQWxBIxFzG72p5G
            sDRxbiVQWzgCulY8QbIB5VwYI1AhyiILl5wHQFjKKXZR4tplBUoi2kXQW9SU/mhQ
            Y4ChRiLhBajNXzIBbhfPzJVQQF9uk0qGfdwxaWKtcXG/fpv9CfjaPyUKFG4QU2BQ
            4CShmNQxm6Z9Tx4dFF1xwEtq6zUDXH0xswbIbftJkBlmdYeLrgF2ahsIT1AciMI6
            MWev123CjLirIc/RoNoZX1rATNcAPPeMjMbRCxD9+9LgAeTzRgI0OLR9f1kxGmFs
            5J+34cKv4Nvg1OEKSeBz4s3TGZvgAeXLDcXh4GPQngK/Y85zg9Dfiz6Ny01G4oMU
            zuvRLuYjE+B05ED1QP07P71QrOIDEPMNqEbiVhZU6+EvOAA=
            =A4ie
            -----END PGP MESSAGE-----
        fp: 4D457F0461F699DCC52E2256F516E423675AE8CD
    unencrypted_suffix: _unencrypted
    version: 3.4.0


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\configmap.yaml
-----------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include ".Chart.Name.fullname" . }}
  labels:
{{ include ".Chart.Name.labels" . | indent 4 }}
data:
{{ toYaml .Values.configs.envVars | indent 2 }}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\deployment.yaml
-----------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
{{ include ".Chart.Name.compannotation" . | indent 4 }}
  name: {{ include ".Chart.Name.fullname" . }}
  labels:
{{ include ".Chart.Name.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include ".Chart.Name.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include ".Chart.Name.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{ if .Values.index }}
        collectord.io/index: {{ .Values.index }}
        {{ end }}
        collectord.io/prometheus.1-path: {{ .Values.metrics.prometheus.path }}
        collectord.io/prometheus.1-port: '{{ .Values.service.management.port }}'
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: '{{ .Values.image.repository }}:{{ .Values.image.tag  | default .Chart.Version  }}'
          ports:
            - name: http
              containerPort: {{ .Values.service.application.port }}
              protocol: TCP
            - name: management
              containerPort: {{ .Values.service.management.port }}
              protocol: TCP
          envFrom:
            {{ if .Values.secret.envVars }}
            - secretRef:
                name: {{ include ".Chart.Name.fullname" . }}
            {{ end }}
            - configMapRef:
                name: {{ include ".Chart.Name.fullname" . }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthcheck.path }}
              port: {{ .Values.service.management.port }}
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthcheck.path }}
              port: {{ .Values.service.management.port }}
            {{- toYaml .Values.livenessProbe | nindent 12 }}
        {{- if .Values.volumeMounts}}
          volumeMounts:
            {{- toYaml .Values.volumeMounts | nindent 12 }}
        {{end}}
    {{- if .Values.volumes}}
      volumes:
        {{- toYaml .Values.volumes | nindent 8 }}
    {{end}}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8}}
    {{- end }}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\route.yaml
-----------------------------------------------------
{{- if .Values.enableRoute}}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
{{ include ".Chart.Name.compannotation" . | indent 4 }}
  labels:
{{ include ".Chart.Name.labels" . | indent 4 }}
  name: {{ include ".Chart.Name.fullname" . }}
spec:
  host: ""
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: {{ include ".Chart.Name.fullname" . }}
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
      host: ""
      routerName: router
      wildcardPolicy: None
{{end}}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\secret.yaml
-----------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: {{ include ".Chart.Name.fullname" . }}
  labels:
{{ include ".Chart.Name.labels" . | indent 4 }}
type: Opaque
stringData:
{{ toYaml .Values.secret.envVars | indent 2 }}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\service.yaml
-----------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  annotations:
{{ include ".Chart.Name.compannotation" . | indent 4 }}
  name: {{ include ".Chart.Name.fullname" . }}
  labels:
{{ include ".Chart.Name.labels" . | indent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.application.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.management.port }}
      protocol: TCP
      name: management
  selector:
    app.kubernetes.io/name: {{ include ".Chart.Name.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\templates\_helpers.tpl
-----------------------------------------------------
{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define ".Chart.Name.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define ".Chart.Name.fullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := default .Chart.Name .Values.nameOverride -}}
{{- if contains $name .Release.Name -}}
{{- .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
{{- end -}}


{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define ".Chart.Name.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Common labels
*/}}
{{- define ".Chart.Name.labels" -}}
app.kubernetes.io/name: {{ include ".Chart.Name.name" . }}
helm.sh/chart: {{ include ".Chart.Name.chart" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
{{- end -}}

{{- define ".Chart.Name.compannotation" -}}
bnhp.co.il/transformers.app-port: '{{ .Values.service.application.port }}'
bnhp.co.il/transformers.tier: rest
bnhp.co.il/transformers.runtime: java
{{- end -}}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\values-cd-dev.yaml
-----------------------------------------------------
# This values relevant to CD DEV environment only
# It will not be packed in the chart


configs:
  envVars:
    ENV_NAME: dev
    MONGODB_URL: "mongodb://TST10042AD04:${MONGODB_PASSWORD}@tmongodb01.restest.bank:27010/cardOperator?sslInvalidHostNameAllowed=true&ssl=true&authSource=$external&authMechanism=PLAIN"
replicaCount: 2


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\values-ci.yaml
-----------------------------------------------------
# This values relevant to CI time
# It will not be packed in the chart
configs:
  envVars:
    ENV_NAME: ci
replicaCount: 1
secret:
  envVars:
    EXAMPLE_PASSWORD: 123456a
enableRoute: true


file Read:C:\Users\AP068\git\sig-verify-sanitizer\helm\sig-verify-sanitizer\values.yaml
-----------------------------------------------------
# Default values for sig-verify-sanitizer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

service:
  type: ClusterIP
  application:
    port: 8080
  management:
    port: 9090

metrics:
  prometheus:
    path: /actuator/prometheus

healthcheck:
  path: /actuator/health
configs:
  envVars:
    LOGGER_APPENDER: "logstash"
    LOGGER_LEVEL: "INFO"
    ENV_NAME: default
replicaCount: 2
image:
  repository: docker-40620-repo.repo.devops.poalim.bank/com/poalim/sig-verify-sanitizer
  tag: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images#
  pullPolicy: Always

## Define resources requests and limits for single Pods.
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    cpu: 150m
    memory: 150Mi
  limits:
    cpu: 1000m
    memory: 2Gi

secret:
  envVars:
    EXAMPLE_PASSWORD: 123456a

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 6

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 10

fullnameOverride: sig-verify-sanitizer

## Affinity and anti-affinity
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
#affinity:
#  podAntiAffinity:
#    preferredDuringSchedulingIgnoredDuringExecution:
#      - weight: 100
#        podAffinityTerm:
#          topologyKey: "kubernetes.io/hostname"
#          labelSelector:
#            matchExpressions:
#              - key: app.kubernetes.io/name
#                operator: In
#                values:
#                  - sig-verify-sanitizer
affinity: {}
enableRoute: true
index: sig-verify-sanitizer


file Read:C:\Users\AP068\git\sig-verify-sanitizer\mvnw.cmd
-----------------------------------------------------
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven2 Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://artifactory.resource.bank/artifactory/poalim-ext/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"

FOR /F "tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%


file Read:C:\Users\AP068\git\sig-verify-sanitizer\pipelines\JenkinsfileBuild.groovy
-----------------------------------------------------
//Add tag on successful builds only
node('maven-jdk-11') {
    timestamps {
        properties([
                buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '7', numToKeepStr: '30')),
                [$class: 'BuildConfigProjectProperty', name: '', namespace: '', resourceVersion: '', uid: ''],
                disableConcurrentBuilds(),
                [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false]
        ])

        echo "Delete workspace"
        cleanWs()

        stage("Checkout scm") {
            echo "Run checkout"
            checkout scm
        }

        def user = "AP07E"
        def email = "david.hababou@poalim.co.il"

        def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
        if (isStartedByUser) {
            echo "Job started by user "
            def userId = currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId().toString().tokenize('-')
            user = userId[0]
            email = getUserEmail()
        } else {
            echo "Job NOT Started by User"
        }

        echo "User for OCP: ${user}"
        echo "Email for report: ${email}"

        echo "Repo number at the artifactory HA"
        def artifactoryRepositoryId = "40620"
        echo "The location of the pom.xml file"
        def pom_location = 'pom.xml'

        echo "Read a maven project file ."
        echo "'file' optional path to the file to read. If left empty the step will try to read pom.xml in the current working directory."
        def pom = readMavenPom file: pom_location

        echo "The Artifact Id"
        def artifactId = "${pom?.artifactId}"
        echo "artifactId = ${artifactId}"

        echo "The version of the pom (ex 9.0.0-SNAPSHOT)"
        def version = "${pom?.version}"
        echo "version = ${version}"
        def groupId = "${pom?.groupId}"
        echo "groupId = ${groupId}"

        echo "Configure working with HA artifactory"
        echo "Configure Artifactory"
        def arty = artyMavenInstanceOc(artifactoryRepositoryId)


        echo "The full image tag without the build number"
        def imageTagPrefix = ""

        if ("${BRANCH_NAME}" =~ /^[0-9]/) {
            imageTagPrefix = "${BRANCH_NAME}".toLowerCase().replaceAll(/[^a-z0-9.]/, '-')
            if (imageTagPrefix.contains(".x-dev") || imageTagPrefix.contains(".x-release")) {
                imageTagPrefix = imageTagPrefix.replaceAll(/[x]/, '01')
            }
        } else {
            imageTagPrefix = "${version}-${BRANCH_NAME}".toLowerCase().replaceAll(/[^a-z0-9.]/, '-')
        }
        echo "imageTagPrefix = ${imageTagPrefix}"

        echo "The full image tag (Prefix with build number)"
        def imageTag = "${imageTagPrefix}-${BUILD_NUMBER}".toLowerCase().replaceAll(/[^a-z0-9.]/, '-')
        echo "imageTag = ${imageTag}"

        def imageTagLatest = "${imageTagPrefix}-latest".toLowerCase().replaceAll(/[^a-z0-9.]/, '-')
        echo "imageTagLatest = ${imageTagLatest}"

        def projectNameWithBuildNumber = "${artifactId}-${imageTag}".toLowerCase().replaceAll(/[^a-z0-9]/, '-')
        echo "projectNameWithBuildNumber = ${projectNameWithBuildNumber}"

        def projectName = "${artifactId}-${imageTagPrefix}".toLowerCase().replaceAll(/[^a-z0-9]/, '-')
        echo "projectName = ${projectName}"

        def basePath = "/api"
        echo "basePath = ${basePath}"

        echo "Repo name"
        def dockerRepoPrefix = "docker-${artifactoryRepositoryId}-repo"

        echo "Helm Chart local repo name - to deploy to"
        def helmRepoPrefix = "helm-${artifactoryRepositoryId}-repo"

        def artifactoryDockerLocalRepository = "docker-${artifactoryRepositoryId}-local"
        echo "artifactoryDockerLocalRepository = ${artifactoryDockerLocalRepository}"

        echo "repoLocation"
        def dockerRepoSuffix = "${groupId}".replaceAll(/[^a-z0-9]/, '/') + "/${artifactId}"
        echo "dockerRepoSuffix = ${dockerRepoSuffix}"

        echo "The repository of the docker at the artifactory"
        def dockerImageRepository = "${dockerRepoPrefix}.${ARTIFACTORY_DOMAIN_NAME}/${dockerRepoSuffix}"
        echo "dockerImageRepository = ${dockerImageRepository}"

        def imageNameAndTag = dockerImageRepository + ":" + imageTag
        echo "imageNameAndTag = ${imageNameAndTag}"

        def artyUser = "arty-user"
        echo "artyUser = ${artyUser}"

        echo "Start Pipeline Stages"
        echo "Stage - Prepare oc env"
        echo "Loading all OC containers needed"

        def activeDirectoryGroupName = "${ACTIVE_DIRECTORY_GROUP_NAME}"
        echo "activeDirectoryGroupName = ${activeDirectoryGroupName}"

        def projectKey = gitProperties.getGitProjectKey()
        echo "projectKey = ${projectKey}"

        def repoName = gitProperties.getGitRepoName()
        echo "repoName = ${repoName}"

        def helmChartFileName = "helm/${artifactId}"
        echo "helmChartFileName = ${helmChartFileName}"

        def gitCommitHash = sh(script: "git rev-parse --short=8 HEAD", returnStdout: true).trim()
        echo "gitCommitHash = ${gitCommitHash}"

        def projectNameWithCommitHash = "${artifactId}-${gitCommitHash}-${BUILD_NUMBER}"
        echo "projectNameWithCommitHash = ${projectNameWithCommitHash}-${BUILD_NUMBER}"

        Integer tagsTokeep = 30
        String valuesLocation


        def gitUrl = gitProperties.getGitUrl()

        stage("Prepare oc env") {
            echo "Create new oc projects and adds admin role to specific users or groups"
            //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/ocNewProject.groovy
            ocNewProject.dev(projectNameWithCommitHash, projectNameWithBuildNumber, activeDirectoryGroupName.split(","), user, projectName)
        }

        stage("Unit tests") {
            echo "mvn clean test"
            String mavenTestGoals = "clean org.jacoco:jacoco-maven-plugin:0.8.5:prepare-agent test -Dimage.tag=${imageTag} -Dgit.tag=${BRANCH_NAME}-${BUILD_NUMBER}"
            arty.mvn.run pom: pom_location, goals: mavenTestGoals

            // https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/testingReporter.groovy
            def componentData = new ArrayList()
            componentData.add(componentForScanBuilder.java(artifactId, "src/main/java", "APPS"))
            testingReporter.maven(imageTag, componentData, "UNIT")
        }

        stage("Build a Jar file") {
            echo "mvn package"
            String mavenBuildGoals = "package -DskipTests -Dimage.tag=${imageTag} -Dgit.tag=${BRANCH_NAME}-${BUILD_NUMBER}"
            arty.mvn.deployer.deployArtifacts = false
            arty.mvn.run pom: pom_location, goals: mavenBuildGoals
        }

        stage("Build docker image") {
            echo "Docker building"
            sh "docker build -t ${imageNameAndTag} --build-arg JAR_PATH=target/*.jar ."
            sh "docker tag ${dockerImageRepository}:${imageTag} ${dockerImageRepository}:${imageTagLatest}"
        }


        stage("Push docker image") {
            try {
                echo "Docker push"
                withCredentials([usernamePassword(credentialsId: artyUser, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/ttdocker.groovy
                    ttdocker.push(USERNAME, PASSWORD, dockerImageRepository, imageTag)
                    ttdocker.push(USERNAME, PASSWORD, dockerImageRepository, imageTagLatest)
                }
            } finally {
                echo "finally"
                sh "docker rmi ${dockerImageRepository}:${imageTag}"
                sh "docker rmi ${dockerImageRepository}:${imageTagLatest}"
            }
        }

        def fullURL = ""
        stage("Build chart") {
            echo "Create Chart Artifact"
            sh "helm3 repo add helm-10042-repo https://repo.devops.poalim.bank/artifactory/helm-10042-repo"
            sh "helm3 dependency update ${helmChartFileName}"
            //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/helm3.groovy
            helm3.packChart(helmChartFileName, imageTag)
        }

        stage("Push chart to artifactory") {
            echo "Push Chart to Artifactory"
            def haArtifactoryServer = Artifactory.server "ArtifactoryHA"
            def helmChartFileNamePackaged = helmChartFileName.tokenize('/').last() + "-" + imageTag + ".tgz"
            //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/artifactory.groovy
            artifactory.deployFile(haArtifactoryServer, helmRepoPrefix + "/" + artifactId, helmChartFileNamePackaged,artyUser)
            fullURL = "${ArtifactoryHA}/${helmRepoPrefix}/${artifactId}/${helmChartFileNamePackaged}"
            echo "fullURL = ${fullURL}"
        }

        stage("Loading Wiremocks") {
//           Insert here the Component tests and WireMocks if needed, else delete this stage.
//
//            Documentation of the wireMock functions
//            https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/wiremock.groovy
//
//            Documentation of the wireMock helm chart
//            https://devops.resource.bank/bitbucket/projects/TTOOL/repos/wiremock/browse
//
//            Documentation of the wireMock helm chart using git-sync
//            https://devops.resource.bank/bitbucket/projects/TTOOL/repos/git-sync/browse
//
        }

        stage("Prepare Env Dependencies") {
             def mongoFolderArray = [mongoData: "component-tests/src/test/resources/mongoData/"]
             def mongoMap = ["withGitSync": true, "GitRepo": gitUrl, "repoName": repoName, "cloneOneTime": true, "branch": env.BRANCH_NAME, "folderArray": mongoFolderArray]
             mongodb.apply(projectNameWithCommitHash, mongoMap, null, true, "git-ssh-credentials")

        }

       stage("Deploy chart to OCP") {
           echo "Loading the newly created Chart Artifact to OC"
           valuesLocation = "helm/${artifactId}/values-ci.yaml"
           //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/helm3.groovy
           helm3.upgrade(projectNameWithCommitHash, fullURL, valuesLocation, ["image.tag": imageTag], projectNameWithCommitHash, true)
       }

        def serviceRoute

        stage("Component tests") {
            try{
                serviceRoute = getRoute(projectNameWithCommitHash, artifactId)
                echo "serviceName = ${serviceRoute}"
                echo "After route is up run integration tests"
                arty.mvn.run pom: 'component-tests/pom.xml', goals: 'clean org.jacoco:jacoco-maven-plugin:0.8.5:prepare-agent test -DtestRoute=' + serviceRoute
              } catch (Exception ex){
                  println ex.getMessage()
                  throw ex
              } finally {
                //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/testingReporter.groovy
                 def componentData = new ArrayList()
                componentData.add(componentForScanBuilder.java(artifactId, "src/main/java", "APPS", null, null, "component-tests/target/surefire-reports", null, null, null, "${artifactId}.${projectNameWithCommitHash}.svc.cluster.local"))
                testingReporter.maven(imageTag, componentData, "COMPONENT")
              }
        }


        stage("OpenAPI Catalog") {
            def businessDomain = ""
            if(businessDomain != "") {
               def apiDocsJson = [];
               def urlContainsVersion = true // determine whether your api contains version
               def groupsToPublish = ['v1']  // add your api groups to the array
               groupsToPublish.each { group -> apiDocsJson.add(sh(
                       script: "curl -X GET ${serviceRoute}${basePath}/api-docs/${group}",
                       returnStdout: true
               ).trim())}
                echo "apiDocsJson = ${apiDocsJson}"
                echo "businessDomain  =  ${businessDomain}"
                echo "projectKey  =  ${projectKey}"
                echo "repoName  =  ${repoName}"
                echo "imageTag  =  ${imageTag}"
                echo "artifactId  =  ${artifactId}"
                apiswaggercatalogV1.push(businessDomain, projectKey, repoName, imageTag, artifactId, apiDocsJson, "git-api-credentials", urlContainsVersion, "LOW")
            }
        }

        stage("Tag successful build"){
            echo "Tag with lifecycleTagger = ${imageTag}"
            lifecycleTagger.gitTag("${imageTag}")
        }

        stage("Security tests") {
            def imageFullName = "${dockerImageRepository}:${imageTag}".toString()
            echo "imageFullName = ${imageFullName}"

            //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/policyManager.groovy
            policyManager.scanRepo(projectKey,repoName,imageTag,email,'default',repoName)
            policyManager.scanImage(imageFullName,email,'default',repoName)
            policyManager.scanManifest(projectKey,repoName, fullURL,helmRepoPrefix, artifactId, imageTag, "default", projectName, email, valuesLocation , "", "")

            // Sonar call
            //https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/sonarQubeScan.groovy
            sonarQubeScan(projectKey, repoName, BRANCH_NAME, email)
        }

        stage("Clean WS & OCP") {
            echo "Clean OCP env"
            mongodb.delete(projectNameWithCommitHash);

            helm3.uninstall(projectNameWithCommitHash)
            echo "Delete project ${projectNameWithCommitHash}"
            sh "oc delete project ${projectNameWithCommitHash}"

            // https://git.devops.poalim.bank/projects/TTOOL/repos/transformersjenkinslib/browse/vars/ttdocker.groovy
            ttdocker.artifactoryCleanup(dockerImageRepository, imageTagPrefix, artyUser, tagsTokeep, artifactoryDockerLocalRepository, imageNameAndTag)

            echo "cleaned docker registry cleanup"
            cleanWs()
        }
    }
}






file Read:C:\Users\AP068\git\sig-verify-sanitizer\pipelines\README.md
-----------------------------------------------------
## References

[CI](https://git.devops.poalim.bank/projects/M10042MSE/repos/sample-ci/browse/)


file Read:C:\Users\AP068\git\sig-verify-sanitizer\pom.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
	</parent>


	<dependencies>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.5.1</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.11.3</version>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
			<version>1.2.5.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<!-- <exclusion> <groupId>org.yaml</groupId> <artifactId>snakeyaml</artifactId> 
					</exclusion> -->
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> 
			<scope>provided</scope> </dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.poalim.msa</groupId>
			<artifactId>error-handling</artifactId>
			<version>1.2.0-RELEASE</version>
		</dependency>
		<!-- <dependency> <groupId>net.logstash.logback</groupId> <artifactId>logstash-logback-encoder</artifactId> 
			<version>${logstash.version}</version> </dependency> -->

		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> 
			</dependency> <dependency> <groupId>de.flapdoodle.embed</groupId> <artifactId>de.flapdoodle.embed.mongo</artifactId> 
			<scope>test</scope> </dependency> -->
		<!-- <dependency> <groupId>org.openapitools</groupId> <artifactId>openapi-generator-maven-plugin</artifactId> 
			<version>5.1.0</version> <exclusions> <exclusion> <groupId>org.apache.maven</groupId> 
			<artifactId>maven-repository-metadata</artifactId> </exclusion> <exclusion> 
			<groupId>org.apache.maven</groupId> <artifactId>maven-core</artifactId> </exclusion> 
			<exclusion> <groupId>org.yaml</groupId> <artifactId>snakeyaml</artifactId> 
			</exclusion> </exclusions> </dependency> -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>${version.swagger}</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.14.8</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
		</dependency>
	</dependencies>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>11</java.version>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<spring.cloud.version>2020.0.0-M5</spring.cloud.version>
		<logstash.version>6.4</logstash.version>
		<version.swagger>1.5.10</version.swagger>

	</properties>

	<groupId>com.poalim</groupId>
	<artifactId>sig-verify-sanitizer</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<parallel>all</parallel>
					<threadCount>4</threadCount>
					<threadCountSuites>4</threadCountSuites>
					<threadCountClasses>4</threadCountClasses>
					<threadCountMethods>4</threadCountMethods>
					<perCoreThreadCount>true</perCoreThreadCount>
					<includes>
						<include>**</include>
					</includes>
				</configuration>
			</plugin>
			<!-- <plugin> <groupId>org.openapitools</groupId> <artifactId>openapi-generator-maven-plugin</artifactId> 
				<version>5.1.0</version> <executions> <execution> <goals> <goal>generate</goal> 
				</goals> <configuration> <generatorName>java</generatorName> <templateDirectory>template</templateDirectory> 
				<library>resttemplate</library> <serializationLibrary>jackson</serializationLibrary> 
				<inputSpec>swagger.json</inputSpec> <output></output> <apiPackage>com.poalim.sigverifysanitizer.documentum.api</apiPackage> 
				<modelPackage>com.poalim.sigverifysanitizer.documentum.model</modelPackage> 
				<configOptions> <sourceFolder>src/main/java</sourceFolder> <dateLibrary>java8</dateLibrary> 
				</configOptions> </configuration> </execution> </executions> </plugin> -->
		</plugins>
	</build>

</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\README.md
-----------------------------------------------------
## Running

#### Prerequisites
* Java 11 `\\popnasru01\install\TASHTIOT\Infra\Java`
* Docker & Docker compose `\\popnasru01\install\TASHTIOT\Infra\Docker`
* Helm CLI version 3+ `\\popnasru01\install\TASHTIOT\Infra\Helm`
* Openshift OC CLI `\\popnasru01\install\TASHTIOT\Infra\openshift`
* Make command `\\popnasru01\install\TASHTIOT\Infra\Make`


#### Make commands

You can display available make commands using `make`.

While developing, you will probably rely mostly on `make services`; however, there are additional scripts at your disposal:

| `make <script>`      | Description                                                                  |
| -------------------- | ---------------------------------------------------------------------------- |
| `build`              | Build microservice                                                           |
| `help`               | Display available make commands                                              |
| `start`              | Run all services.                                                            |
| `stop`               | Stop all services.                                                           |
| `remove`             | Stop & Remove volumes of all services.                                       |
| `services`           | Run dependency services.       |



Docker build:
```bash
docker build -t sig-verify-sanitizer:latest --build-arg JAR_PATH=target/*.jar .
```

### Docker run
```bash
docker run -p 8080:8080 sig-verify-sanitizer:latest
```

### Debug/Run Project on IDE
Open IDE and run `Application.java`
Open browser and go to: `http://localhost:8080/api/swagger-ui`

### Install helm chart on openshift/kubernetes
```bash
helm install helm/sig-verify-sanitizer --name=sig-verify-sanitizer
```


## References
[Unit tests & Component tests](https://git.devops.poalim.bank/projects/M10042MSE/repos/sample-testing/browse)

[Error handling](./attachments/docs/error-handling.md)

[Helm](https://git.devops.poalim.bank/projects/M10042MSE/repos/sample-helm/browse)

[CI](https://git.devops.poalim.bank/projects/M10042MSE/repos/sample-ci/browse/)








file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\.gitignore
-----------------------------------------------------
*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# exclude jar for gradle wrapper
!gradle/wrapper/*.jar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

# build files
**/target
target
.gradle
build


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\api\openapi.yaml
-----------------------------------------------------
info:
  contact:
    email: "evgeni.doudine@poalim.co.il"
    name: Evgeni Doudine
  description: Document Management REST API subset for internal (non-cloud) projects.
  title: Document Management REST API
  version: 0.3.6
openapi: 3.0.0
servers:
  - url: "http://not-relevant"
paths:
  /WhoAmI:
    get:
      operationId: getWhoAmI
      responses:
        "200":
          $ref: "#/components/responses/JsonResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Show the Client who he is
      tags:
        - Troubleshooting and debugging
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  "/objects/{idType}/{documentId}":
    delete:
      operationId: cancelObjectById
      parameters:
        - description: type of identifier
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - in: query
          name: executorDetails
          required: false
          schema:
            $ref: "#/components/schemas/executorDetails"
        - description: delete dependent objects
          in: query
          name: recursively
          required: false
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Cancel document by Id
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    get:
      operationId: retrieveObjectById
      parameters:
        - description: "Type of unique object identifier:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryRetrieveFormat"
        - $ref: "#/components/parameters/queryFechType"
        - $ref: "#/components/parameters/queryRetrieveProfile"
        - $ref: "#/components/parameters/queryRetrieveDeleted"
        - $ref: "#/components/parameters/queryExecutorDetails"
        - $ref: "#/components/parameters/queryObjectTypes"
        - $ref: "#/components/parameters/queryCustomerType"
        - $ref: "#/components/parameters/queryCompleteCustomerIdCode"
        - $ref: "#/components/parameters/queryCustomerId"
        - $ref: "#/components/parameters/queryAccountBankId"
        - $ref: "#/components/parameters/queryAccountBranchId"
        - $ref: "#/components/parameters/queryAccountNbr"
        - $ref: "#/components/parameters/queryDocDataCheck"
        - $ref: "#/components/parameters/queryPagingDefinition"
        - $ref: "#/components/parameters/queryRetrieveSecondaryContent"
      responses:
        "200":
          $ref: "#/components/responses/GetObjectResponse"
        "203":
          $ref: "#/components/responses/GetObjectResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve Document By Unique Identifier
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    patch:
      operationId: patchDocumentById
      parameters:
        - description: type of identifier
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Modify document properties by specifying it by unique ID
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    post:
      operationId: createDocumentById
      parameters:
        - description: Type of identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
      requestBody:
        content:
          application/json:
            example:
              docCustomerData:
                bankAccounts:
                  - accountBankId: 12
                    accountNbr: 123456
                    branchId: 123
                    divisionId: 5
                    specialHandlingCode: false
                customers:
                  - completeCustomerIdCode: 09876543
                    customerFullName: Lakoah Ploni
                    customerId: 1234
                    customerIdDocTypeCode: "1,"
                    customerSerialNbr: "1,"
                    occasionalCustomerInd: false
                docDetails:
                  businessAreaCode: 40
                  businessSubAreaCode: 10
                  channelId: 1
                  docCompletenessCode: 0
                  documentFormId: "5555500001"
                  documentGroupIds:
                    - XX_SOME_GROUP_ID
                  legacyDocumentEntryDttm: "2019-02-13T09:22:15Z"
                  legacyDocumentId: XX_SOME_DOCUMENT_ID
                  ongoingOrHistoryCode: 1
                  projectId: 1
                  scanStatusCode: 4
                  signatureStatusCode: 0
                  systemCode: 28008
                executorDetails:
                  empIdDocumentTypeCode: 1
                  executingBankId: 12
                  executingBranchId: 777
                  executingEmpFullName: Pakid Ploni
                  executingEmpIdCode: "12345678"
                  executingUserName: XYZ
                  ipAddress: 1.2.3.4
              docFiles:
                - docSize: 1024
                  docURL: "file:///Tofes_Peula/0/somefile.pdf"
                  mimeType: application/pdf
              objectName: SampleCustomerDocument.pdf
              objectType: BnhpCustomerDocData
              versionLabels:
                - SOME_USER_LABEL
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Create object with given ID in repository.
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    put:
      operationId: putDocumentById
      parameters:
        - description: "Type of unique object identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryAsNewVersion"
      requestBody:
        content:
          application/json:
            example:
              docCustomerData:
                bankAccounts:
                  - accountBankId: 12
                    accountNbr: 123456
                    branchId: 123
                    divisionId: 5
                    specialHandlingCode: false
                customers:
                  - completeCustomerIdCode: 09876543
                    customerFullName: Lakoah Ploni
                    customerId: 1234
                    customerIdDocTypeCode: "1,"
                    customerSerialNbr: "1,"
                    occasionalCustomerInd: false
                docDetails:
                  businessAreaCode: 40
                  businessSubAreaCode: 10
                  channelId: 1
                  docCompletenessCode: 0
                  documentFormId: "5555500001"
                  documentGroupIds:
                    - XX_SOME_GROUP_ID
                  legacyDocumentEntryDttm: "2019-02-13T09:22:15Z"
                  legacyDocumentId: XX_SOME_DOCUMENT_ID
                  ongoingOrHistoryCode: 1
                  projectId: 1
                  scanStatusCode: 4
                  signatureStatusCode: 0
                  systemCode: 28008
                executorDetails:
                  empIdDocumentTypeCode: 1
                  executingBankId: 12
                  executingBranchId: 777
                  executingEmpFullName: Pakid Ploni
                  executingEmpIdCode: "12345678"
                  executingUserName: XYZ
                  ipAddress: 1.2.3.4
              docFiles:
                - docSize: 1024
                  docURL: "file:///Tofes_Peula/0/somefile.pdf"
                  mimeType: application/pdf
              objectName: SampleCustomerDocument.pdf
              objectType: BnhpCustomerDocData
              versionLabels:
                - SOME_USER_LABEL
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Create or update document by Unique Id
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/AppendDocByParam:
    post:
      operationId: AppendDocByParam
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    AppendPath:
                      description: "Array of entries that specify documents to be appended. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not."
                      items:
                        properties:
                          DctmDocumentId:
                            type: string
                          DocDataCheck:
                            $ref: "#/components/schemas/DocCustomerData"
                          DocFile:
                            $ref: "#/components/schemas/DocFile"
                          LegacyDocumentId:
                            type: string
                        type: object
                      type: array
                    DocumentFormId:
                      description: documentFormId (makat) for the newly created document.
                      type: string
                    LegacyDocumentEntryDttm:
                      description: date for the newly created document
                      type: string
                    LegacyDocumentId:
                      description: LegacyDocumentId for the newly created document.
                      type: string
                    PageRenumbering:
                      description: "Format for page numbers. Page number and and total number of pages are inserted instead of %d. Empty value disables renumbering of pages."
                      example: "Page %d of %d"
                      type: string
                    SrcDctmDocumentId:
                      description: "DctmDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcLegacyDocumentId, it is mandatory to provide one of them."
                      type: string
                    SrcLegacyDocumentId:
                      description: "LegacyDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcDctmDocumentId, it is mandatory to provide one of them."
                      type: string
                  required:
                    - LegacyDocumentEntryDttm
                    - LegacyDocumentId
                    - AppendPath
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Append pages to a pdf document and save as new document version
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/ConcatenateDocsByParams:
    post:
      operationId: GetConcatenatedDocsByLegacyDocIds
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    DocList:
                      description: "Array of entries that specify documents to be concatenated. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some caller systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not."
                      items:
                        properties:
                          DctmDocumentId:
                            description: DctmDocumentId for document.
                            type: string
                          DocDataCheck:
                            $ref: "#/components/schemas/DocCustomerData"
                          DocFile:
                            $ref: "#/components/schemas/DocFile"
                          LegacyDocumentId:
                            description: LegacyDocumentId for document.
                            type: string
                        type: object
                      type: array
                    PageRenumbering:
                      description: "Format for page numbers. Page number and and total number of pages are inserted instead of %d in the format string. No value or empty value disables renumbering of pages. The default is no renumbering."
                      example: "Page %d of %d"
                      type: string
                    RetrieveProfile:
                      description: "Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply"
                      type: string
                  required:
                    - DocList
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocFile"
            application/pdf:
              schema:
                format: binary
                type: string
          description: OK
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Concatenate given documents and retrieve resulting file
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/countDocumentsPages:
    post:
      callbacks:
        asyncReply:
          "{$request.header.X-Callback-URL}":
            post:
              operationId: countDocumentsPagesAsyncReply
              parameters:
                - $ref: "#/components/parameters/headerCorrelationID"
                - $ref: "#/components/parameters/queryResult"
                - $ref: "#/components/parameters/queryErrorCode"
                - $ref: "#/components/parameters/queryErrorDetails"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DocumentsPageCountList"
                description: callback parameters
                required: true
              responses:
                "200":
                  description: OK
      operationId: countDocumentsPages
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
        - $ref: "#/components/parameters/headerCallbackURL"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    documents:
                      oneOf:
                        - $ref: "#/components/schemas/DocumentsSourceURL"
                        - $ref: "#/components/schemas/DocumentsSourceList"
                    dosExtension:
                      description: Extension of content format to be used. If not set pdf will be used.
                      type: string
                    targetURL:
                      description: URL of output file. If not set the service will attempt to return data array in response
                      format: uri
                      type: string
                  required:
                    - documents
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsPageCountList"
          description: OK
        "202":
          $ref: "#/components/responses/Accepted202"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Count pages in a set of documents
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/retrieveDocumentsByZip:
    post:
      callbacks:
        asyncReply:
          "{$request.header.X-Callback-URL}":
            post:
              operationId: retrieveDocumentsByZipAsyncReply
              parameters:
                - $ref: "#/components/parameters/headerCorrelationID"
                - $ref: "#/components/parameters/queryResult"
                - $ref: "#/components/parameters/queryErrorCode"
                - $ref: "#/components/parameters/queryErrorDetails"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DocumentsStatusList"
                  application/zip:
                    schema:
                      format: binary
                      type: string
                description: callback payload
                required: true
              responses:
                "200":
                  description: OK
      operationId: retrieveDocumentsByZip
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
        - $ref: "#/components/parameters/headerCallbackURL"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    documents:
                      oneOf:
                        - $ref: "#/components/schemas/DocumentsSourceURL"
                        - $ref: "#/components/schemas/DocumentsSourceListWithDocDataCheck"
                    dosExtension:
                      description: extension of content format to be retrieved
                      type: string
                    fileNameSource:
                      description: "Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries"
                      enum:
                        - legacyDocumentId
                        - dctmDocumentId
                        - explicit
                      type: string
                    targetStatusURL:
                      description: URL of file with array of document statuses. If not given the service will return the array in the response. File format is same as DocumentsStatusList
                      format: uri
                      type: string
                    targetURL:
                      description: URL of target zip file. If not set the service will attempt to return zip in response
                      format: uri
                      type: string
                  required:
                    - documents
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsStatusList"
            application/zip:
              schema:
                format: binary
                type: string
          description: OK
        "202":
          $ref: "#/components/responses/Accepted202"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve number of documents in a zip archive
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  "/requests/async/{requestId}/status":
    get:
      operationId: getAsyncRequestStatus
      parameters:
        - description: is of an asyncronous request
          in: path
          name: requestId
          required: true
          schema:
            type: string
        - description: If need to return request output. default is false
          in: query
          name: returnOutput
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: OK
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Get status of an asynchronous request
      tags:
        - Asynchronous request handling
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchCustomerDocuments:
    post:
      operationId: searchCustomerDocuments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                accounts:
                  items:
                    properties:
                      accountBankId:
                        format: int32
                        type: integer
                      accountNumber:
                        format: int32
                        type: integer
                      branchId:
                        format: int32
                        type: integer
                    required:
                      - accountNumber
                      - accountBankId
                      - branchId
                    type: object
                  type: array
                customers:
                  items:
                    properties:
                      entityId:
                        type: string
                      entityType:
                        $ref: "#/components/schemas/CustomerType"
                    required:
                      - entityId
                    type: object
                  type: array
                dosExtension:
                  type: string
                endDate:
                  format: date
                  type: string
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                fetchType:
                  $ref: "#/components/schemas/fetchType"
                fulltext:
                  type: string
                pagingDefinitions:
                  $ref: "#/components/schemas/PagingDefinition"
                sortByFields:
                  $ref: "#/components/schemas/SortDefinitions"
                startDate:
                  format: date
                  type: string
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve list of Customer Documents according to user specified criteria
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchDocumentsByIds:
    post:
      operationId: searchDocumentsByIds
      requestBody:
        content:
          application/json:
            schema:
              properties:
                searchParameters:
                  properties:
                    documentIds:
                      items:
                        properties:
                          dctmDocumentId:
                            type: string
                          legacyDocumentId:
                            type: string
                          versionLabel:
                            description: "Version label of documents to be retrieved. If unspecified CURRENT will be retrieved. * will retrieve all documents versions."
                            type: string
                        required:
                          - legacyDocumentId
                        type: object
                      type: array
                    fetchType:
                      $ref: "#/components/schemas/fetchType"
                    pagingDefinitions:
                      $ref: "#/components/schemas/PagingDefinition"
                  type: object
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve list of documents with the specified identifiers
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchGeneralDocuments:
    post:
      operationId: searchGeneralDocuments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dosExtension:
                  type: string
                endCreationDate:
                  format: date
                  type: string
                endUpdateDate:
                  format: date
                  type: string
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                fetchType:
                  $ref: "#/components/schemas/fetchType"
                nameSubstring:
                  type: string
                ownerName:
                  description: document owner (user name)
                  type: string
                pagingDefinitions:
                  $ref: "#/components/schemas/PagingDefinition"
                sortByFields:
                  $ref: "#/components/schemas/SortDefinitions"
                startCreationDate:
                  format: date
                  type: string
                startUpdateDate:
                  format: date
                  type: string
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Search General Documents according to user criteria
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
components:
  parameters:
    headerCallbackURL:
      in: header
      name: X-Callback-URL
      required: false
      schema:
        type: string
    headerCorrelationID:
      description: ID of an asyncronous request
      in: header
      name: X-Correlation-ID
      required: true
      schema:
        type: string
    headerRequestID:
      in: header
      name: X-Request-ID
      required: false
      schema:
        type: string
    queryAccountBankId:
      description: Limit retrieve only to objects with account in the specified bank   (to be used with accountNbr and accountBranchId)
      in: query
      name: accountBankId
      required: false
      schema:
        format: int32
        type: integer
    queryAccountBranchId:
      description: Limit retrieve only to objects of the specified account branch (to be used with accountNbr and accountBankId)
      in: query
      name: accountBranchId
      required: false
      schema:
        format: int32
        type: integer
    queryAccountNbr:
      description: Limit retrieve only to objects of the specified account number (to be used with accountBranchId and accountBankId)
      in: query
      name: accountNbr
      required: false
      schema:
        format: int32
        type: integer
    queryAsNewVersion:
      description: Save updated document as new version
      in: query
      name: asNewVersion
      required: false
      schema:
        default: true
        type: boolean
    queryCleanupPolicy:
      description: "For file-based upload operations specifies policy for content deletion:\n  * always - always delete files after upload attempt, whether it succeeded or not\n  * never - always leave file as is\n  * onSuccess - delete file on success, leave file on failure"
      in: query
      name: cleanupPolicy
      required: false
      schema:
        enum:
          - always
          - never
          - onSuccess
        type: string
    queryCompleteCustomerIdCode:
      description: "Limit retrieve only to objects of customer with specified ID number (Teudat Zhut number, passport number, etc.)"
      in: query
      name: completeCustomerIdCode
      required: false
      schema:
        type: string
    queryCustomerId:
      description: Limit retrieve only to objects of customer with specified id  (sifrur lakoakh).
      in: query
      name: customerId
      required: false
      schema:
        format: int32
        type: integer
    queryCustomerType:
      description: "Limit retrieve only to objects of customer with customer ID type:\n  * 1 - תעודה ישראלית\n  * 4 - תעודה זרה\n  * 5 - תאגיד רשום\n  * 6 - תאגיד לא רשום\n  * 7 - קבוצה של לקחות\n  * 8 - מספר פנימי"
      in: query
      name: customerTypeCode
      required: false
      schema:
        $ref: "#/components/schemas/CustomerType"
    queryDocDataCheck:
      description: "Limit retrieve only to objects with specified properties (more general alternative to account* and customer* properties). Allows specify any number of accounts or  customers as well as other properties. The structure is same as DocCustomerData."
      in: query
      name: docDataCheck
      required: false
      schema:
        $ref: "#/components/schemas/DocCustomerData"
    queryErrorCode:
      description: error code
      in: query
      name: errorCode
      required: false
      schema:
        format: int32
        type: integer
    queryErrorDetails:
      description: description of error in handling of an asynchronous request
      in: query
      name: errorDetails
      required: false
      schema:
        type: string
    queryExecutorDetails:
      description: "Details on person/applications performing the operation, needs to be passwd when these details cannot be derived from authentication parameters (application level authentication is in place)."
      in: query
      name: executorDetails
      required: false
      schema:
        $ref: "#/components/schemas/executorDetails"
    queryFechType:
      description: "Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes"
      in: query
      name: fetchType
      required: false
      schema:
        $ref: "#/components/schemas/fetchType"
    queryMetadataSourceUrl:
      description: "Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL."
      in: query
      name: metadataSourceUrl
      required: false
      schema:
        format: uri
        type: string
    queryObjectTypes:
      description: list of object types to be retrieved If not set any object type will be retrieved
      in: query
      name: objectTypes
      required: false
      schema:
        items:
          enum:
            - BnhpCustomerDoc
            - BnhpGeneralDoc
            - BnhpDocFolder
          type: string
        type: array
    queryPagingDefinition:
      description: "Specifies range of data items to be retrived (for directory entries, items of search results)."
      example:
        maxResultCount: 25
        startIndex: 0
      in: query
      name: paging
      required: false
      schema:
        $ref: "#/components/schemas/PagingDefinition"
    queryResult:
      description: request handling result (callback parameter)
      in: query
      name: result
      required: true
      schema:
        enum:
          - OK TemporaryError FatalError GeneralError
        type: string
    queryRetrieveDeleted:
      description: Retreieve document even if it has been marked as canceled.
      in: query
      name: retrieveDeleted
      required: false
      schema:
        default: false
        type: boolean
    queryRetrieveFormat:
      description: "Format of content to be retrieved. May contain one of three mutually exclusive fields:\n  * dosExtension - file extension (like pdf or txt)\n  * mimeType - MIME type of content (like application/pdf or text/plain)\n  * docFormat - documentum type specifier (like pdf or msw12)\n  If specified content format not available and _fetchTypeI is _file_\n  the service will return error 406. For other fetch types the service\n  will return document metadata without contents.\\\n  If this parameter is not specified the service will try to use the\n  _Accept_ HTTP header to determine content format to be retrieved."
      in: query
      name: retrieveFormat
      required: false
      schema:
        $ref: "#/components/schemas/RetrieveFormat"
    queryRetrieveProfile:
      description: "Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply"
      in: query
      name: retrieveProfile
      required: false
      schema:
        type: string
    queryRetrieveSecondaryContent:
      description: Retreieve secondary content (PrintBoss job)
      in: query
      name: retrieveSecondaryContent
      required: false
      schema:
        default: false
        type: boolean
    queryVersionLabel:
      description: Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved.
      in: query
      name: versionLabel
      required: false
      schema:
        default: CURRENT
        type: string
  responses:
    Accepted202:
      content:
        application/json:
          schema:
            properties:
              correlationId:
                type: string
            required:
              - correlationId
            type: object
      description: Accepted
    DocIdDataResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/docIdData"
      description: Response with document Id and version labels
    DocumentsListResponse:
      content:
        application/json:
          schema:
            properties:
              estimatedTotal:
                format: int64
                type: integer
              objects:
                items:
                  $ref: "#/components/schemas/DocumentData"
                type: array
              startIndex:
                format: int64
                type: integer
            required:
              - objects
            type: object
      description: List of object entries
    Error400:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Bad Request
    Error401:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Unauthorized
    Error403:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Forbidden
    Error404:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Not Found
    Error405:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Method not allowed
    Error406:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Not acceptable
    Error409:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Conflict
    Error500:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Internal Server Error
    Error503:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Server Unavailable
    GetObjectResponse:
      content:
        "*/*":
          schema:
            format: binary
            type: string
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentData"
      description: Document metadata and/or content
    JsonResponse:
      content:
        application/json:
          schema:
            type: string
      description: Returns JSON content
  schemas:
    AsyncRequestStatus:
      properties:
        errorDetails:
          description: Detailed error message from the service
          type: string
        finished:
          description: When processing has finished
          format: date-time
          type: string
        output:
          description: request output
          format: byte
          type: string
        outputType:
          description: request output MIME type
          type: string
        received:
          description: When request has been received.
          format: date-time
          type: string
        replied:
          description: When asynchronous reply has been sent
          format: date-time
          type: string
        requestId:
          description: Asynchronous request id
          type: string
        requestStatus:
          description: Current request status
          enum:
            - waiting
            - started
            - success
            - failure
          type: string
        started:
          description: When processing started
          format: date-time
          type: string
        statusCode:
          description: Request HTTP status code
          format: int32
          type: integer
        statusMessage:
          description: Request HTTP status message
          type: string
      type: object
    BankAccount:
      properties:
        accountBankId:
          format: int32
          type: integer
        accountNbr:
          format: int32
          type: integer
        accountType:
          format: int32
          type: integer
        branchId:
          format: int32
          type: integer
        divisionId:
          format: int32
          type: integer
        specialHandlingCode:
          type: boolean
      type: object
    BnhpCustomerDocData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            docCustomerData:
              $ref: "#/components/schemas/DocCustomerData"
            docFiles:
              items:
                $ref: "#/components/schemas/DocFile"
              type: array
            extensions:
              items:
                discriminator:
                  propertyName: name
                oneOf:
                  - $ref: "#/components/schemas/bnhp_paper_doc"
                  - $ref: "#/components/schemas/bnhp_corporate_doc"
                  - $ref: "#/components/schemas/bnhp_division_business"
              type: array
          type: object
    BnhpDocFolderData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            customers:
              items:
                $ref: "#/components/schemas/Customer"
              type: array
            folderContent:
              items:
                $ref: "#/components/schemas/DocumentData"
              type: array
            isEmpty:
              readOnly: true
              type: boolean
          type: object
    BnhpGeneralDocData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            docFiles:
              items:
                $ref: "#/components/schemas/DocFile"
              type: array
            legacyDocumentEntryDttm:
              format: date-time
              type: string
            legacyDocumentId:
              type: string
            owner:
              type: string
          type: object
    Customer:
      properties:
        completeCustomerIdCode:
          type: string
        customerFullName:
          type: string
        customerId:
          format: int64
          type: integer
        customerIdDocTypeCode:
          $ref: "#/components/schemas/CustomerType"
        customerSerialNbr:
          format: int32
          type: integer
        occasionalCustomerInd:
          type: boolean
      type: object
    CustomerType:
      description: "Type of customer:\n  1 - תעודה ישראלית\n  4 - תעודה זרה\n  5 - תאגיד רשום\n  6 - תאגיד לא רשום\n  7 - קבוצה של לקחות\n  8 - מספר פנימי"
      format: int32
      type: integer
    DocCustomerData:
      example: {}
      properties:
        bankAccounts:
          items:
            $ref: "#/components/schemas/BankAccount"
          type: array
        customers:
          items:
            $ref: "#/components/schemas/Customer"
          type: array
        docDetails:
          $ref: "#/components/schemas/DocDetails"
        executorDetails:
          $ref: "#/components/schemas/executorDetails"
        pensionFund:
          $ref: "#/components/schemas/PensionFund"
      type: object
    DocDetails:
      properties:
        businessAreaCode:
          format: int32
          type: integer
        businessProcessId:
          format: int32
          type: integer
        businessSubAreaCode:
          format: int32
          type: integer
        channelId:
          format: int32
          type: integer
        concatenatedEventIds:
          items:
            type: string
          type: array
        currencyCode:
          format: int32
          type: integer
        dctmDocumentId:
          type: string
        docCompletenessCode:
          format: int32
          type: integer
        docDeliveryNum:
          format: int32
          type: integer
        documentEditionNbr:
          format: int32
          type: integer
        documentFormId:
          type: string
        documentGroupIds:
          items:
            type: string
          type: array
        legacyDocumentEntryDttm:
          format: date-time
          type: string
        legacyDocumentId:
          type: string
        ongoingOrHistoryCode:
          format: int32
          type: integer
        projectId:
          format: int32
          type: integer
        scanStatusCode:
          format: int32
          type: integer
        signatureStatusCode:
          format: int32
          type: integer
        systemCode:
          format: int32
          type: integer
        templateDataExistsInd:
          type: boolean
        transactionAmt:
          format: double
          type: number
      type: object
    DocFile:
      properties:
        attributes:
          additionalProperties: {}
          type: object
        checkSum:
          type: string
        classifier:
          description: "Content file classifier. Currently primary content has no classifier, secondary content (printboss job) has classifier \\\"secondary\\\". In the future other classifiers may be used."
          type: string
        docFormat:
          type: string
        docSize:
          format: int64
          type: integer
        docStream:
          format: byte
          type: string
        docURL:
          type: string
        dosExtension:
          type: string
        mimeType:
          type: string
      type: object
    DocPropertyExtension:
      discriminator:
        mapping:
          bnhp_corporate_doc: "#/components/schemas/bnhp_corporate_doc"
          bnhp_division_business: "#/components/schemas/bnhp_division_business"
          bnhp_paper_doc: "#/components/schemas/bnhp_paper_doc"
        propertyName: name
      properties:
        name:
          type: string
      required:
        - name
      type: object
    DocumentData:
      oneOf:
        - $ref: "#/components/schemas/BnhpCustomerDocData"
        - $ref: "#/components/schemas/BnhpGeneralDocData"
        - $ref: "#/components/schemas/BnhpDocFolderData"
    DocumentFormData:
      properties:
        documentData:
          $ref: "#/components/schemas/DocumentData"
          filename:
            items:
              format: binary
              type: string
            type: array
      type: object
    DocumentsPageCountList:
      items:
        properties:
          count:
            description: Number of pages in the document. 0 - if document has no pages or number of pages cannot be counted
            format: int32
            type: integer
          errorCode:
            format: int32
            type: integer
          errorDetails:
            type: string
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          status:
            enum:
              - OK TemporaryError FatalError GeneralError
            type: string
        required:
          - status
          - id
          - idType
          - count
        type: object
      type: array
    DocumentsSourceList:
      items:
        properties:
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          name:
            type: string
        required:
          - idType
          - id
        type: object
      type: array
    DocumentsSourceListWithDocDataCheck:
      items:
        properties:
          docDataCheck:
            $ref: "#/components/schemas/DocCustomerData"
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          name:
            type: string
        required:
          - idType
          - id
        type: object
      type: array
    DocumentsSourceURL:
      format: uri
      type: string
    DocumentsStatusList:
      items:
        properties:
          errorCode:
            format: int32
            type: integer
          errorDetails:
            type: string
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          status:
            enum:
              - OK TemporaryError FatalError GeneralError
            type: string
        required:
          - status
          - id
          - idType
        type: object
      type: array
    PagingDefinition:
      properties:
        maxResultCount:
          default: 25
          format: int32
          type: integer
        shouldReturnTotalResults:
          default: false
          type: boolean
        startIndex:
          default: 0
          format: int64
          type: integer
      type: object
    PensionFund:
      properties:
        pensionFundNbr:
          format: int32
          type: integer
        planholderNumber:
          format: int32
          type: integer
      type: object
    RetrieveFormat:
      example:
        dosExtension: pdf
      maxProperties: 1
      minProperties: 1
      properties:
        docFormat:
          type: string
        dosExtension:
          type: string
        mimeType:
          type: string
      type: object
    SortDefinitions:
      description: list of fields to sort by them
      items:
        properties:
          name:
            type: string
          order:
            type: string
        required:
          - name
        type: object
      type: array
    SysObjectData:
      discriminator:
        mapping:
          BnhpCustomerDoc: "#/components/schemas/BnhpCustomerDocData"
          BnhpDocFolder: "#/components/schemas/BnhpDocFolderData"
          BnhpGeneralDoc: "#/components/schemas/BnhpGeneralDocData"
        propertyName: objectType
      properties:
        creationTime:
          format: date-time
          readOnly: true
          type: string
        lastUpdateTime:
          format: date-time
          readOnly: true
          type: string
        objectName:
          description: Object name.
          type: string
        objectType:
          type: string
        paths:
          description: List of absolute paths of folders the object is linked to
          items:
            type: string
          type: array
        versionLabels:
          items:
            type: string
          type: array
      required:
        - objectType
      type: object
    bnhp_corporate_doc:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for corporate documents specific attributes
          properties:
            properties:
              properties:
                isPrivate:
                  type: boolean
                ownerName:
                  type: string
              type: object
          type: object
    bnhp_division_business:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for business division documents
          properties:
            properties:
              properties:
                car_number:
                  items:
                    format: int32
                    type: integer
                  type: array
                credit_type:
                  format: int32
                  type: integer
                deposit_number:
                  items:
                    format: int64
                    type: integer
                  type: array
                expiration_date:
                  format: date
                  type: string
                gush_number:
                  format: int32
                  type: integer
                helka_number:
                  format: int64
                  type: integer
                number_branch_confidence:
                  format: int32
                  type: integer
                number_confidence:
                  format: int32
                  type: integer
                number_deal:
                  format: int32
                  type: integer
                original_document:
                  format: int32
                  type: integer
                property_type:
                  format: int32
                  type: integer
                serial_nbr_loan_guarantee:
                  format: int32
                  type: integer
                tathelka_number:
                  format: int32
                  type: integer
              type: object
          type: object
    bnhp_paper_doc:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for scanned documents
          properties:
            properties:
              properties:
                archive_box_nbr:
                  format: int32
                  type: integer
                archive_date:
                  format: date-time
                  type: string
                archive_film_nbr:
                  format: int32
                  type: integer
                bank_archive_id:
                  format: int32
                  type: integer
                bar_code:
                  type: string
                box_batch_nbr:
                  format: int32
                  type: integer
                box_doc_serial_nbr:
                  format: int32
                  type: integer
                doc_location_code:
                  format: int32
                  type: integer
                document_page_cnt:
                  format: int32
                  type: integer
                film_frame_nbr:
                  format: int32
                  type: integer
                paper_destruction:
                  format: date-time
                  type: string
              type: object
          type: object
    docIdData:
      properties:
        dctmDocumentId:
          type: string
        versionLabels:
          items:
            type: string
          type: array
        versionNumber:
          type: string
      type: object
    documentId:
      type: string
    errorDetails:
      properties:
        errorCode:
          format: int32
          type: integer
        errorDetails:
          type: string
        errorType:
          enum:
            - temporary
            - validation
            - general
          type: string
      type: object
    executorDetails:
      description: Specifies human or software agent behind call to the service. It is mandatory when this information is not provided as part of JWT token from the API gateway (when service is used with with applicative system-level authentication  against API gateway. Not required when such information is provided. If provided the required fields  are ipAddress and executingEmpIdCode. When provided when operations that create/update documents is is suggested to provide executingBranchId and executingBankId because these attributes are used for filtering in document retrieval interfaces of Mesila.
      properties:
        bankolId:
          format: int32
          type: integer
        empIdDocumentTypeCode:
          $ref: "#/components/schemas/CustomerType"
        executingBankId:
          format: int32
          type: integer
        executingBranchId:
          format: int32
          type: integer
        executingEmpFullName:
          type: string
        executingEmpIdCode:
          type: string
        executingUserName:
          type: string
        instructionReceiveTypeCode:
          format: int32
          type: integer
        ipAddress:
          type: string
        terminalChannelId:
          format: int32
          type: integer
      type: object
    fetchType:
      default: content
      description: "Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes"
      enum:
        - full
        - content
        - meta
      type: string
    idType:
      description: "type of unique object id:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
      enum:
        - legacyDocumentId
        - dctmDocumentId
      type: string


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\api\SigVerifySanitizerApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.api;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.poalim.sigverifysanitizer.model.XmlSignatureVerifyRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

@Tag(name = "sig-verify-sanitize", description = "An api to verify a signed file and sanitize it")
public interface SigVerifySanitizerApi {
    @Operation(summary = "verify a signed file and sanitize it")
    @ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Successful operation"), @ApiResponse(responseCode = "409", description = "Conflict") })
    @PostMapping(value = "/xml/verification", produces = { "application/json" }, consumes = { "application/json" })
    @ResponseStatus(HttpStatus.OK)
    ResponseEntity<String> verifyXMLSignature(@RequestBody XmlSignatureVerifyRequest signedfile) throws Exception;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\Application.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class,
                              args);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\client\RestTemplateHelper.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.client;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.UnknownHttpStatusCodeException;

@Component
@RequiredArgsConstructor
@Slf4j
public class RestTemplateHelper {

    private static final String NO_DATA_FOUND = "No data found {}";

    private final RestTemplate restTemplate;

    private final ObjectMapper objectMapper;

    @Retryable(value = { UnknownHttpStatusCodeException.class }, backoff = @Backoff(delay = 500, multiplier = 2))
    public <T, R, S> S getEntity(Class<T> successClass, Class<R> failureClass, String url, HttpHeaders headers, Object... uriVariables) throws JsonProcessingException {
        ResponseEntity<String> responseEntity;
        try {
            responseEntity = restTemplate.exchange(url,
                                                   HttpMethod.GET,
                                                   new HttpEntity<>(headers),
                                                   String.class,
                                                   uriVariables);
        } catch (HttpClientErrorException ex) {
            responseEntity = new ResponseEntity<>(ex.getResponseBodyAsString(),
                                                  ex.getResponseHeaders(),
                                                  ex.getStatusCode());
        }
        JavaType successJavaType = objectMapper.getTypeFactory()
                                               .constructType(successClass);
        JavaType failureJavaType = null;
        if (failureClass != null) {
            failureJavaType = objectMapper.getTypeFactory()
                                          .constructType(failureClass);
        }
        return readValue(responseEntity,
                         successJavaType,
                         failureJavaType);
    }

    @Retryable(value = { UnknownHttpStatusCodeException.class }, backoff = @Backoff(delay = 500, multiplier = 2))
    public <T> List<T> getEntityList(Class<T> clazz, String url, HttpHeaders headers, Object... uriVariables) throws JsonProcessingException {
        try {
            ResponseEntity<String> responseEntity;
            if (uriVariables != null)
                responseEntity = restTemplate.exchange(url,
                                                       HttpMethod.GET,
                                                       new HttpEntity<>(headers),
                                                       String.class,
                                                       uriVariables);
            else
                responseEntity = restTemplate.exchange(url,
                                                       HttpMethod.GET,
                                                       new HttpEntity<>(headers),
                                                       String.class);
            CollectionType collectionType = objectMapper.getTypeFactory()
                                                        .constructCollectionType(List.class,
                                                                                 clazz);
            return readValue(responseEntity,
                             collectionType,
                             null);
        } catch (HttpClientErrorException exception) {
            if (exception.getStatusCode() == HttpStatus.NOT_FOUND) {
                log.info(NO_DATA_FOUND,
                         url);
            } else {
                log.error(exception.getMessage(),
                          exception);
            }
        }
        return Collections.emptyList();
    }

    @Retryable(value = { UnknownHttpStatusCodeException.class }, backoff = @Backoff(delay = 500, multiplier = 2))
    public <T, R, S, B> S postEntity(Class<T> successClass, Class<R> failureClass, String url, B body, HttpHeaders headers, Object... uriVariables) throws JsonProcessingException {
        HttpEntity<B> request = new HttpEntity<>(body,
                                                 headers);
        ResponseEntity<String> responseEntity = restTemplate.postForEntity(url,
                                                                           request,
                                                                           String.class,
                                                                           uriVariables);
        JavaType successJavaType = objectMapper.getTypeFactory()
                                               .constructType(successClass);
        JavaType failureJavaType = null;
        if (failureClass != null) {
            failureJavaType = objectMapper.getTypeFactory()
                                          .constructType(failureClass);
        }
        return readValue(responseEntity,
                         successJavaType,
                         failureJavaType);
    }

    @Retryable(value = { UnknownHttpStatusCodeException.class }, backoff = @Backoff(delay = 500, multiplier = 2))
    public <T, R> T putEntity(Class<T> clazz, String url, R body, HttpHeaders headers, Object... uriVariables) throws JsonProcessingException {
        HttpEntity<R> request = new HttpEntity<>(body,
                                                 headers);
        ResponseEntity<String> responseEntity;
        responseEntity = restTemplate.exchange(url,
                                               HttpMethod.PUT,
                                               request,
                                               String.class,
                                               uriVariables);
        JavaType javaType = objectMapper.getTypeFactory()
                                        .constructType(clazz);
        return readValue(responseEntity,
                         javaType,
                         null);
    }

    @Retryable(value = { UnknownHttpStatusCodeException.class }, backoff = @Backoff(delay = 500, multiplier = 2))
    public <T> T delete(Class<T> clazz, String url, HttpHeaders headers, Object... uriVariables) throws JsonProcessingException {
        try {
            ResponseEntity<String> responseEntity = restTemplate.exchange(url,
                                                                          HttpMethod.DELETE,
                                                                          new HttpEntity<>(headers),
                                                                          String.class,
                                                                          uriVariables);
            JavaType javaType = objectMapper.getTypeFactory()
                                            .constructType(clazz);
            return readValue(responseEntity,
                             javaType,
                             null);
        } catch (HttpClientErrorException exception) {
            if (exception.getStatusCode() == HttpStatus.NOT_FOUND) {
                log.info(NO_DATA_FOUND,
                         url);
            } else {
                log.error(exception.getMessage(),
                          exception);
            }
        }
        return null;
    }

    private <S> S readValue(ResponseEntity<String> responseEntity, JavaType successJavaType, JavaType failureJavaType) throws JsonProcessingException {
        S result = null;
        int statusCode = responseEntity.getStatusCodeValue();
        log.debug("statusCode = " + statusCode);
        if (responseEntity.hasBody()) {
            log.debug("Response body: " + responseEntity.getBody());
        }
        if (responseEntity.getStatusCode() == HttpStatus.OK || responseEntity.getStatusCode() == HttpStatus.CREATED) {
            if (successJavaType.getRawClass() == String.class) {
                // TODO: check how to make it generic with objectMapper
                return (S) responseEntity.getBody();
            }
            result = objectMapper.readValue(Objects.requireNonNull(responseEntity.getBody()),
                                            successJavaType);
        } else if (responseEntity.getStatusCode() == HttpStatus.NO_CONTENT) {
            log.info("No content found {}",
                     responseEntity.getStatusCode());
        } else {
            log.warn(NO_DATA_FOUND,
                     responseEntity.getStatusCode());
            if (failureJavaType != null) {
                result = objectMapper.readValue(Objects.requireNonNull(responseEntity.getBody()),
                                                failureJavaType);
            }
        }
        return result;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\config\HealthCheck.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.config;

import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.stereotype.Component;

@Component
public class HealthCheck implements HealthIndicator {

    @Override
    public Health health() {
        int errorCode = check();
        if (errorCode != 0) {
            return Health.down()
                         .withDetail("Error code",
                                     errorCode)
                         .build();
        }
        return Health.up()
                     .build();
    }

    private int check() {
        // Our logic to check health
        return 0;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\config\OpenApiConfig.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.config;

import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Paths;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.servers.Server;
import java.util.ArrayList;
import java.util.List;
import org.springdoc.core.GroupedOpenApi;
import org.springdoc.core.customizers.OpenApiCustomiser;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {

    public static final String MAIN_GROUP = "000 - application";

    @Value("${server.servlet.context-path}")
    private String basePath;

    @Bean
    public GroupedOpenApi v1OpenApi1(@Qualifier("v1OpenApiCustomiser") OpenApiCustomiser openApiCustomiser) {
        String[] paths = { "/v1/**" };
        return GroupedOpenApi.builder()
                             .group("v1")
                             .pathsToMatch(paths)
                             .addOpenApiCustomiser(openApiCustomiser)
                             .build();
    }

    @Bean
    public GroupedOpenApi mainGroup() {
        String[] paths = { DEFAULT_PATH_SEPARATOR + "**" };
        return GroupedOpenApi.builder()
                             .group(MAIN_GROUP)
                             .pathsToMatch(paths)
                             .build();
    }

    @Bean
    public OpenApiCustomiser v1OpenApiCustomiser() {
        return openApi -> createOpenApiCustomiser(openApi,
                                                  "v1");
    }

    private void createOpenApiCustomiser(OpenAPI openApi, String version) {
        openApi.setOpenapi("3.0.0");
        openApi.paths(removeSubstringVersionFromPath(openApi.getPaths(),
                                                     version));
        openApi.setServers(getServerForApi(basePath + "/" + version));
        openApi.info(new Info().title("Swagger Sample - OpenAPI 3.0").version(version).description("Swagger Sample - OpenAPI 3.0"));
    }

    private List<Server> getServerForApi(String serverUrl) {
        List<Server> serversList = new ArrayList<>();
        Server server = new Server();
        server.setUrl(serverUrl);
        serversList.add(server);
        return serversList;
    }

    private Paths removeSubstringVersionFromPath(Paths openApiPaths, String version) {
        Paths paths = new Paths();
        openApiPaths.forEach((s, pathItem) -> paths.put(s.replaceAll("/" + version,
                                                                     ""),
                                                        pathItem));
        return paths;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\config\RestTemplateConfig.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.config;

import com.poalim.sigverifysanitizer.logging.client.RestTemplateCurlPrinterInterceptor;
import java.time.Duration;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

@Configuration
@RequiredArgsConstructor
public class RestTemplateConfig {

    private final RestTemplateCurlPrinterInterceptor restTemplateCurlPrinterInterceptor;

    @Value("${application.rest-connection-timeout-sec}")
    private long restConnectionTimeoutSec;

    @Value("${application.rest-read-timeout-sec}")
    private long restReadTimeoutSec;

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {
        RestTemplate restTemplate = restTemplateBuilder.setConnectTimeout(Duration.ofSeconds(this.restConnectionTimeoutSec))
                                                       .setReadTimeout(Duration.ofSeconds(this.restReadTimeoutSec))
                                                       .interceptors(this.restTemplateCurlPrinterInterceptor)
                                                       .build();
        ClientHttpRequestFactory factory = new BufferingClientHttpRequestFactory(new SimpleClientHttpRequestFactory());
        restTemplate.setRequestFactory(factory);
        return restTemplate;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\controller\ErrorController.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.controller;

import com.poalim.msa.errorhandling.exception.ApiBaseException;
import com.poalim.msa.errorhandling.model.ApiStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ErrorController {

    @GetMapping("/exception-example")
    public void exceptionExample() {
        throw ApiBaseException.exceptionBuilder()
                              .message("testing message")
                              .apiStatus(ApiStatus.DEV_TESTING_ERROR)
                              .moreInfo("test")
                              .severity("error")
                              .developerMessage("Dev message")
                              .build();
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\controller\HomeController.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.controller;

import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
import static org.springframework.web.servlet.view.UrlBasedViewResolver.REDIRECT_URL_PREFIX;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @Value(SWAGGER_UI_PATH)
    private String swaggerUiPath;

    @GetMapping(DEFAULT_PATH_SEPARATOR)
    public String index() {
        return REDIRECT_URL_PREFIX + swaggerUiPath;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\controller\v1\SigVerifySanitizerController.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.controller.v1;
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateNotYetValidException;
import java.security.cert.CertificateRevokedException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.poalim.sigverifysanitizer.api.SigVerifySanitizerApi;
import com.poalim.sigverifysanitizer.documentum.proxy.DocumentumProxy;
import com.poalim.sigverifysanitizer.model.XmlSignatureVerifyRequest;
import com.poalim.sigverifysanitizer.signature.verifier.XMLSignatureVerifier;

@RestController
@RequestMapping("v1")
public class SigVerifySanitizerController implements SigVerifySanitizerApi{
	@Override
	public ResponseEntity<String> verifyXMLSignature(XmlSignatureVerifyRequest signedfile) throws Exception{
		
		Boolean isRetVal = true;
		try {
//			XMLSignatureVerifier sigVerfifier = new XMLSignatureVerifier();
//			Boolean isRetVal = sigVerfifier.verifyXMLSignature(signedfile.getBase64FileContent());
			
		DocumentumProxy.insertDocument(signedfile);
		
		return new ResponseEntity<String>(Boolean.toString(isRetVal)
				, HttpStatus.OK);
		}
		//TODO: add XMLSignatureException in case of failed validation
//		catch(CertificateRevokedException | CertificateExpiredException | CertificateNotYetValidException ex) {
		catch(Exception  ex) {
			ex.printStackTrace();
			return new ResponseEntity<String>(ex.getMessage(), HttpStatus.NON_AUTHORITATIVE_INFORMATION);
		}
	}
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\api\AsynchronousRequestHandlingApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.api;

import com.poalim.sigverifysanitizer.documentum.ApiClient;

import com.poalim.sigverifysanitizer.documentum.model.AsyncRequestStatus;
import com.poalim.sigverifysanitizer.documentum.model.ErrorDetails;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.api.AsynchronousRequestHandlingApi")
public class AsynchronousRequestHandlingApi {
    private ApiClient apiClient;

    public AsynchronousRequestHandlingApi() {
        this(new ApiClient());
    }

    @Autowired
    public AsynchronousRequestHandlingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Get status of an asynchronous request
     * 
     * <p><b>200</b> - OK
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param requestId is of an asyncronous request (required)
     * @param returnOutput If need to return request output. default is false (optional)
     * @return AsyncRequestStatus
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AsyncRequestStatus getAsyncRequestStatus(String requestId, Boolean returnOutput) throws RestClientException {
        return getAsyncRequestStatusWithHttpInfo(requestId, returnOutput).getBody();
    }

    /**
     * Get status of an asynchronous request
     * 
     * <p><b>200</b> - OK
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param requestId is of an asyncronous request (required)
     * @param returnOutput If need to return request output. default is false (optional)
     * @return ResponseEntity&lt;AsyncRequestStatus&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AsyncRequestStatus> getAsyncRequestStatusWithHttpInfo(String requestId, Boolean returnOutput) throws RestClientException {
        Object postBody = null;
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'requestId' when calling getAsyncRequestStatus");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("requestId", requestId);
        String path = apiClient.expandPath("/requests/async/{requestId}/status", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "returnOutput", returnOutput));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = {  };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<AsyncRequestStatus> returnType = new ParameterizedTypeReference<AsyncRequestStatus>() {};
        return apiClient.invokeAPI(path, HttpMethod.GET, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\api\InfrastructuralServicesObjectOperationsByIdApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.api;

import java.io.File;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;

import com.poalim.sigverifysanitizer.documentum.ApiClient;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocIdData;
import com.poalim.sigverifysanitizer.documentum.model.DocumentData;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.FetchType;
import com.poalim.sigverifysanitizer.documentum.model.IdType;
import com.poalim.sigverifysanitizer.documentum.model.PagingDefinition;
import com.poalim.sigverifysanitizer.documentum.model.RetrieveFormat;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.api.InfrastructuralServicesObjectOperationsByIdApi")
public class InfrastructuralServicesObjectOperationsByIdApi {
    private ApiClient apiClient;

    public InfrastructuralServicesObjectOperationsByIdApi() {
        this(new ApiClient());
    }

    @Autowired
    public InfrastructuralServicesObjectOperationsByIdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Cancel document by Id
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType type of identifier (required)
     * @param documentId Unique document identifier (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param executorDetails  (optional)
     * @param recursively delete dependent objects (optional)
     * @return DocIdData
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocIdData cancelObjectById(IdType idType, String documentId, String versionLabel, ExecutorDetails executorDetails, Boolean recursively) throws RestClientException {
        return cancelObjectByIdWithHttpInfo(idType, documentId, versionLabel, executorDetails, recursively).getBody();
    }

    /**
     * Cancel document by Id
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType type of identifier (required)
     * @param documentId Unique document identifier (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param executorDetails  (optional)
     * @param recursively delete dependent objects (optional)
     * @return ResponseEntity&lt;DocIdData&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocIdData> cancelObjectByIdWithHttpInfo(IdType idType, String documentId, String versionLabel, ExecutorDetails executorDetails, Boolean recursively) throws RestClientException {
        Object postBody = null;
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'idType' when calling cancelObjectById");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentId' when calling cancelObjectById");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("idType", idType);
        uriVariables.put("documentId", documentId);
        String path = apiClient.expandPath("/objects/{idType}/{documentId}", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "versionLabel", versionLabel));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "executorDetails", executorDetails));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "recursively", recursively));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = {  };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocIdData> returnType = new ParameterizedTypeReference<DocIdData>() {};
        return apiClient.invokeAPI(path, HttpMethod.DELETE, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Create object with given ID in repository.
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers. (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @return DocIdData
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocIdData createDocumentById(IdType idType, String documentId, DocumentData documentData, URI metadataSourceUrl, String cleanupPolicy) throws RestClientException {
        return createDocumentByIdWithHttpInfo(idType, documentId, documentData, metadataSourceUrl, cleanupPolicy).getBody();
    }

    /**
     * Create object with given ID in repository.
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers. (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @return ResponseEntity&lt;DocIdData&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocIdData> createDocumentByIdWithHttpInfo(IdType idType, String documentId, DocumentData documentData, URI metadataSourceUrl, String cleanupPolicy) throws RestClientException {
        Object postBody = documentData;
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'idType' when calling createDocumentById");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentId' when calling createDocumentById");
        }
        
        // verify the required parameter 'documentData' is set
        if (documentData == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentData' when calling createDocumentById");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("idType", idType);
        uriVariables.put("documentId", documentId);
        String path = apiClient.expandPath("/objects/{idType}/{documentId}", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "metadataSourceUrl", metadataSourceUrl));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "cleanupPolicy", cleanupPolicy));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json", "multipart/form-data"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocIdData> returnType = new ParameterizedTypeReference<DocIdData>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Modify document properties by specifying it by unique ID
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType type of identifier (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @return DocIdData
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocIdData patchDocumentById(IdType idType, String documentId, DocumentData documentData, String versionLabel, URI metadataSourceUrl, String cleanupPolicy) throws RestClientException {
        return patchDocumentByIdWithHttpInfo(idType, documentId, documentData, versionLabel, metadataSourceUrl, cleanupPolicy).getBody();
    }

    /**
     * Modify document properties by specifying it by unique ID
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType type of identifier (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @return ResponseEntity&lt;DocIdData&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocIdData> patchDocumentByIdWithHttpInfo(IdType idType, String documentId, DocumentData documentData, String versionLabel, URI metadataSourceUrl, String cleanupPolicy) throws RestClientException {
        Object postBody = documentData;
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'idType' when calling patchDocumentById");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentId' when calling patchDocumentById");
        }
        
        // verify the required parameter 'documentData' is set
        if (documentData == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentData' when calling patchDocumentById");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("idType", idType);
        uriVariables.put("documentId", documentId);
        String path = apiClient.expandPath("/objects/{idType}/{documentId}", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "versionLabel", versionLabel));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "metadataSourceUrl", metadataSourceUrl));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "cleanupPolicy", cleanupPolicy));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json", "multipart/form-data"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocIdData> returnType = new ParameterizedTypeReference<DocIdData>() {};
        return apiClient.invokeAPI(path, HttpMethod.PATCH, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Create or update document by Unique Id
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of unique object identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.   * legacyDocumentId - external, created by service user   * dctmDocumentId - internal, created automatically by service (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param asNewVersion Save updated document as new version (optional, default to true)
     * @return DocIdData
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocIdData putDocumentById(IdType idType, String documentId, DocumentData documentData, URI metadataSourceUrl, String cleanupPolicy, String versionLabel, Boolean asNewVersion) throws RestClientException {
        return putDocumentByIdWithHttpInfo(idType, documentId, documentData, metadataSourceUrl, cleanupPolicy, versionLabel, asNewVersion).getBody();
    }

    /**
     * Create or update document by Unique Id
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of unique object identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.   * legacyDocumentId - external, created by service user   * dctmDocumentId - internal, created automatically by service (required)
     * @param documentId Unique document identifier (required)
     * @param documentData Document metadata (required)
     * @param metadataSourceUrl Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL. (optional)
     * @param cleanupPolicy For file-based upload operations specifies policy for content deletion:   * always - always delete files after upload attempt, whether it succeeded or not   * never - always leave file as is   * onSuccess - delete file on success, leave file on failure (optional)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param asNewVersion Save updated document as new version (optional, default to true)
     * @return ResponseEntity&lt;DocIdData&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocIdData> putDocumentByIdWithHttpInfo(IdType idType, String documentId, DocumentData documentData, URI metadataSourceUrl, String cleanupPolicy, String versionLabel, Boolean asNewVersion) throws RestClientException {
        Object postBody = documentData;
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'idType' when calling putDocumentById");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentId' when calling putDocumentById");
        }
        
        // verify the required parameter 'documentData' is set
        if (documentData == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentData' when calling putDocumentById");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("idType", idType);
        uriVariables.put("documentId", documentId);
        String path = apiClient.expandPath("/objects/{idType}/{documentId}", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "metadataSourceUrl", metadataSourceUrl));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "cleanupPolicy", cleanupPolicy));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "versionLabel", versionLabel));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "asNewVersion", asNewVersion));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json", "multipart/form-data"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocIdData> returnType = new ParameterizedTypeReference<DocIdData>() {};
        return apiClient.invokeAPI(path, HttpMethod.PUT, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Retrieve Document By Unique Identifier
     * 
     * <p><b>200</b> - Document metadata and/or content
     * <p><b>203</b> - Document metadata and/or content
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of unique object identifier:   * legacyDocumentId - external, created by service user   * dctmDocumentId - internal, created automatically by service (required)
     * @param documentId Unique document identifier (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param retrieveFormat Format of content to be retrieved. May contain one of three mutually exclusive fields:   * dosExtension - file extension (like pdf or txt)   * mimeType - MIME type of content (like application/pdf or text/plain)   * docFormat - documentum type specifier (like pdf or msw12)   If specified content format not available and _fetchTypeI is _file_   the service will return error 406. For other fetch types the service   will return document metadata without contents.\\   If this parameter is not specified the service will try to use the   _Accept_ HTTP header to determine content format to be retrieved. (optional)
     * @param fetchType Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.   * content - binary content for documents, list of entries for folders   * meta - object metadata (attributes)   * full  - both content and attributes (optional)
     * @param retrieveProfile Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply (optional)
     * @param retrieveDeleted Retreieve document even if it has been marked as canceled. (optional, default to false)
     * @param executorDetails Details on person/applications performing the operation, needs to be passwd when these details cannot be derived from authentication parameters (application level authentication is in place). (optional)
     * @param objectTypes list of object types to be retrieved If not set any object type will be retrieved (optional)
     * @param customerTypeCode Limit retrieve only to objects of customer with customer ID type:   * 1 - תעודה ישראלית   * 4 - תעודה זרה   * 5 - תאגיד רשום   * 6 - תאגיד לא רשום   * 7 - קבוצה של לקחות   * 8 - מספר פנימי (optional)
     * @param completeCustomerIdCode Limit retrieve only to objects of customer with specified ID number (Teudat Zhut number, passport number, etc.) (optional)
     * @param customerId Limit retrieve only to objects of customer with specified id  (sifrur lakoakh). (optional)
     * @param accountBankId Limit retrieve only to objects with account in the specified bank   (to be used with accountNbr and accountBranchId) (optional)
     * @param accountBranchId Limit retrieve only to objects of the specified account branch (to be used with accountNbr and accountBankId) (optional)
     * @param accountNbr Limit retrieve only to objects of the specified account number (to be used with accountBranchId and accountBankId) (optional)
     * @param docDataCheck Limit retrieve only to objects with specified properties (more general alternative to account* and customer* properties). Allows specify any number of accounts or  customers as well as other properties. The structure is same as DocCustomerData. (optional)
     * @param paging Specifies range of data items to be retrived (for directory entries, items of search results). (optional)
     * @param retrieveSecondaryContent Retreieve secondary content (PrintBoss job) (optional, default to false)
     * @return File
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public File retrieveObjectById(IdType idType, String documentId, String versionLabel, RetrieveFormat retrieveFormat, FetchType fetchType, String retrieveProfile, Boolean retrieveDeleted, ExecutorDetails executorDetails, List<String> objectTypes, Integer customerTypeCode, String completeCustomerIdCode, Integer customerId, Integer accountBankId, Integer accountBranchId, Integer accountNbr, DocCustomerData docDataCheck, PagingDefinition paging, Boolean retrieveSecondaryContent) throws RestClientException {
        return retrieveObjectByIdWithHttpInfo(idType, documentId, versionLabel, retrieveFormat, fetchType, retrieveProfile, retrieveDeleted, executorDetails, objectTypes, customerTypeCode, completeCustomerIdCode, customerId, accountBankId, accountBranchId, accountNbr, docDataCheck, paging, retrieveSecondaryContent).getBody();
    }

    /**
     * Retrieve Document By Unique Identifier
     * 
     * <p><b>200</b> - Document metadata and/or content
     * <p><b>203</b> - Document metadata and/or content
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param idType Type of unique object identifier:   * legacyDocumentId - external, created by service user   * dctmDocumentId - internal, created automatically by service (required)
     * @param documentId Unique document identifier (required)
     * @param versionLabel Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved. (optional, default to CURRENT)
     * @param retrieveFormat Format of content to be retrieved. May contain one of three mutually exclusive fields:   * dosExtension - file extension (like pdf or txt)   * mimeType - MIME type of content (like application/pdf or text/plain)   * docFormat - documentum type specifier (like pdf or msw12)   If specified content format not available and _fetchTypeI is _file_   the service will return error 406. For other fetch types the service   will return document metadata without contents.\\   If this parameter is not specified the service will try to use the   _Accept_ HTTP header to determine content format to be retrieved. (optional)
     * @param fetchType Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.   * content - binary content for documents, list of entries for folders   * meta - object metadata (attributes)   * full  - both content and attributes (optional)
     * @param retrieveProfile Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply (optional)
     * @param retrieveDeleted Retreieve document even if it has been marked as canceled. (optional, default to false)
     * @param executorDetails Details on person/applications performing the operation, needs to be passwd when these details cannot be derived from authentication parameters (application level authentication is in place). (optional)
     * @param objectTypes list of object types to be retrieved If not set any object type will be retrieved (optional)
     * @param customerTypeCode Limit retrieve only to objects of customer with customer ID type:   * 1 - תעודה ישראלית   * 4 - תעודה זרה   * 5 - תאגיד רשום   * 6 - תאגיד לא רשום   * 7 - קבוצה של לקחות   * 8 - מספר פנימי (optional)
     * @param completeCustomerIdCode Limit retrieve only to objects of customer with specified ID number (Teudat Zhut number, passport number, etc.) (optional)
     * @param customerId Limit retrieve only to objects of customer with specified id  (sifrur lakoakh). (optional)
     * @param accountBankId Limit retrieve only to objects with account in the specified bank   (to be used with accountNbr and accountBranchId) (optional)
     * @param accountBranchId Limit retrieve only to objects of the specified account branch (to be used with accountNbr and accountBankId) (optional)
     * @param accountNbr Limit retrieve only to objects of the specified account number (to be used with accountBranchId and accountBankId) (optional)
     * @param docDataCheck Limit retrieve only to objects with specified properties (more general alternative to account* and customer* properties). Allows specify any number of accounts or  customers as well as other properties. The structure is same as DocCustomerData. (optional)
     * @param paging Specifies range of data items to be retrived (for directory entries, items of search results). (optional)
     * @param retrieveSecondaryContent Retreieve secondary content (PrintBoss job) (optional, default to false)
     * @return ResponseEntity&lt;File&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<File> retrieveObjectByIdWithHttpInfo(IdType idType, String documentId, String versionLabel, RetrieveFormat retrieveFormat, FetchType fetchType, String retrieveProfile, Boolean retrieveDeleted, ExecutorDetails executorDetails, List<String> objectTypes, Integer customerTypeCode, String completeCustomerIdCode, Integer customerId, Integer accountBankId, Integer accountBranchId, Integer accountNbr, DocCustomerData docDataCheck, PagingDefinition paging, Boolean retrieveSecondaryContent) throws RestClientException {
        Object postBody = null;
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'idType' when calling retrieveObjectById");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'documentId' when calling retrieveObjectById");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("idType", idType);
        uriVariables.put("documentId", documentId);
        String path = apiClient.expandPath("/objects/{idType}/{documentId}", uriVariables);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "versionLabel", versionLabel));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "retrieveFormat", retrieveFormat));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "fetchType", fetchType));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "retrieveProfile", retrieveProfile));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "retrieveDeleted", retrieveDeleted));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "executorDetails", executorDetails));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("multi".toUpperCase(Locale.ROOT)), "objectTypes", objectTypes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "customerTypeCode", customerTypeCode));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "completeCustomerIdCode", completeCustomerIdCode));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "customerId", customerId));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "accountBankId", accountBankId));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "accountBranchId", accountBranchId));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "accountNbr", accountNbr));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "docDataCheck", docDataCheck));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "paging", paging));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "retrieveSecondaryContent", retrieveSecondaryContent));

        final String[] localVarAccepts = { 
            "*/*", "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = {  };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<File> returnType = new ParameterizedTypeReference<File>() {};
        return apiClient.invokeAPI(path, HttpMethod.GET, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\api\RequestsApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.api;

import com.poalim.sigverifysanitizer.documentum.ApiClient;

import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.DocIdData;
import com.poalim.sigverifysanitizer.documentum.model.ErrorDetails;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject1;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject2;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject3;
import com.poalim.sigverifysanitizer.documentum.model.InlineResponse202;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.api.RequestsApi")
public class RequestsApi {
    private ApiClient apiClient;

    public RequestsApi() {
        this(new ApiClient());
    }

    @Autowired
    public RequestsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Append pages to a pdf document and save as new document version
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject  (required)
     * @param xRequestID  (optional)
     * @return DocIdData
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocIdData appendDocByParam(InlineObject inlineObject, String xRequestID) throws RestClientException {
        return appendDocByParamWithHttpInfo(inlineObject, xRequestID).getBody();
    }

    /**
     * Append pages to a pdf document and save as new document version
     * 
     * <p><b>200</b> - Response with document Id and version labels
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject  (required)
     * @param xRequestID  (optional)
     * @return ResponseEntity&lt;DocIdData&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocIdData> appendDocByParamWithHttpInfo(InlineObject inlineObject, String xRequestID) throws RestClientException {
        Object postBody = inlineObject;
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject' when calling appendDocByParam");
        }
        
        String path = apiClient.expandPath("/request/AppendDocByParam", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        if (xRequestID != null)
        headerParams.add("X-Request-ID", apiClient.parameterToString(xRequestID));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocIdData> returnType = new ParameterizedTypeReference<DocIdData>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Count pages in a set of documents
     * 
     * <p><b>200</b> - OK
     * <p><b>202</b> - Accepted
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject2  (required)
     * @param xRequestID  (optional)
     * @param xCallbackURL  (optional)
     * @return List&lt;Object&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public List<Object> countDocumentsPages(InlineObject2 inlineObject2, String xRequestID, String xCallbackURL) throws RestClientException {
        return countDocumentsPagesWithHttpInfo(inlineObject2, xRequestID, xCallbackURL).getBody();
    }

    /**
     * Count pages in a set of documents
     * 
     * <p><b>200</b> - OK
     * <p><b>202</b> - Accepted
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject2  (required)
     * @param xRequestID  (optional)
     * @param xCallbackURL  (optional)
     * @return ResponseEntity&lt;List&lt;Object&gt;&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<List<Object>> countDocumentsPagesWithHttpInfo(InlineObject2 inlineObject2, String xRequestID, String xCallbackURL) throws RestClientException {
        Object postBody = inlineObject2;
        
        // verify the required parameter 'inlineObject2' is set
        if (inlineObject2 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject2' when calling countDocumentsPages");
        }
        
        String path = apiClient.expandPath("/request/countDocumentsPages", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        if (xRequestID != null)
        headerParams.add("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xCallbackURL != null)
        headerParams.add("X-Callback-URL", apiClient.parameterToString(xCallbackURL));

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<List<Object>> returnType = new ParameterizedTypeReference<List<Object>>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Concatenate given documents and retrieve resulting file
     * 
     * <p><b>200</b> - OK
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject1  (required)
     * @param xRequestID  (optional)
     * @return DocFile
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public DocFile getConcatenatedDocsByLegacyDocIds(InlineObject1 inlineObject1, String xRequestID) throws RestClientException {
        return getConcatenatedDocsByLegacyDocIdsWithHttpInfo(inlineObject1, xRequestID).getBody();
    }

    /**
     * Concatenate given documents and retrieve resulting file
     * 
     * <p><b>200</b> - OK
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject1  (required)
     * @param xRequestID  (optional)
     * @return ResponseEntity&lt;DocFile&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<DocFile> getConcatenatedDocsByLegacyDocIdsWithHttpInfo(InlineObject1 inlineObject1, String xRequestID) throws RestClientException {
        Object postBody = inlineObject1;
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject1' when calling getConcatenatedDocsByLegacyDocIds");
        }
        
        String path = apiClient.expandPath("/request/ConcatenateDocsByParams", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        if (xRequestID != null)
        headerParams.add("X-Request-ID", apiClient.parameterToString(xRequestID));

        final String[] localVarAccepts = { 
            "application/json", "application/pdf", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<DocFile> returnType = new ParameterizedTypeReference<DocFile>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Retrieve number of documents in a zip archive
     * 
     * <p><b>200</b> - OK
     * <p><b>202</b> - Accepted
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject3  (required)
     * @param xRequestID  (optional)
     * @param xCallbackURL  (optional)
     * @return List&lt;Object&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public List<Object> retrieveDocumentsByZip(InlineObject3 inlineObject3, String xRequestID, String xCallbackURL) throws RestClientException {
        return retrieveDocumentsByZipWithHttpInfo(inlineObject3, xRequestID, xCallbackURL).getBody();
    }

    /**
     * Retrieve number of documents in a zip archive
     * 
     * <p><b>200</b> - OK
     * <p><b>202</b> - Accepted
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>409</b> - Conflict
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject3  (required)
     * @param xRequestID  (optional)
     * @param xCallbackURL  (optional)
     * @return ResponseEntity&lt;List&lt;Object&gt;&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<List<Object>> retrieveDocumentsByZipWithHttpInfo(InlineObject3 inlineObject3, String xRequestID, String xCallbackURL) throws RestClientException {
        Object postBody = inlineObject3;
        
        // verify the required parameter 'inlineObject3' is set
        if (inlineObject3 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject3' when calling retrieveDocumentsByZip");
        }
        
        String path = apiClient.expandPath("/request/retrieveDocumentsByZip", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        if (xRequestID != null)
        headerParams.add("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xCallbackURL != null)
        headerParams.add("X-Callback-URL", apiClient.parameterToString(xCallbackURL));

        final String[] localVarAccepts = { 
            "application/json", "application/zip", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<List<Object>> returnType = new ParameterizedTypeReference<List<Object>>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\api\SearchServicesApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.api;

import com.poalim.sigverifysanitizer.documentum.ApiClient;

import com.poalim.sigverifysanitizer.documentum.model.ErrorDetails;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject4;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject5;
import com.poalim.sigverifysanitizer.documentum.model.InlineObject6;
import com.poalim.sigverifysanitizer.documentum.model.InlineResponse200;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.api.SearchServicesApi")
public class SearchServicesApi {
    private ApiClient apiClient;

    public SearchServicesApi() {
        this(new ApiClient());
    }

    @Autowired
    public SearchServicesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Retrieve list of Customer Documents according to user specified criteria
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject4  (required)
     * @return InlineResponse200
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public InlineResponse200 searchCustomerDocuments(InlineObject4 inlineObject4) throws RestClientException {
        return searchCustomerDocumentsWithHttpInfo(inlineObject4).getBody();
    }

    /**
     * Retrieve list of Customer Documents according to user specified criteria
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject4  (required)
     * @return ResponseEntity&lt;InlineResponse200&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<InlineResponse200> searchCustomerDocumentsWithHttpInfo(InlineObject4 inlineObject4) throws RestClientException {
        Object postBody = inlineObject4;
        
        // verify the required parameter 'inlineObject4' is set
        if (inlineObject4 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject4' when calling searchCustomerDocuments");
        }
        
        String path = apiClient.expandPath("/search/searchCustomerDocuments", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<InlineResponse200> returnType = new ParameterizedTypeReference<InlineResponse200>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Retrieve list of documents with the specified identifiers
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject5  (required)
     * @return InlineResponse200
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public InlineResponse200 searchDocumentsByIds(InlineObject5 inlineObject5) throws RestClientException {
        return searchDocumentsByIdsWithHttpInfo(inlineObject5).getBody();
    }

    /**
     * Retrieve list of documents with the specified identifiers
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject5  (required)
     * @return ResponseEntity&lt;InlineResponse200&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<InlineResponse200> searchDocumentsByIdsWithHttpInfo(InlineObject5 inlineObject5) throws RestClientException {
        Object postBody = inlineObject5;
        
        // verify the required parameter 'inlineObject5' is set
        if (inlineObject5 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject5' when calling searchDocumentsByIds");
        }
        
        String path = apiClient.expandPath("/search/searchDocumentsByIds", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<InlineResponse200> returnType = new ParameterizedTypeReference<InlineResponse200>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
    /**
     * Search General Documents according to user criteria
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject6  (required)
     * @return InlineResponse200
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public InlineResponse200 searchGeneralDocuments(InlineObject6 inlineObject6) throws RestClientException {
        return searchGeneralDocumentsWithHttpInfo(inlineObject6).getBody();
    }

    /**
     * Search General Documents according to user criteria
     * 
     * <p><b>200</b> - List of object entries
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @param inlineObject6  (required)
     * @return ResponseEntity&lt;InlineResponse200&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<InlineResponse200> searchGeneralDocumentsWithHttpInfo(InlineObject6 inlineObject6) throws RestClientException {
        Object postBody = inlineObject6;
        
        // verify the required parameter 'inlineObject6' is set
        if (inlineObject6 == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'inlineObject6' when calling searchGeneralDocuments");
        }
        
        String path = apiClient.expandPath("/search/searchGeneralDocuments", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = { 
            "application/json"
         };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<InlineResponse200> returnType = new ParameterizedTypeReference<InlineResponse200>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\api\TroubleshootingAndDebuggingApi.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.api;

import com.poalim.sigverifysanitizer.documentum.ApiClient;

import com.poalim.sigverifysanitizer.documentum.model.ErrorDetails;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.api.TroubleshootingAndDebuggingApi")
public class TroubleshootingAndDebuggingApi {
    private ApiClient apiClient;

    public TroubleshootingAndDebuggingApi() {
        this(new ApiClient());
    }

    @Autowired
    public TroubleshootingAndDebuggingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Show the Client who he is
     * 
     * <p><b>200</b> - Returns JSON content
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @return String
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public String getWhoAmI() throws RestClientException {
        return getWhoAmIWithHttpInfo().getBody();
    }

    /**
     * Show the Client who he is
     * 
     * <p><b>200</b> - Returns JSON content
     * <p><b>400</b> - Bad Request
     * <p><b>401</b> - Unauthorized
     * <p><b>403</b> - Forbidden
     * <p><b>404</b> - Not Found
     * <p><b>405</b> - Method not allowed
     * <p><b>406</b> - Not acceptable
     * <p><b>500</b> - Internal Server Error
     * <p><b>503</b> - Server Unavailable
     * @return ResponseEntity&lt;String&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<String> getWhoAmIWithHttpInfo() throws RestClientException {
        Object postBody = null;
        
        String path = apiClient.expandPath("/WhoAmI", Collections.<String, Object>emptyMap());

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] contentTypes = {  };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<String> returnType = new ParameterizedTypeReference<String>() {};
        return apiClient.invokeAPI(path, HttpMethod.GET, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, contentType, authNames, returnType);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\ApiClient.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.InvalidMediaTypeException;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.RequestEntity.BodyBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TimeZone;

import java.time.OffsetDateTime;


import com.poalim.sigverifysanitizer.documentum.auth.Authentication;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@Component("com.poalim.sigverifysanitizer.documentum.ApiClient")
public class ApiClient extends JavaTimeFormatter {
    public enum CollectionFormat {
        CSV(","), TSV("\t"), SSV(" "), PIPES("|"), MULTI(null);

        private final String separator;
        private CollectionFormat(String separator) {
            this.separator = separator;
        }

        private String collectionToString(Collection<?> collection) {
            return StringUtils.collectionToDelimitedString(collection, separator);
        }
    }

    private boolean debugging = false;

    private HttpHeaders defaultHeaders = new HttpHeaders();
    private MultiValueMap<String, String> defaultCookies = new LinkedMultiValueMap<String, String>();

    private String basePath = "http://not-relevant";

    private RestTemplate restTemplate;

    private Map<String, Authentication> authentications;

    private DateFormat dateFormat;

    public ApiClient() {
        this.restTemplate = buildRestTemplate();
        init();
    }

    @Autowired
    public ApiClient(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        init();
    }

    protected void init() {
        // Use RFC3339 format for date and datetime.
        // See http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
        this.dateFormat = new RFC3339DateFormat();

        // Use UTC as the default time zone.
        this.dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));

        // Set default User-Agent.
        setUserAgent("Java-SDK");

        // Setup authentications (key: authentication name, value: authentication).
        authentications = new HashMap<String, Authentication>();
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    /**
     * Get the current base path
     * @return String the base path
     */
    public String getBasePath() {
        return basePath;
    }

    /**
     * Set the base path, which should include the host
     * @param basePath the base path
     * @return ApiClient this client
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        return this;
    }

    /**
     * Get authentications (key: authentication name, value: authentication).
     * @return Map the currently configured authentication types
     */
    public Map<String, Authentication> getAuthentications() {
        return authentications;
    }

    /**
     * Get authentication for the given name.
     *
     * @param authName The authentication name
     * @return The authentication, null if not found
     */
    public Authentication getAuthentication(String authName) {
        return authentications.get(authName);
    }





     /**
     * Set the User-Agent header's value (by adding to the default header map).
     * @param userAgent the user agent string
     * @return ApiClient this client
     */
    public ApiClient setUserAgent(String userAgent) {
        addDefaultHeader("User-Agent", userAgent);
        return this;
    }

    /**
     * Add a default header.
     *
     * @param name The header's name
     * @param value The header's value
     * @return ApiClient this client
     */
    public ApiClient addDefaultHeader(String name, String value) {
        if (defaultHeaders.containsKey(name)) {
            defaultHeaders.remove(name);
        }
        defaultHeaders.add(name, value);
        return this;
    }

    /**
     * Add a default cookie.
     *
     * @param name The cookie's name
     * @param value The cookie's value
     * @return ApiClient this client
     */
    public ApiClient addDefaultCookie(String name, String value) {
        if (defaultCookies.containsKey(name)) {
            defaultCookies.remove(name);
        }
        defaultCookies.add(name, value);
        return this;
    }

    public void setDebugging(boolean debugging) {
        List<ClientHttpRequestInterceptor> currentInterceptors = this.restTemplate.getInterceptors();
        if(debugging) {
            if (currentInterceptors == null) {
                currentInterceptors = new ArrayList<ClientHttpRequestInterceptor>();
            }
            ClientHttpRequestInterceptor interceptor = new ApiClientHttpRequestInterceptor();
            currentInterceptors.add(interceptor);
            this.restTemplate.setInterceptors(currentInterceptors);
        } else {
            if (currentInterceptors != null && !currentInterceptors.isEmpty()) {
                Iterator<ClientHttpRequestInterceptor> iter = currentInterceptors.iterator();
                while (iter.hasNext()) {
                    ClientHttpRequestInterceptor interceptor = iter.next();
                    if (interceptor instanceof ApiClientHttpRequestInterceptor) {
                        iter.remove();
                    }
                }
                this.restTemplate.setInterceptors(currentInterceptors);
            }
        }
        this.debugging = debugging;
    }

    /**
     * Check that whether debugging is enabled for this API client.
     * @return boolean true if this client is enabled for debugging, false otherwise
     */
    public boolean isDebugging() {
        return debugging;
    }

    /**
     * Get the date format used to parse/format date parameters.
     * @return DateFormat format
     */
    public DateFormat getDateFormat() {
        return dateFormat;
    }

    /**
     * Set the date format used to parse/format date parameters.
     * @param dateFormat Date format
     * @return API client
     */
    public ApiClient setDateFormat(DateFormat dateFormat) {
        this.dateFormat = dateFormat;
        return this;
    }

    /**
     * Parse the given string into Date object.
     * @param str the string to parse
     * @return the Date parsed from the string
     */
    public Date parseDate(String str) {
        try {
            return dateFormat.parse(str);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Format the given Date object into string.
     * @param date the date to format
     * @return the formatted date as string
     */
    public String formatDate(Date date) {
        return dateFormat.format(date);
    }

    /**
     * Format the given parameter object into string.
     * @param param the object to convert
     * @return String the parameter represented as a String
     */
    public String parameterToString(Object param) {
        if (param == null) {
            return "";
        } else if (param instanceof Date) {
            return formatDate( (Date) param);
        } else if (param instanceof OffsetDateTime) {
            return formatOffsetDateTime((OffsetDateTime) param);
        } else if (param instanceof Collection) {
            StringBuilder b = new StringBuilder();
            for(Object o : (Collection<?>) param) {
                if(b.length() > 0) {
                    b.append(",");
                }
                b.append(String.valueOf(o));
            }
            return b.toString();
        } else {
            return String.valueOf(param);
        }
    }

    /**
    * Formats the specified collection path parameter to a string value.
    *
    * @param collectionFormat The collection format of the parameter.
    * @param values The values of the parameter.
    * @return String representation of the parameter
    */
    public String collectionPathParameterToString(CollectionFormat collectionFormat, Collection<?> values) {
        // create the value based on the collection format
        if (CollectionFormat.MULTI.equals(collectionFormat)) {
            // not valid for path params
            return parameterToString(values);
        }

        // collectionFormat is assumed to be "csv" by default
        if(collectionFormat == null) {
            collectionFormat = CollectionFormat.CSV;
        }

        return collectionFormat.collectionToString(values);
    }

    /**
     * Converts a parameter to a {@link MultiValueMap} for use in REST requests
     * @param collectionFormat The format to convert to
     * @param name The name of the parameter
     * @param value The parameter's value
     * @return a Map containing the String value(s) of the input parameter
     */
    public MultiValueMap<String, String> parameterToMultiValueMap(CollectionFormat collectionFormat, String name, Object value) {
        final MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();

        if (name == null || name.isEmpty() || value == null) {
            return params;
        }

        if(collectionFormat == null) {
            collectionFormat = CollectionFormat.CSV;
        }

        Collection<?> valueCollection = null;
        if (value instanceof Collection) {
            valueCollection = (Collection<?>) value;
        } else {
            params.add(name, parameterToString(value));
            return params;
        }

        if (valueCollection.isEmpty()){
            return params;
        }

        if (collectionFormat.equals(CollectionFormat.MULTI)) {
            for (Object item : valueCollection) {
                params.add(name, parameterToString(item));
            }
            return params;
        }

        List<String> values = new ArrayList<String>();
        for(Object o : valueCollection) {
            values.add(parameterToString(o));
        }
        params.add(name, collectionFormat.collectionToString(values));

        return params;
    }

    /**
    * Check if the given {@code String} is a JSON MIME.
    * @param mediaType the input MediaType
    * @return boolean true if the MediaType represents JSON, false otherwise
    */
    public boolean isJsonMime(String mediaType) {
        // "* / *" is default to JSON
        if ("*/*".equals(mediaType)) {
            return true;
        }

        try {
            return isJsonMime(MediaType.parseMediaType(mediaType));
        } catch (InvalidMediaTypeException e) {
        }
        return false;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *     application/json
     *     application/json; charset=UTF8
     *     APPLICATION/JSON
     * @param mediaType the input MediaType
     * @return boolean true if the MediaType represents JSON, false otherwise
     */
    public boolean isJsonMime(MediaType mediaType) {
        return mediaType != null && (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType) || mediaType.getSubtype().matches("^.*\\+json[;]?\\s*$"));
    }

    /**
    * Check if the given {@code String} is a Problem JSON MIME (RFC-7807).
    * @param mediaType the input MediaType
    * @return boolean true if the MediaType represents Problem JSON, false otherwise
    */
    public boolean isProblemJsonMime(String mediaType) {
        return "application/problem+json".equalsIgnoreCase(mediaType);
    }

    /**
     * Select the Accept header's value from the given accepts array:
     *     if JSON exists in the given array, use it;
     *     otherwise use all of them (joining into a string)
     *
     * @param accepts The accepts array to select from
     * @return List The list of MediaTypes to use for the Accept header
     */
    public List<MediaType> selectHeaderAccept(String[] accepts) {
        if (accepts.length == 0) {
            return null;
        }
        for (String accept : accepts) {
            MediaType mediaType = MediaType.parseMediaType(accept);
            if (isJsonMime(mediaType) && !isProblemJsonMime(accept)) {
                return Collections.singletonList(mediaType);
            }
        }
        return MediaType.parseMediaTypes(StringUtils.arrayToCommaDelimitedString(accepts));
    }

    /**
     * Select the Content-Type header's value from the given array:
     *     if JSON exists in the given array, use it;
     *     otherwise use the first one of the array.
     *
     * @param contentTypes The Content-Type array to select from
     * @return MediaType The Content-Type header to use. If the given array is empty, JSON will be used.
     */
    public MediaType selectHeaderContentType(String[] contentTypes) {
        if (contentTypes.length == 0) {
            return MediaType.APPLICATION_JSON;
        }
        for (String contentType : contentTypes) {
            MediaType mediaType = MediaType.parseMediaType(contentType);
            if (isJsonMime(mediaType)) {
                return mediaType;
            }
        }
        return MediaType.parseMediaType(contentTypes[0]);
    }

    /**
     * Select the body to use for the request
     * @param obj the body object
     * @param formParams the form parameters
     * @param contentType the content type of the request
     * @return Object the selected body
     */
    protected Object selectBody(Object obj, MultiValueMap<String, Object> formParams, MediaType contentType) {
        boolean isForm = MediaType.MULTIPART_FORM_DATA.isCompatibleWith(contentType) || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType);
        return isForm ? formParams : obj;
    }

    /**
     * Expand path template with variables
     * @param pathTemplate path template with placeholders
     * @param variables variables to replace
     * @return path with placeholders replaced by variables
     */
    public String expandPath(String pathTemplate, Map<String, Object> variables) {
        return restTemplate.getUriTemplateHandler().expand(pathTemplate, variables).toString();
    }

    /**
     * Invoke API by sending HTTP request with the given options.
     *
     * @param <T> the return type to use
     * @param path The sub-path of the HTTP URL
     * @param method The request method
     * @param queryParams The query parameters
     * @param body The request body object
     * @param headerParams The header parameters
     * @param cookieParams The cookie parameters
     * @param formParams The form parameters
     * @param accept The request's Accept header
     * @param contentType The request's Content-Type header
     * @param authNames The authentications to apply
     * @param returnType The return type into which to deserialize the response
     * @return ResponseEntity&lt;T&gt; The response of the chosen type
     */
    public <T> ResponseEntity<T> invokeAPI(String path, HttpMethod method, MultiValueMap<String, String> queryParams, Object body, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams, MultiValueMap<String, Object> formParams, List<MediaType> accept, MediaType contentType, String[] authNames, ParameterizedTypeReference<T> returnType) throws RestClientException {
        updateParamsForAuth(authNames, queryParams, headerParams, cookieParams);

        final UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(basePath).path(path);
        if (queryParams != null) {
            //encode the query parameters in case they contain unsafe characters
            for (List<String> values : queryParams.values()) {
                if (values != null) {
                    for (int i = 0; i < values.size(); i++) {
                        try {
                            values.set(i, URLEncoder.encode(values.get(i), "utf8"));
                        } catch (UnsupportedEncodingException e) {

                        }
                    }
                }
            }
            builder.queryParams(queryParams);
        }

        URI uri;
        try {
            uri = new URI(builder.build().toUriString());
        } catch(URISyntaxException ex)  {
            throw new RestClientException("Could not build URL: " + builder.toUriString(), ex);
        }

        final BodyBuilder requestBuilder = RequestEntity.method(method, uri);
        if(accept != null) {
            requestBuilder.accept(accept.toArray(new MediaType[accept.size()]));
        }
        if(contentType != null) {
            requestBuilder.contentType(contentType);
        }

        addHeadersToRequest(headerParams, requestBuilder);
        addHeadersToRequest(defaultHeaders, requestBuilder);
        addCookiesToRequest(cookieParams, requestBuilder);
        addCookiesToRequest(defaultCookies, requestBuilder);

        RequestEntity<Object> requestEntity = requestBuilder.body(selectBody(body, formParams, contentType));

        ResponseEntity<T> responseEntity = restTemplate.exchange(requestEntity, returnType);

        if (responseEntity.getStatusCode().is2xxSuccessful()) {
            return responseEntity;
        } else {
            // The error handler built into the RestTemplate should handle 400 and 500 series errors.
            throw new RestClientException("API returned " + responseEntity.getStatusCode() + " and it wasn't handled by the RestTemplate error handler");
        }
    }

    /**
     * Add headers to the request that is being built
     * @param headers The headers to add
     * @param requestBuilder The current request
     */
    protected void addHeadersToRequest(HttpHeaders headers, BodyBuilder requestBuilder) {
        for (Entry<String, List<String>> entry : headers.entrySet()) {
            List<String> values = entry.getValue();
            for(String value : values) {
                if (value != null) {
                    requestBuilder.header(entry.getKey(), value);
                }
            }
        }
    }

    /**
     * Add cookies to the request that is being built
     * @param cookies The cookies to add
     * @param requestBuilder The current request
     */
    protected void addCookiesToRequest(MultiValueMap<String, String> cookies, BodyBuilder requestBuilder) {
        if (!cookies.isEmpty()) {
            requestBuilder.header("Cookie", buildCookieHeader(cookies));
        }
    }

    /**
     * Build cookie header. Keeps a single value per cookie (as per <a href="https://tools.ietf.org/html/rfc6265#section-5.3">
     * RFC6265 section 5.3</a>).
     *
     * @param cookies map all cookies
     * @return header string for cookies.
     */
    private String buildCookieHeader(MultiValueMap<String, String> cookies) {
        final StringBuilder cookieValue = new StringBuilder();
        String delimiter = "";
        for (final Map.Entry<String, List<String>> entry : cookies.entrySet()) {
            final String value = entry.getValue().get(entry.getValue().size() - 1);
            cookieValue.append(String.format("%s%s=%s", delimiter, entry.getKey(), value));
            delimiter = "; ";
        }
        return cookieValue.toString();
    }

    /**
     * Build the RestTemplate used to make HTTP requests.
     * @return RestTemplate
     */
    protected RestTemplate buildRestTemplate() {
        RestTemplate restTemplate = new RestTemplate();
        // This allows us to read the response more than once - Necessary for debugging.
        restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(restTemplate.getRequestFactory()));
        return restTemplate;
    }

    /**
     * Update query and header parameters based on authentication settings.
     *
     * @param authNames The authentications to apply
     * @param queryParams The query parameters
     * @param headerParams The header parameters
     */
    protected void updateParamsForAuth(String[] authNames, MultiValueMap<String, String> queryParams, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams) {
        for (String authName : authNames) {
            Authentication auth = authentications.get(authName);
            if (auth == null) {
                throw new RestClientException("Authentication undefined: " + authName);
            }
            auth.applyToParams(queryParams, headerParams, cookieParams);
        }
    }

    private class ApiClientHttpRequestInterceptor implements ClientHttpRequestInterceptor {
        private final Log log = LogFactory.getLog(ApiClientHttpRequestInterceptor.class);

        @Override
        public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
            logRequest(request, body);
            ClientHttpResponse response = execution.execute(request, body);
            logResponse(response);
            return response;
        }

        private void logRequest(HttpRequest request, byte[] body) throws UnsupportedEncodingException {
            log.info("URI: " + request.getURI());
            log.info("HTTP Method: " + request.getMethod());
            log.info("HTTP Headers: " + headersToString(request.getHeaders()));
            log.info("Request Body: " + new String(body, StandardCharsets.UTF_8));
        }

        private void logResponse(ClientHttpResponse response) throws IOException {
            log.info("HTTP Status Code: " + response.getRawStatusCode());
            log.info("Status Text: " + response.getStatusText());
            log.info("HTTP Headers: " + headersToString(response.getHeaders()));
            log.info("Response Body: " + bodyToString(response.getBody()));
        }

        private String headersToString(HttpHeaders headers) {
            StringBuilder builder = new StringBuilder();
            for(Entry<String, List<String>> entry : headers.entrySet()) {
                builder.append(entry.getKey()).append("=[");
                for(String value : entry.getValue()) {
                    builder.append(value).append(",");
                }
                builder.setLength(builder.length() - 1); // Get rid of trailing comma
                builder.append("],");
            }
            builder.setLength(builder.length() - 1); // Get rid of trailing comma
            return builder.toString();
        }

        private String bodyToString(InputStream body) throws IOException {
            StringBuilder builder = new StringBuilder();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(body, StandardCharsets.UTF_8));
            String line = bufferedReader.readLine();
            while (line != null) {
                builder.append(line).append(System.lineSeparator());
                line = bufferedReader.readLine();
            }
            bufferedReader.close();
            return builder.toString();
        }
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\auth\ApiKeyAuth.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.auth;

import org.springframework.http.HttpHeaders;
import org.springframework.util.MultiValueMap;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class ApiKeyAuth implements Authentication {
    private final String location;
    private final String paramName;

    private String apiKey;
    private String apiKeyPrefix;

    public ApiKeyAuth(String location, String paramName) {
        this.location = location;
        this.paramName = paramName;
    }

    public String getLocation() {
        return location;
    }

    public String getParamName() {
        return paramName;
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
    }

    public String getApiKeyPrefix() {
        return apiKeyPrefix;
    }

    public void setApiKeyPrefix(String apiKeyPrefix) {
        this.apiKeyPrefix = apiKeyPrefix;
    }

    @Override
    public void applyToParams(MultiValueMap<String, String> queryParams, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams) {
        if (apiKey == null) {
            return;
        }
        String value;
        if (apiKeyPrefix != null) {
            value = apiKeyPrefix + " " + apiKey;
        } else {
            value = apiKey;
        }
        if (location.equals("query")) {
            queryParams.add(paramName, value);
        } else if (location.equals("header")) {
            headerParams.add(paramName, value);
        } else if (location.equals("cookie")) {
            cookieParams.add(paramName, value);
        }
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\auth\Authentication.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.auth;

import org.springframework.http.HttpHeaders;
import org.springframework.util.MultiValueMap;

public interface Authentication {
    /**
     * Apply authentication settings to header and / or query parameters.
     * @param queryParams The query parameters for the request
     * @param headerParams The header parameters for the request
     * @param cookieParams The cookie parameters for the request
     */
    public void applyToParams(MultiValueMap<String, String> queryParams, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams);
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\auth\HttpBasicAuth.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.auth;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;

import org.springframework.http.HttpHeaders;
import org.springframework.util.Base64Utils;
import org.springframework.util.MultiValueMap;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class HttpBasicAuth implements Authentication {
    private String username;
    private String password;

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public void applyToParams(MultiValueMap<String, String> queryParams, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams) {
        if (username == null && password == null) {
            return;
        }
        String str = (username == null ? "" : username) + ":" + (password == null ? "" : password);
        headerParams.add(HttpHeaders.AUTHORIZATION, "Basic " + Base64Utils.encodeToString(str.getBytes(StandardCharsets.UTF_8)));
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\auth\HttpBearerAuth.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.auth;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;

import org.springframework.http.HttpHeaders;
import org.springframework.util.Base64Utils;
import org.springframework.util.MultiValueMap;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class HttpBearerAuth implements Authentication {
    private final String scheme;
    private String bearerToken;

    public HttpBearerAuth(String scheme) {
        this.scheme = scheme;
    }

    public String getBearerToken() {
        return bearerToken;
    }

    public void setBearerToken(String bearerToken) {
        this.bearerToken = bearerToken;
    }

    @Override
    public void applyToParams(MultiValueMap<String, String> queryParams, HttpHeaders headerParams, MultiValueMap<String, String> cookieParams) {
        if (bearerToken == null) {
            return;
        }
        headerParams.add(HttpHeaders.AUTHORIZATION, (scheme != null ? upperCaseBearer(scheme) + " " : "") + bearerToken);
    }

    private static String upperCaseBearer(String scheme) {
        return ("bearer".equalsIgnoreCase(scheme)) ? "Bearer" : scheme;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\JavaTimeFormatter.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.poalim.sigverifysanitizer.documentum;

import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/**
 * Class that add parsing/formatting support for Java 8+ {@code OffsetDateTime} class.
 * It's generated for java clients when {@code AbstractJavaCodegen#dateLibrary} specified as {@code java8}.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class JavaTimeFormatter {

    private DateTimeFormatter offsetDateTimeFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;

    /**
     * Get the date format used to parse/format {@code OffsetDateTime} parameters.
     * @return DateTimeFormatter
     */
    public DateTimeFormatter getOffsetDateTimeFormatter() {
        return offsetDateTimeFormatter;
    }

    /**
     * Set the date format used to parse/format {@code OffsetDateTime} parameters.
     * @param offsetDateTimeFormatter {@code DateTimeFormatter}
     */
    public void setOffsetDateTimeFormatter(DateTimeFormatter offsetDateTimeFormatter) {
        this.offsetDateTimeFormatter = offsetDateTimeFormatter;
    }

    /**
     * Parse the given string into {@code OffsetDateTime} object.
     * @param str String
     * @return {@code OffsetDateTime}
     */
    public OffsetDateTime parseOffsetDateTime(String str) {
        try {
            return OffsetDateTime.parse(str, offsetDateTimeFormatter);
        } catch (DateTimeParseException e) {
            throw new RuntimeException(e);
        }
    }
    /**
     * Format the given {@code OffsetDateTime} object into string.
     * @param offsetDateTime {@code OffsetDateTime}
     * @return {@code OffsetDateTime} in string format
     */
    public String formatOffsetDateTime(OffsetDateTime offsetDateTime) {
        return offsetDateTimeFormatter.format(offsetDateTime);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\AsyncRequestStatus.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * AsyncRequestStatus
 */
@JsonPropertyOrder({
  AsyncRequestStatus.JSON_PROPERTY_ERROR_DETAILS,
  AsyncRequestStatus.JSON_PROPERTY_FINISHED,
  AsyncRequestStatus.JSON_PROPERTY_OUTPUT,
  AsyncRequestStatus.JSON_PROPERTY_OUTPUT_TYPE,
  AsyncRequestStatus.JSON_PROPERTY_RECEIVED,
  AsyncRequestStatus.JSON_PROPERTY_REPLIED,
  AsyncRequestStatus.JSON_PROPERTY_REQUEST_ID,
  AsyncRequestStatus.JSON_PROPERTY_REQUEST_STATUS,
  AsyncRequestStatus.JSON_PROPERTY_STARTED,
  AsyncRequestStatus.JSON_PROPERTY_STATUS_CODE,
  AsyncRequestStatus.JSON_PROPERTY_STATUS_MESSAGE
})
@JsonTypeName("AsyncRequestStatus")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class AsyncRequestStatus {
  public static final String JSON_PROPERTY_ERROR_DETAILS = "errorDetails";
  private String errorDetails;

  public static final String JSON_PROPERTY_FINISHED = "finished";
  private OffsetDateTime finished;

  public static final String JSON_PROPERTY_OUTPUT = "output";
  private byte[] output;

  public static final String JSON_PROPERTY_OUTPUT_TYPE = "outputType";
  private String outputType;

  public static final String JSON_PROPERTY_RECEIVED = "received";
  private OffsetDateTime received;

  public static final String JSON_PROPERTY_REPLIED = "replied";
  private OffsetDateTime replied;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  /**
   * Current request status
   */
  public enum RequestStatusEnum {
    WAITING("waiting"),
    
    STARTED("started"),
    
    SUCCESS("success"),
    
    FAILURE("failure");

    private String value;

    RequestStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RequestStatusEnum fromValue(String value) {
      for (RequestStatusEnum b : RequestStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REQUEST_STATUS = "requestStatus";
  private RequestStatusEnum requestStatus;

  public static final String JSON_PROPERTY_STARTED = "started";
  private OffsetDateTime started;

  public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
  private Integer statusCode;

  public static final String JSON_PROPERTY_STATUS_MESSAGE = "statusMessage";
  private String statusMessage;


  public AsyncRequestStatus errorDetails(String errorDetails) {
    
    this.errorDetails = errorDetails;
    return this;
  }

   /**
   * Detailed error message from the service
   * @return errorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detailed error message from the service")
  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorDetails() {
    return errorDetails;
  }


  public void setErrorDetails(String errorDetails) {
    this.errorDetails = errorDetails;
  }


  public AsyncRequestStatus finished(OffsetDateTime finished) {
    
    this.finished = finished;
    return this;
  }

   /**
   * When processing has finished
   * @return finished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When processing has finished")
  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getFinished() {
    return finished;
  }


  public void setFinished(OffsetDateTime finished) {
    this.finished = finished;
  }


  public AsyncRequestStatus output(byte[] output) {
    
    this.output = output;
    return this;
  }

   /**
   * request output
   * @return output
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "request output")
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getOutput() {
    return output;
  }


  public void setOutput(byte[] output) {
    this.output = output;
  }


  public AsyncRequestStatus outputType(String outputType) {
    
    this.outputType = outputType;
    return this;
  }

   /**
   * request output MIME type
   * @return outputType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "request output MIME type")
  @JsonProperty(JSON_PROPERTY_OUTPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOutputType() {
    return outputType;
  }


  public void setOutputType(String outputType) {
    this.outputType = outputType;
  }


  public AsyncRequestStatus received(OffsetDateTime received) {
    
    this.received = received;
    return this;
  }

   /**
   * When request has been received.
   * @return received
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When request has been received.")
  @JsonProperty(JSON_PROPERTY_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getReceived() {
    return received;
  }


  public void setReceived(OffsetDateTime received) {
    this.received = received;
  }


  public AsyncRequestStatus replied(OffsetDateTime replied) {
    
    this.replied = replied;
    return this;
  }

   /**
   * When asynchronous reply has been sent
   * @return replied
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When asynchronous reply has been sent")
  @JsonProperty(JSON_PROPERTY_REPLIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getReplied() {
    return replied;
  }


  public void setReplied(OffsetDateTime replied) {
    this.replied = replied;
  }


  public AsyncRequestStatus requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Asynchronous request id
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Asynchronous request id")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public AsyncRequestStatus requestStatus(RequestStatusEnum requestStatus) {
    
    this.requestStatus = requestStatus;
    return this;
  }

   /**
   * Current request status
   * @return requestStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current request status")
  @JsonProperty(JSON_PROPERTY_REQUEST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestStatusEnum getRequestStatus() {
    return requestStatus;
  }


  public void setRequestStatus(RequestStatusEnum requestStatus) {
    this.requestStatus = requestStatus;
  }


  public AsyncRequestStatus started(OffsetDateTime started) {
    
    this.started = started;
    return this;
  }

   /**
   * When processing started
   * @return started
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When processing started")
  @JsonProperty(JSON_PROPERTY_STARTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStarted() {
    return started;
  }


  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public AsyncRequestStatus statusCode(Integer statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Request HTTP status code
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request HTTP status code")
  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public AsyncRequestStatus statusMessage(String statusMessage) {
    
    this.statusMessage = statusMessage;
    return this;
  }

   /**
   * Request HTTP status message
   * @return statusMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request HTTP status message")
  @JsonProperty(JSON_PROPERTY_STATUS_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatusMessage() {
    return statusMessage;
  }


  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncRequestStatus asyncRequestStatus = (AsyncRequestStatus) o;
    return Objects.equals(this.errorDetails, asyncRequestStatus.errorDetails) &&
        Objects.equals(this.finished, asyncRequestStatus.finished) &&
        Arrays.equals(this.output, asyncRequestStatus.output) &&
        Objects.equals(this.outputType, asyncRequestStatus.outputType) &&
        Objects.equals(this.received, asyncRequestStatus.received) &&
        Objects.equals(this.replied, asyncRequestStatus.replied) &&
        Objects.equals(this.requestId, asyncRequestStatus.requestId) &&
        Objects.equals(this.requestStatus, asyncRequestStatus.requestStatus) &&
        Objects.equals(this.started, asyncRequestStatus.started) &&
        Objects.equals(this.statusCode, asyncRequestStatus.statusCode) &&
        Objects.equals(this.statusMessage, asyncRequestStatus.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorDetails, finished, Arrays.hashCode(output), outputType, received, replied, requestId, requestStatus, started, statusCode, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncRequestStatus {\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    replied: ").append(toIndentedString(replied)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestStatus: ").append(toIndentedString(requestStatus)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BankAccount.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BankAccount
 */
@JsonPropertyOrder({
  BankAccount.JSON_PROPERTY_ACCOUNT_BANK_ID,
  BankAccount.JSON_PROPERTY_ACCOUNT_NBR,
  BankAccount.JSON_PROPERTY_ACCOUNT_TYPE,
  BankAccount.JSON_PROPERTY_BRANCH_ID,
  BankAccount.JSON_PROPERTY_DIVISION_ID,
  BankAccount.JSON_PROPERTY_SPECIAL_HANDLING_CODE
})
@JsonTypeName("BankAccount")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BankAccount {
  public static final String JSON_PROPERTY_ACCOUNT_BANK_ID = "accountBankId";
  private Integer accountBankId;

  public static final String JSON_PROPERTY_ACCOUNT_NBR = "accountNbr";
  private Integer accountNbr;

  public static final String JSON_PROPERTY_ACCOUNT_TYPE = "accountType";
  private Integer accountType;

  public static final String JSON_PROPERTY_BRANCH_ID = "branchId";
  private Integer branchId;

  public static final String JSON_PROPERTY_DIVISION_ID = "divisionId";
  private Integer divisionId;

  public static final String JSON_PROPERTY_SPECIAL_HANDLING_CODE = "specialHandlingCode";
  private Boolean specialHandlingCode;


  public BankAccount accountBankId(Integer accountBankId) {
    
    this.accountBankId = accountBankId;
    return this;
  }

   /**
   * Get accountBankId
   * @return accountBankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_BANK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccountBankId() {
    return accountBankId;
  }


  public void setAccountBankId(Integer accountBankId) {
    this.accountBankId = accountBankId;
  }


  public BankAccount accountNbr(Integer accountNbr) {
    
    this.accountNbr = accountNbr;
    return this;
  }

   /**
   * Get accountNbr
   * @return accountNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccountNbr() {
    return accountNbr;
  }


  public void setAccountNbr(Integer accountNbr) {
    this.accountNbr = accountNbr;
  }


  public BankAccount accountType(Integer accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccountType() {
    return accountType;
  }


  public void setAccountType(Integer accountType) {
    this.accountType = accountType;
  }


  public BankAccount branchId(Integer branchId) {
    
    this.branchId = branchId;
    return this;
  }

   /**
   * Get branchId
   * @return branchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBranchId() {
    return branchId;
  }


  public void setBranchId(Integer branchId) {
    this.branchId = branchId;
  }


  public BankAccount divisionId(Integer divisionId) {
    
    this.divisionId = divisionId;
    return this;
  }

   /**
   * Get divisionId
   * @return divisionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDivisionId() {
    return divisionId;
  }


  public void setDivisionId(Integer divisionId) {
    this.divisionId = divisionId;
  }


  public BankAccount specialHandlingCode(Boolean specialHandlingCode) {
    
    this.specialHandlingCode = specialHandlingCode;
    return this;
  }

   /**
   * Get specialHandlingCode
   * @return specialHandlingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SPECIAL_HANDLING_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSpecialHandlingCode() {
    return specialHandlingCode;
  }


  public void setSpecialHandlingCode(Boolean specialHandlingCode) {
    this.specialHandlingCode = specialHandlingCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccount bankAccount = (BankAccount) o;
    return Objects.equals(this.accountBankId, bankAccount.accountBankId) &&
        Objects.equals(this.accountNbr, bankAccount.accountNbr) &&
        Objects.equals(this.accountType, bankAccount.accountType) &&
        Objects.equals(this.branchId, bankAccount.branchId) &&
        Objects.equals(this.divisionId, bankAccount.divisionId) &&
        Objects.equals(this.specialHandlingCode, bankAccount.specialHandlingCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountBankId, accountNbr, accountType, branchId, divisionId, specialHandlingCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccount {\n");
    sb.append("    accountBankId: ").append(toIndentedString(accountBankId)).append("\n");
    sb.append("    accountNbr: ").append(toIndentedString(accountNbr)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    specialHandlingCode: ").append(toIndentedString(specialHandlingCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpCorporateDoc.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDoc;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDocAllOf;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDocAllOfProperties;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusiness;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDoc;
import com.poalim.sigverifysanitizer.documentum.model.DocPropertyExtension;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpCorporateDoc
 */
@JsonPropertyOrder({
  BnhpCorporateDoc.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "name", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCorporateDoc.class, name = "bnhp_corporate_doc"),
  @JsonSubTypes.Type(value = BnhpDivisionBusiness.class, name = "bnhp_division_business"),
  @JsonSubTypes.Type(value = BnhpPaperDoc.class, name = "bnhp_paper_doc"),
})
@JsonTypeName("bnhp_corporate_doc")

public class BnhpCorporateDoc extends DocPropertyExtension {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpCorporateDocAllOfProperties properties;


  public BnhpCorporateDoc properties(BnhpCorporateDocAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpCorporateDocAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpCorporateDocAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpCorporateDoc bnhpCorporateDoc = (BnhpCorporateDoc) o;
    return Objects.equals(this.properties, bnhpCorporateDoc.properties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpCorporateDoc {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpCorporateDocAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDocAllOfProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * extension for corporate documents specific attributes
 */
//@ApiModel(description = "extension for corporate documents specific attributes")
@JsonPropertyOrder({
  BnhpCorporateDocAllOf.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("bnhp_corporate_doc_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpCorporateDocAllOf {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpCorporateDocAllOfProperties properties;


  public BnhpCorporateDocAllOf properties(BnhpCorporateDocAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
//  @javax.annotation.Nullable
//  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpCorporateDocAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpCorporateDocAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpCorporateDocAllOf bnhpCorporateDocAllOf = (BnhpCorporateDocAllOf) o;
    return Objects.equals(this.properties, bnhpCorporateDocAllOf.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpCorporateDocAllOf {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpCorporateDocAllOfProperties.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpCorporateDocAllOfProperties
 */
@JsonPropertyOrder({
  BnhpCorporateDocAllOfProperties.JSON_PROPERTY_IS_PRIVATE,
  BnhpCorporateDocAllOfProperties.JSON_PROPERTY_OWNER_NAME
})
@JsonTypeName("bnhp_corporate_doc_allOf_properties")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpCorporateDocAllOfProperties {
  public static final String JSON_PROPERTY_IS_PRIVATE = "isPrivate";
  private Boolean isPrivate;

  public static final String JSON_PROPERTY_OWNER_NAME = "ownerName";
  private String ownerName;


  public BnhpCorporateDocAllOfProperties isPrivate(Boolean isPrivate) {
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public BnhpCorporateDocAllOfProperties ownerName(String ownerName) {
    
    this.ownerName = ownerName;
    return this;
  }

   /**
   * Get ownerName
   * @return ownerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwnerName() {
    return ownerName;
  }


  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpCorporateDocAllOfProperties bnhpCorporateDocAllOfProperties = (BnhpCorporateDocAllOfProperties) o;
    return Objects.equals(this.isPrivate, bnhpCorporateDocAllOfProperties.isPrivate) &&
        Objects.equals(this.ownerName, bnhpCorporateDocAllOfProperties.ownerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPrivate, ownerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpCorporateDocAllOfProperties {\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpCustomerDocData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocDataAllOf;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocData;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness;
import com.poalim.sigverifysanitizer.documentum.model.SysObjectData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpCustomerDocData
 */
@JsonPropertyOrder({
  BnhpCustomerDocData.JSON_PROPERTY_DOC_CUSTOMER_DATA,
  BnhpCustomerDocData.JSON_PROPERTY_DOC_FILES,
  BnhpCustomerDocData.JSON_PROPERTY_EXTENSIONS
})
@JsonTypeName("BnhpCustomerDocData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDoc"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolder"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDoc"),
})

public class BnhpCustomerDocData extends SysObjectData {
  public static final String JSON_PROPERTY_DOC_CUSTOMER_DATA = "docCustomerData";
  private DocCustomerData docCustomerData;

  public static final String JSON_PROPERTY_DOC_FILES = "docFiles";
  private List<DocFile> docFiles = null;

  public static final String JSON_PROPERTY_EXTENSIONS = "extensions";
  private List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions = null;


  public BnhpCustomerDocData docCustomerData(DocCustomerData docCustomerData) {
    
    this.docCustomerData = docCustomerData;
    return this;
  }

   /**
   * Get docCustomerData
   * @return docCustomerData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_CUSTOMER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocCustomerData getDocCustomerData() {
    return docCustomerData;
  }


  public void setDocCustomerData(DocCustomerData docCustomerData) {
    this.docCustomerData = docCustomerData;
  }


  public BnhpCustomerDocData docFiles(List<DocFile> docFiles) {
    
    this.docFiles = docFiles;
    return this;
  }

  public BnhpCustomerDocData addDocFilesItem(DocFile docFilesItem) {
    if (this.docFiles == null) {
      this.docFiles = new ArrayList<>();
    }
    this.docFiles.add(docFilesItem);
    return this;
  }

   /**
   * Get docFiles
   * @return docFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocFile> getDocFiles() {
    return docFiles;
  }


  public void setDocFiles(List<DocFile> docFiles) {
    this.docFiles = docFiles;
  }


  public BnhpCustomerDocData extensions(List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions) {
    
    this.extensions = extensions;
    return this;
  }

  public BnhpCustomerDocData addExtensionsItem(OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> getExtensions() {
    return extensions;
  }


  public void setExtensions(List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions) {
    this.extensions = extensions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpCustomerDocData bnhpCustomerDocData = (BnhpCustomerDocData) o;
    return Objects.equals(this.docCustomerData, bnhpCustomerDocData.docCustomerData) &&
        Objects.equals(this.docFiles, bnhpCustomerDocData.docFiles) &&
        Objects.equals(this.extensions, bnhpCustomerDocData.extensions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docCustomerData, docFiles, extensions, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpCustomerDocData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    docCustomerData: ").append(toIndentedString(docCustomerData)).append("\n");
    sb.append("    docFiles: ").append(toIndentedString(docFiles)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpCustomerDocDataAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpCustomerDocDataAllOf
 */
@JsonPropertyOrder({
  BnhpCustomerDocDataAllOf.JSON_PROPERTY_DOC_CUSTOMER_DATA,
  BnhpCustomerDocDataAllOf.JSON_PROPERTY_DOC_FILES,
  BnhpCustomerDocDataAllOf.JSON_PROPERTY_EXTENSIONS
})
@JsonTypeName("BnhpCustomerDocData_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpCustomerDocDataAllOf {
  public static final String JSON_PROPERTY_DOC_CUSTOMER_DATA = "docCustomerData";
  private DocCustomerData docCustomerData;

  public static final String JSON_PROPERTY_DOC_FILES = "docFiles";
  private List<DocFile> docFiles = null;

  public static final String JSON_PROPERTY_EXTENSIONS = "extensions";
  private List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions = null;


  public BnhpCustomerDocDataAllOf docCustomerData(DocCustomerData docCustomerData) {
    
    this.docCustomerData = docCustomerData;
    return this;
  }

   /**
   * Get docCustomerData
   * @return docCustomerData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_CUSTOMER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocCustomerData getDocCustomerData() {
    return docCustomerData;
  }


  public void setDocCustomerData(DocCustomerData docCustomerData) {
    this.docCustomerData = docCustomerData;
  }


  public BnhpCustomerDocDataAllOf docFiles(List<DocFile> docFiles) {
    
    this.docFiles = docFiles;
    return this;
  }

  public BnhpCustomerDocDataAllOf addDocFilesItem(DocFile docFilesItem) {
    if (this.docFiles == null) {
      this.docFiles = new ArrayList<>();
    }
    this.docFiles.add(docFilesItem);
    return this;
  }

   /**
   * Get docFiles
   * @return docFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocFile> getDocFiles() {
    return docFiles;
  }


  public void setDocFiles(List<DocFile> docFiles) {
    this.docFiles = docFiles;
  }


  public BnhpCustomerDocDataAllOf extensions(List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions) {
    
    this.extensions = extensions;
    return this;
  }

  public BnhpCustomerDocDataAllOf addExtensionsItem(OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> getExtensions() {
    return extensions;
  }


  public void setExtensions(List<OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness> extensions) {
    this.extensions = extensions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpCustomerDocDataAllOf bnhpCustomerDocDataAllOf = (BnhpCustomerDocDataAllOf) o;
    return Objects.equals(this.docCustomerData, bnhpCustomerDocDataAllOf.docCustomerData) &&
        Objects.equals(this.docFiles, bnhpCustomerDocDataAllOf.docFiles) &&
        Objects.equals(this.extensions, bnhpCustomerDocDataAllOf.extensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docCustomerData, docFiles, extensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpCustomerDocDataAllOf {\n");
    sb.append("    docCustomerData: ").append(toIndentedString(docCustomerData)).append("\n");
    sb.append("    docFiles: ").append(toIndentedString(docFiles)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpDivisionBusiness.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDoc;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusiness;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusinessAllOf;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusinessAllOfProperties;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDoc;
import com.poalim.sigverifysanitizer.documentum.model.DocPropertyExtension;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpDivisionBusiness
 */
@JsonPropertyOrder({
  BnhpDivisionBusiness.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("bnhp_division_business")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "name", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCorporateDoc.class, name = "bnhp_corporate_doc"),
  @JsonSubTypes.Type(value = BnhpDivisionBusiness.class, name = "bnhp_division_business"),
  @JsonSubTypes.Type(value = BnhpPaperDoc.class, name = "bnhp_paper_doc"),
})

public class BnhpDivisionBusiness extends DocPropertyExtension {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpDivisionBusinessAllOfProperties properties;


  public BnhpDivisionBusiness properties(BnhpDivisionBusinessAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpDivisionBusinessAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpDivisionBusinessAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpDivisionBusiness bnhpDivisionBusiness = (BnhpDivisionBusiness) o;
    return Objects.equals(this.properties, bnhpDivisionBusiness.properties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpDivisionBusiness {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpDivisionBusinessAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusinessAllOfProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * extension for business division documents
 */
//@ApiModel(description = "extension for business division documents")
@JsonPropertyOrder({
  BnhpDivisionBusinessAllOf.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("bnhp_division_business_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpDivisionBusinessAllOf {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpDivisionBusinessAllOfProperties properties;


  public BnhpDivisionBusinessAllOf properties(BnhpDivisionBusinessAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
//  @javax.annotation.Nullable
//  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpDivisionBusinessAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpDivisionBusinessAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpDivisionBusinessAllOf bnhpDivisionBusinessAllOf = (BnhpDivisionBusinessAllOf) o;
    return Objects.equals(this.properties, bnhpDivisionBusinessAllOf.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpDivisionBusinessAllOf {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpDivisionBusinessAllOfProperties.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpDivisionBusinessAllOfProperties
 */
@JsonPropertyOrder({
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_CAR_NUMBER,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_CREDIT_TYPE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_DEPOSIT_NUMBER,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_EXPIRATION_DATE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_GUSH_NUMBER,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_HELKA_NUMBER,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_NUMBER_BRANCH_CONFIDENCE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_NUMBER_CONFIDENCE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_NUMBER_DEAL,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_ORIGINAL_DOCUMENT,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_PROPERTY_TYPE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_SERIAL_NBR_LOAN_GUARANTEE,
  BnhpDivisionBusinessAllOfProperties.JSON_PROPERTY_TATHELKA_NUMBER
})
@JsonTypeName("bnhp_division_business_allOf_properties")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpDivisionBusinessAllOfProperties {
  public static final String JSON_PROPERTY_CAR_NUMBER = "car_number";
  private List<Integer> carNumber = null;

  public static final String JSON_PROPERTY_CREDIT_TYPE = "credit_type";
  private Integer creditType;

  public static final String JSON_PROPERTY_DEPOSIT_NUMBER = "deposit_number";
  private List<Long> depositNumber = null;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expiration_date";
  private LocalDate expirationDate;

  public static final String JSON_PROPERTY_GUSH_NUMBER = "gush_number";
  private Integer gushNumber;

  public static final String JSON_PROPERTY_HELKA_NUMBER = "helka_number";
  private Long helkaNumber;

  public static final String JSON_PROPERTY_NUMBER_BRANCH_CONFIDENCE = "number_branch_confidence";
  private Integer numberBranchConfidence;

  public static final String JSON_PROPERTY_NUMBER_CONFIDENCE = "number_confidence";
  private Integer numberConfidence;

  public static final String JSON_PROPERTY_NUMBER_DEAL = "number_deal";
  private Integer numberDeal;

  public static final String JSON_PROPERTY_ORIGINAL_DOCUMENT = "original_document";
  private Integer originalDocument;

  public static final String JSON_PROPERTY_PROPERTY_TYPE = "property_type";
  private Integer propertyType;

  public static final String JSON_PROPERTY_SERIAL_NBR_LOAN_GUARANTEE = "serial_nbr_loan_guarantee";
  private Integer serialNbrLoanGuarantee;

  public static final String JSON_PROPERTY_TATHELKA_NUMBER = "tathelka_number";
  private Integer tathelkaNumber;


  public BnhpDivisionBusinessAllOfProperties carNumber(List<Integer> carNumber) {
    
    this.carNumber = carNumber;
    return this;
  }

  public BnhpDivisionBusinessAllOfProperties addCarNumberItem(Integer carNumberItem) {
    if (this.carNumber == null) {
      this.carNumber = new ArrayList<>();
    }
    this.carNumber.add(carNumberItem);
    return this;
  }

   /**
   * Get carNumber
   * @return carNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CAR_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getCarNumber() {
    return carNumber;
  }


  public void setCarNumber(List<Integer> carNumber) {
    this.carNumber = carNumber;
  }


  public BnhpDivisionBusinessAllOfProperties creditType(Integer creditType) {
    
    this.creditType = creditType;
    return this;
  }

   /**
   * Get creditType
   * @return creditType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREDIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCreditType() {
    return creditType;
  }


  public void setCreditType(Integer creditType) {
    this.creditType = creditType;
  }


  public BnhpDivisionBusinessAllOfProperties depositNumber(List<Long> depositNumber) {
    
    this.depositNumber = depositNumber;
    return this;
  }

  public BnhpDivisionBusinessAllOfProperties addDepositNumberItem(Long depositNumberItem) {
    if (this.depositNumber == null) {
      this.depositNumber = new ArrayList<>();
    }
    this.depositNumber.add(depositNumberItem);
    return this;
  }

   /**
   * Get depositNumber
   * @return depositNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEPOSIT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getDepositNumber() {
    return depositNumber;
  }


  public void setDepositNumber(List<Long> depositNumber) {
    this.depositNumber = depositNumber;
  }


  public BnhpDivisionBusinessAllOfProperties expirationDate(LocalDate expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public BnhpDivisionBusinessAllOfProperties gushNumber(Integer gushNumber) {
    
    this.gushNumber = gushNumber;
    return this;
  }

   /**
   * Get gushNumber
   * @return gushNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GUSH_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGushNumber() {
    return gushNumber;
  }


  public void setGushNumber(Integer gushNumber) {
    this.gushNumber = gushNumber;
  }


  public BnhpDivisionBusinessAllOfProperties helkaNumber(Long helkaNumber) {
    
    this.helkaNumber = helkaNumber;
    return this;
  }

   /**
   * Get helkaNumber
   * @return helkaNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HELKA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getHelkaNumber() {
    return helkaNumber;
  }


  public void setHelkaNumber(Long helkaNumber) {
    this.helkaNumber = helkaNumber;
  }


  public BnhpDivisionBusinessAllOfProperties numberBranchConfidence(Integer numberBranchConfidence) {
    
    this.numberBranchConfidence = numberBranchConfidence;
    return this;
  }

   /**
   * Get numberBranchConfidence
   * @return numberBranchConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUMBER_BRANCH_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberBranchConfidence() {
    return numberBranchConfidence;
  }


  public void setNumberBranchConfidence(Integer numberBranchConfidence) {
    this.numberBranchConfidence = numberBranchConfidence;
  }


  public BnhpDivisionBusinessAllOfProperties numberConfidence(Integer numberConfidence) {
    
    this.numberConfidence = numberConfidence;
    return this;
  }

   /**
   * Get numberConfidence
   * @return numberConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUMBER_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberConfidence() {
    return numberConfidence;
  }


  public void setNumberConfidence(Integer numberConfidence) {
    this.numberConfidence = numberConfidence;
  }


  public BnhpDivisionBusinessAllOfProperties numberDeal(Integer numberDeal) {
    
    this.numberDeal = numberDeal;
    return this;
  }

   /**
   * Get numberDeal
   * @return numberDeal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUMBER_DEAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberDeal() {
    return numberDeal;
  }


  public void setNumberDeal(Integer numberDeal) {
    this.numberDeal = numberDeal;
  }


  public BnhpDivisionBusinessAllOfProperties originalDocument(Integer originalDocument) {
    
    this.originalDocument = originalDocument;
    return this;
  }

   /**
   * Get originalDocument
   * @return originalDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ORIGINAL_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOriginalDocument() {
    return originalDocument;
  }


  public void setOriginalDocument(Integer originalDocument) {
    this.originalDocument = originalDocument;
  }


  public BnhpDivisionBusinessAllOfProperties propertyType(Integer propertyType) {
    
    this.propertyType = propertyType;
    return this;
  }

   /**
   * Get propertyType
   * @return propertyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPropertyType() {
    return propertyType;
  }


  public void setPropertyType(Integer propertyType) {
    this.propertyType = propertyType;
  }


  public BnhpDivisionBusinessAllOfProperties serialNbrLoanGuarantee(Integer serialNbrLoanGuarantee) {
    
    this.serialNbrLoanGuarantee = serialNbrLoanGuarantee;
    return this;
  }

   /**
   * Get serialNbrLoanGuarantee
   * @return serialNbrLoanGuarantee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SERIAL_NBR_LOAN_GUARANTEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSerialNbrLoanGuarantee() {
    return serialNbrLoanGuarantee;
  }


  public void setSerialNbrLoanGuarantee(Integer serialNbrLoanGuarantee) {
    this.serialNbrLoanGuarantee = serialNbrLoanGuarantee;
  }


  public BnhpDivisionBusinessAllOfProperties tathelkaNumber(Integer tathelkaNumber) {
    
    this.tathelkaNumber = tathelkaNumber;
    return this;
  }

   /**
   * Get tathelkaNumber
   * @return tathelkaNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TATHELKA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTathelkaNumber() {
    return tathelkaNumber;
  }


  public void setTathelkaNumber(Integer tathelkaNumber) {
    this.tathelkaNumber = tathelkaNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpDivisionBusinessAllOfProperties bnhpDivisionBusinessAllOfProperties = (BnhpDivisionBusinessAllOfProperties) o;
    return Objects.equals(this.carNumber, bnhpDivisionBusinessAllOfProperties.carNumber) &&
        Objects.equals(this.creditType, bnhpDivisionBusinessAllOfProperties.creditType) &&
        Objects.equals(this.depositNumber, bnhpDivisionBusinessAllOfProperties.depositNumber) &&
        Objects.equals(this.expirationDate, bnhpDivisionBusinessAllOfProperties.expirationDate) &&
        Objects.equals(this.gushNumber, bnhpDivisionBusinessAllOfProperties.gushNumber) &&
        Objects.equals(this.helkaNumber, bnhpDivisionBusinessAllOfProperties.helkaNumber) &&
        Objects.equals(this.numberBranchConfidence, bnhpDivisionBusinessAllOfProperties.numberBranchConfidence) &&
        Objects.equals(this.numberConfidence, bnhpDivisionBusinessAllOfProperties.numberConfidence) &&
        Objects.equals(this.numberDeal, bnhpDivisionBusinessAllOfProperties.numberDeal) &&
        Objects.equals(this.originalDocument, bnhpDivisionBusinessAllOfProperties.originalDocument) &&
        Objects.equals(this.propertyType, bnhpDivisionBusinessAllOfProperties.propertyType) &&
        Objects.equals(this.serialNbrLoanGuarantee, bnhpDivisionBusinessAllOfProperties.serialNbrLoanGuarantee) &&
        Objects.equals(this.tathelkaNumber, bnhpDivisionBusinessAllOfProperties.tathelkaNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carNumber, creditType, depositNumber, expirationDate, gushNumber, helkaNumber, numberBranchConfidence, numberConfidence, numberDeal, originalDocument, propertyType, serialNbrLoanGuarantee, tathelkaNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpDivisionBusinessAllOfProperties {\n");
    sb.append("    carNumber: ").append(toIndentedString(carNumber)).append("\n");
    sb.append("    creditType: ").append(toIndentedString(creditType)).append("\n");
    sb.append("    depositNumber: ").append(toIndentedString(depositNumber)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    gushNumber: ").append(toIndentedString(gushNumber)).append("\n");
    sb.append("    helkaNumber: ").append(toIndentedString(helkaNumber)).append("\n");
    sb.append("    numberBranchConfidence: ").append(toIndentedString(numberBranchConfidence)).append("\n");
    sb.append("    numberConfidence: ").append(toIndentedString(numberConfidence)).append("\n");
    sb.append("    numberDeal: ").append(toIndentedString(numberDeal)).append("\n");
    sb.append("    originalDocument: ").append(toIndentedString(originalDocument)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    serialNbrLoanGuarantee: ").append(toIndentedString(serialNbrLoanGuarantee)).append("\n");
    sb.append("    tathelkaNumber: ").append(toIndentedString(tathelkaNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpDocFolderData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderDataAllOf;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocData;
import com.poalim.sigverifysanitizer.documentum.model.Customer;
import com.poalim.sigverifysanitizer.documentum.model.DocumentData;
import com.poalim.sigverifysanitizer.documentum.model.SysObjectData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpDocFolderData
 */
@JsonPropertyOrder({
  BnhpDocFolderData.JSON_PROPERTY_CUSTOMERS,
  BnhpDocFolderData.JSON_PROPERTY_FOLDER_CONTENT,
  BnhpDocFolderData.JSON_PROPERTY_IS_EMPTY
})
@JsonTypeName("BnhpDocFolderData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDoc"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolder"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDoc"),
})

public class BnhpDocFolderData extends SysObjectData {
  public static final String JSON_PROPERTY_CUSTOMERS = "customers";
  private List<Customer> customers = null;

  public static final String JSON_PROPERTY_FOLDER_CONTENT = "folderContent";
  private List<DocumentData> folderContent = null;

  public static final String JSON_PROPERTY_IS_EMPTY = "isEmpty";
  private Boolean isEmpty;


  public BnhpDocFolderData customers(List<Customer> customers) {
    
    this.customers = customers;
    return this;
  }

  public BnhpDocFolderData addCustomersItem(Customer customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Customer> getCustomers() {
    return customers;
  }


  public void setCustomers(List<Customer> customers) {
    this.customers = customers;
  }


  public BnhpDocFolderData folderContent(List<DocumentData> folderContent) {
    
    this.folderContent = folderContent;
    return this;
  }

  public BnhpDocFolderData addFolderContentItem(DocumentData folderContentItem) {
    if (this.folderContent == null) {
      this.folderContent = new ArrayList<>();
    }
    this.folderContent.add(folderContentItem);
    return this;
  }

   /**
   * Get folderContent
   * @return folderContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FOLDER_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocumentData> getFolderContent() {
    return folderContent;
  }


  public void setFolderContent(List<DocumentData> folderContent) {
    this.folderContent = folderContent;
  }


   /**
   * Get isEmpty
   * @return isEmpty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEmpty() {
    return isEmpty;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpDocFolderData bnhpDocFolderData = (BnhpDocFolderData) o;
    return Objects.equals(this.customers, bnhpDocFolderData.customers) &&
        Objects.equals(this.folderContent, bnhpDocFolderData.folderContent) &&
        Objects.equals(this.isEmpty, bnhpDocFolderData.isEmpty) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customers, folderContent, isEmpty, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpDocFolderData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    folderContent: ").append(toIndentedString(folderContent)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpDocFolderDataAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.Customer;
import com.poalim.sigverifysanitizer.documentum.model.DocumentData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpDocFolderDataAllOf
 */
@JsonPropertyOrder({
  BnhpDocFolderDataAllOf.JSON_PROPERTY_CUSTOMERS,
  BnhpDocFolderDataAllOf.JSON_PROPERTY_FOLDER_CONTENT,
  BnhpDocFolderDataAllOf.JSON_PROPERTY_IS_EMPTY
})
@JsonTypeName("BnhpDocFolderData_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpDocFolderDataAllOf {
  public static final String JSON_PROPERTY_CUSTOMERS = "customers";
  private List<Customer> customers = null;

  public static final String JSON_PROPERTY_FOLDER_CONTENT = "folderContent";
  private List<DocumentData> folderContent = null;

  public static final String JSON_PROPERTY_IS_EMPTY = "isEmpty";
  private Boolean isEmpty;


  public BnhpDocFolderDataAllOf customers(List<Customer> customers) {
    
    this.customers = customers;
    return this;
  }

  public BnhpDocFolderDataAllOf addCustomersItem(Customer customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Customer> getCustomers() {
    return customers;
  }


  public void setCustomers(List<Customer> customers) {
    this.customers = customers;
  }


  public BnhpDocFolderDataAllOf folderContent(List<DocumentData> folderContent) {
    
    this.folderContent = folderContent;
    return this;
  }

  public BnhpDocFolderDataAllOf addFolderContentItem(DocumentData folderContentItem) {
    if (this.folderContent == null) {
      this.folderContent = new ArrayList<>();
    }
    this.folderContent.add(folderContentItem);
    return this;
  }

   /**
   * Get folderContent
   * @return folderContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FOLDER_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocumentData> getFolderContent() {
    return folderContent;
  }


  public void setFolderContent(List<DocumentData> folderContent) {
    this.folderContent = folderContent;
  }


   /**
   * Get isEmpty
   * @return isEmpty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEmpty() {
    return isEmpty;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpDocFolderDataAllOf bnhpDocFolderDataAllOf = (BnhpDocFolderDataAllOf) o;
    return Objects.equals(this.customers, bnhpDocFolderDataAllOf.customers) &&
        Objects.equals(this.folderContent, bnhpDocFolderDataAllOf.folderContent) &&
        Objects.equals(this.isEmpty, bnhpDocFolderDataAllOf.isEmpty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customers, folderContent, isEmpty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpDocFolderDataAllOf {\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    folderContent: ").append(toIndentedString(folderContent)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpGeneralDocData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocDataAllOf;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.SysObjectData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpGeneralDocData
 */
@JsonPropertyOrder({
  BnhpGeneralDocData.JSON_PROPERTY_DOC_FILES,
  BnhpGeneralDocData.JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM,
  BnhpGeneralDocData.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  BnhpGeneralDocData.JSON_PROPERTY_OWNER
})
@JsonTypeName("BnhpGeneralDocData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDoc"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolder"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDoc"),
})

public class BnhpGeneralDocData extends SysObjectData {
  public static final String JSON_PROPERTY_DOC_FILES = "docFiles";
  private List<DocFile> docFiles = null;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM = "legacyDocumentEntryDttm";
  private OffsetDateTime legacyDocumentEntryDttm;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "legacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;


  public BnhpGeneralDocData docFiles(List<DocFile> docFiles) {
    
    this.docFiles = docFiles;
    return this;
  }

  public BnhpGeneralDocData addDocFilesItem(DocFile docFilesItem) {
    if (this.docFiles == null) {
      this.docFiles = new ArrayList<>();
    }
    this.docFiles.add(docFilesItem);
    return this;
  }

   /**
   * Get docFiles
   * @return docFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocFile> getDocFiles() {
    return docFiles;
  }


  public void setDocFiles(List<DocFile> docFiles) {
    this.docFiles = docFiles;
  }


  public BnhpGeneralDocData legacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
    return this;
  }

   /**
   * Get legacyDocumentEntryDttm
   * @return legacyDocumentEntryDttm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLegacyDocumentEntryDttm() {
    return legacyDocumentEntryDttm;
  }


  public void setLegacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
  }


  public BnhpGeneralDocData legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public BnhpGeneralDocData owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpGeneralDocData bnhpGeneralDocData = (BnhpGeneralDocData) o;
    return Objects.equals(this.docFiles, bnhpGeneralDocData.docFiles) &&
        Objects.equals(this.legacyDocumentEntryDttm, bnhpGeneralDocData.legacyDocumentEntryDttm) &&
        Objects.equals(this.legacyDocumentId, bnhpGeneralDocData.legacyDocumentId) &&
        Objects.equals(this.owner, bnhpGeneralDocData.owner) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docFiles, legacyDocumentEntryDttm, legacyDocumentId, owner, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpGeneralDocData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    docFiles: ").append(toIndentedString(docFiles)).append("\n");
    sb.append("    legacyDocumentEntryDttm: ").append(toIndentedString(legacyDocumentEntryDttm)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpGeneralDocDataAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpGeneralDocDataAllOf
 */
@JsonPropertyOrder({
  BnhpGeneralDocDataAllOf.JSON_PROPERTY_DOC_FILES,
  BnhpGeneralDocDataAllOf.JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM,
  BnhpGeneralDocDataAllOf.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  BnhpGeneralDocDataAllOf.JSON_PROPERTY_OWNER
})
@JsonTypeName("BnhpGeneralDocData_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpGeneralDocDataAllOf {
  public static final String JSON_PROPERTY_DOC_FILES = "docFiles";
  private List<DocFile> docFiles = null;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM = "legacyDocumentEntryDttm";
  private OffsetDateTime legacyDocumentEntryDttm;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "legacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;


  public BnhpGeneralDocDataAllOf docFiles(List<DocFile> docFiles) {
    
    this.docFiles = docFiles;
    return this;
  }

  public BnhpGeneralDocDataAllOf addDocFilesItem(DocFile docFilesItem) {
    if (this.docFiles == null) {
      this.docFiles = new ArrayList<>();
    }
    this.docFiles.add(docFilesItem);
    return this;
  }

   /**
   * Get docFiles
   * @return docFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocFile> getDocFiles() {
    return docFiles;
  }


  public void setDocFiles(List<DocFile> docFiles) {
    this.docFiles = docFiles;
  }


  public BnhpGeneralDocDataAllOf legacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
    return this;
  }

   /**
   * Get legacyDocumentEntryDttm
   * @return legacyDocumentEntryDttm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLegacyDocumentEntryDttm() {
    return legacyDocumentEntryDttm;
  }


  public void setLegacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
  }


  public BnhpGeneralDocDataAllOf legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public BnhpGeneralDocDataAllOf owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpGeneralDocDataAllOf bnhpGeneralDocDataAllOf = (BnhpGeneralDocDataAllOf) o;
    return Objects.equals(this.docFiles, bnhpGeneralDocDataAllOf.docFiles) &&
        Objects.equals(this.legacyDocumentEntryDttm, bnhpGeneralDocDataAllOf.legacyDocumentEntryDttm) &&
        Objects.equals(this.legacyDocumentId, bnhpGeneralDocDataAllOf.legacyDocumentId) &&
        Objects.equals(this.owner, bnhpGeneralDocDataAllOf.owner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docFiles, legacyDocumentEntryDttm, legacyDocumentId, owner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpGeneralDocDataAllOf {\n");
    sb.append("    docFiles: ").append(toIndentedString(docFiles)).append("\n");
    sb.append("    legacyDocumentEntryDttm: ").append(toIndentedString(legacyDocumentEntryDttm)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpPaperDoc.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDoc;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusiness;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDoc;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDocAllOf;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDocAllOfProperties;
import com.poalim.sigverifysanitizer.documentum.model.DocPropertyExtension;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpPaperDoc
 */
@JsonPropertyOrder({
  BnhpPaperDoc.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("bnhp_paper_doc")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "name", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCorporateDoc.class, name = "bnhp_corporate_doc"),
  @JsonSubTypes.Type(value = BnhpDivisionBusiness.class, name = "bnhp_division_business"),
  @JsonSubTypes.Type(value = BnhpPaperDoc.class, name = "bnhp_paper_doc"),
})

public class BnhpPaperDoc extends DocPropertyExtension {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpPaperDocAllOfProperties properties;


  public BnhpPaperDoc properties(BnhpPaperDocAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpPaperDocAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpPaperDocAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpPaperDoc bnhpPaperDoc = (BnhpPaperDoc) o;
    return Objects.equals(this.properties, bnhpPaperDoc.properties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpPaperDoc {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpPaperDocAllOf.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDocAllOfProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * extension for scanned documents
 */
//@ApiModel(description = "extension for scanned documents")
@JsonPropertyOrder({
  BnhpPaperDocAllOf.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("bnhp_paper_doc_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpPaperDocAllOf {
  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private BnhpPaperDocAllOfProperties properties;


  public BnhpPaperDocAllOf properties(BnhpPaperDocAllOfProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BnhpPaperDocAllOfProperties getProperties() {
    return properties;
  }


  public void setProperties(BnhpPaperDocAllOfProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpPaperDocAllOf bnhpPaperDocAllOf = (BnhpPaperDocAllOf) o;
    return Objects.equals(this.properties, bnhpPaperDocAllOf.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpPaperDocAllOf {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\BnhpPaperDocAllOfProperties.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * BnhpPaperDocAllOfProperties
 */
@JsonPropertyOrder({
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_ARCHIVE_BOX_NBR,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_ARCHIVE_DATE,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_ARCHIVE_FILM_NBR,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_BANK_ARCHIVE_ID,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_BAR_CODE,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_BOX_BATCH_NBR,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_BOX_DOC_SERIAL_NBR,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_DOC_LOCATION_CODE,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_DOCUMENT_PAGE_CNT,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_FILM_FRAME_NBR,
  BnhpPaperDocAllOfProperties.JSON_PROPERTY_PAPER_DESTRUCTION
})
@JsonTypeName("bnhp_paper_doc_allOf_properties")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class BnhpPaperDocAllOfProperties {
  public static final String JSON_PROPERTY_ARCHIVE_BOX_NBR = "archive_box_nbr";
  private Integer archiveBoxNbr;

  public static final String JSON_PROPERTY_ARCHIVE_DATE = "archive_date";
  private OffsetDateTime archiveDate;

  public static final String JSON_PROPERTY_ARCHIVE_FILM_NBR = "archive_film_nbr";
  private Integer archiveFilmNbr;

  public static final String JSON_PROPERTY_BANK_ARCHIVE_ID = "bank_archive_id";
  private Integer bankArchiveId;

  public static final String JSON_PROPERTY_BAR_CODE = "bar_code";
  private String barCode;

  public static final String JSON_PROPERTY_BOX_BATCH_NBR = "box_batch_nbr";
  private Integer boxBatchNbr;

  public static final String JSON_PROPERTY_BOX_DOC_SERIAL_NBR = "box_doc_serial_nbr";
  private Integer boxDocSerialNbr;

  public static final String JSON_PROPERTY_DOC_LOCATION_CODE = "doc_location_code";
  private Integer docLocationCode;

  public static final String JSON_PROPERTY_DOCUMENT_PAGE_CNT = "document_page_cnt";
  private Integer documentPageCnt;

  public static final String JSON_PROPERTY_FILM_FRAME_NBR = "film_frame_nbr";
  private Integer filmFrameNbr;

  public static final String JSON_PROPERTY_PAPER_DESTRUCTION = "paper_destruction";
  private OffsetDateTime paperDestruction;


  public BnhpPaperDocAllOfProperties archiveBoxNbr(Integer archiveBoxNbr) {
    
    this.archiveBoxNbr = archiveBoxNbr;
    return this;
  }

   /**
   * Get archiveBoxNbr
   * @return archiveBoxNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ARCHIVE_BOX_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getArchiveBoxNbr() {
    return archiveBoxNbr;
  }


  public void setArchiveBoxNbr(Integer archiveBoxNbr) {
    this.archiveBoxNbr = archiveBoxNbr;
  }


  public BnhpPaperDocAllOfProperties archiveDate(OffsetDateTime archiveDate) {
    
    this.archiveDate = archiveDate;
    return this;
  }

   /**
   * Get archiveDate
   * @return archiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ARCHIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getArchiveDate() {
    return archiveDate;
  }


  public void setArchiveDate(OffsetDateTime archiveDate) {
    this.archiveDate = archiveDate;
  }


  public BnhpPaperDocAllOfProperties archiveFilmNbr(Integer archiveFilmNbr) {
    
    this.archiveFilmNbr = archiveFilmNbr;
    return this;
  }

   /**
   * Get archiveFilmNbr
   * @return archiveFilmNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ARCHIVE_FILM_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getArchiveFilmNbr() {
    return archiveFilmNbr;
  }


  public void setArchiveFilmNbr(Integer archiveFilmNbr) {
    this.archiveFilmNbr = archiveFilmNbr;
  }


  public BnhpPaperDocAllOfProperties bankArchiveId(Integer bankArchiveId) {
    
    this.bankArchiveId = bankArchiveId;
    return this;
  }

   /**
   * Get bankArchiveId
   * @return bankArchiveId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BANK_ARCHIVE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBankArchiveId() {
    return bankArchiveId;
  }


  public void setBankArchiveId(Integer bankArchiveId) {
    this.bankArchiveId = bankArchiveId;
  }


  public BnhpPaperDocAllOfProperties barCode(String barCode) {
    
    this.barCode = barCode;
    return this;
  }

   /**
   * Get barCode
   * @return barCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BAR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBarCode() {
    return barCode;
  }


  public void setBarCode(String barCode) {
    this.barCode = barCode;
  }


  public BnhpPaperDocAllOfProperties boxBatchNbr(Integer boxBatchNbr) {
    
    this.boxBatchNbr = boxBatchNbr;
    return this;
  }

   /**
   * Get boxBatchNbr
   * @return boxBatchNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BOX_BATCH_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBoxBatchNbr() {
    return boxBatchNbr;
  }


  public void setBoxBatchNbr(Integer boxBatchNbr) {
    this.boxBatchNbr = boxBatchNbr;
  }


  public BnhpPaperDocAllOfProperties boxDocSerialNbr(Integer boxDocSerialNbr) {
    
    this.boxDocSerialNbr = boxDocSerialNbr;
    return this;
  }

   /**
   * Get boxDocSerialNbr
   * @return boxDocSerialNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BOX_DOC_SERIAL_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBoxDocSerialNbr() {
    return boxDocSerialNbr;
  }


  public void setBoxDocSerialNbr(Integer boxDocSerialNbr) {
    this.boxDocSerialNbr = boxDocSerialNbr;
  }


  public BnhpPaperDocAllOfProperties docLocationCode(Integer docLocationCode) {
    
    this.docLocationCode = docLocationCode;
    return this;
  }

   /**
   * Get docLocationCode
   * @return docLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_LOCATION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocLocationCode() {
    return docLocationCode;
  }


  public void setDocLocationCode(Integer docLocationCode) {
    this.docLocationCode = docLocationCode;
  }


  public BnhpPaperDocAllOfProperties documentPageCnt(Integer documentPageCnt) {
    
    this.documentPageCnt = documentPageCnt;
    return this;
  }

   /**
   * Get documentPageCnt
   * @return documentPageCnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_PAGE_CNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocumentPageCnt() {
    return documentPageCnt;
  }


  public void setDocumentPageCnt(Integer documentPageCnt) {
    this.documentPageCnt = documentPageCnt;
  }


  public BnhpPaperDocAllOfProperties filmFrameNbr(Integer filmFrameNbr) {
    
    this.filmFrameNbr = filmFrameNbr;
    return this;
  }

   /**
   * Get filmFrameNbr
   * @return filmFrameNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILM_FRAME_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFilmFrameNbr() {
    return filmFrameNbr;
  }


  public void setFilmFrameNbr(Integer filmFrameNbr) {
    this.filmFrameNbr = filmFrameNbr;
  }


  public BnhpPaperDocAllOfProperties paperDestruction(OffsetDateTime paperDestruction) {
    
    this.paperDestruction = paperDestruction;
    return this;
  }

   /**
   * Get paperDestruction
   * @return paperDestruction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAPER_DESTRUCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPaperDestruction() {
    return paperDestruction;
  }


  public void setPaperDestruction(OffsetDateTime paperDestruction) {
    this.paperDestruction = paperDestruction;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BnhpPaperDocAllOfProperties bnhpPaperDocAllOfProperties = (BnhpPaperDocAllOfProperties) o;
    return Objects.equals(this.archiveBoxNbr, bnhpPaperDocAllOfProperties.archiveBoxNbr) &&
        Objects.equals(this.archiveDate, bnhpPaperDocAllOfProperties.archiveDate) &&
        Objects.equals(this.archiveFilmNbr, bnhpPaperDocAllOfProperties.archiveFilmNbr) &&
        Objects.equals(this.bankArchiveId, bnhpPaperDocAllOfProperties.bankArchiveId) &&
        Objects.equals(this.barCode, bnhpPaperDocAllOfProperties.barCode) &&
        Objects.equals(this.boxBatchNbr, bnhpPaperDocAllOfProperties.boxBatchNbr) &&
        Objects.equals(this.boxDocSerialNbr, bnhpPaperDocAllOfProperties.boxDocSerialNbr) &&
        Objects.equals(this.docLocationCode, bnhpPaperDocAllOfProperties.docLocationCode) &&
        Objects.equals(this.documentPageCnt, bnhpPaperDocAllOfProperties.documentPageCnt) &&
        Objects.equals(this.filmFrameNbr, bnhpPaperDocAllOfProperties.filmFrameNbr) &&
        Objects.equals(this.paperDestruction, bnhpPaperDocAllOfProperties.paperDestruction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveBoxNbr, archiveDate, archiveFilmNbr, bankArchiveId, barCode, boxBatchNbr, boxDocSerialNbr, docLocationCode, documentPageCnt, filmFrameNbr, paperDestruction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BnhpPaperDocAllOfProperties {\n");
    sb.append("    archiveBoxNbr: ").append(toIndentedString(archiveBoxNbr)).append("\n");
    sb.append("    archiveDate: ").append(toIndentedString(archiveDate)).append("\n");
    sb.append("    archiveFilmNbr: ").append(toIndentedString(archiveFilmNbr)).append("\n");
    sb.append("    bankArchiveId: ").append(toIndentedString(bankArchiveId)).append("\n");
    sb.append("    barCode: ").append(toIndentedString(barCode)).append("\n");
    sb.append("    boxBatchNbr: ").append(toIndentedString(boxBatchNbr)).append("\n");
    sb.append("    boxDocSerialNbr: ").append(toIndentedString(boxDocSerialNbr)).append("\n");
    sb.append("    docLocationCode: ").append(toIndentedString(docLocationCode)).append("\n");
    sb.append("    documentPageCnt: ").append(toIndentedString(documentPageCnt)).append("\n");
    sb.append("    filmFrameNbr: ").append(toIndentedString(filmFrameNbr)).append("\n");
    sb.append("    paperDestruction: ").append(toIndentedString(paperDestruction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\Customer.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Customer
 */
@JsonPropertyOrder({
  Customer.JSON_PROPERTY_COMPLETE_CUSTOMER_ID_CODE,
  Customer.JSON_PROPERTY_CUSTOMER_FULL_NAME,
  Customer.JSON_PROPERTY_CUSTOMER_ID,
  Customer.JSON_PROPERTY_CUSTOMER_ID_DOC_TYPE_CODE,
  Customer.JSON_PROPERTY_CUSTOMER_SERIAL_NBR,
  Customer.JSON_PROPERTY_OCCASIONAL_CUSTOMER_IND
})
@JsonTypeName("Customer")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class Customer {
  public static final String JSON_PROPERTY_COMPLETE_CUSTOMER_ID_CODE = "completeCustomerIdCode";
  private String completeCustomerIdCode;

  public static final String JSON_PROPERTY_CUSTOMER_FULL_NAME = "customerFullName";
  private String customerFullName;

  public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
  private Long customerId;

  public static final String JSON_PROPERTY_CUSTOMER_ID_DOC_TYPE_CODE = "customerIdDocTypeCode";
  private Integer customerIdDocTypeCode;

  public static final String JSON_PROPERTY_CUSTOMER_SERIAL_NBR = "customerSerialNbr";
  private Integer customerSerialNbr;

  public static final String JSON_PROPERTY_OCCASIONAL_CUSTOMER_IND = "occasionalCustomerInd";
  private Boolean occasionalCustomerInd;


  public Customer completeCustomerIdCode(String completeCustomerIdCode) {
    
    this.completeCustomerIdCode = completeCustomerIdCode;
    return this;
  }

   /**
   * Get completeCustomerIdCode
   * @return completeCustomerIdCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COMPLETE_CUSTOMER_ID_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompleteCustomerIdCode() {
    return completeCustomerIdCode;
  }


  public void setCompleteCustomerIdCode(String completeCustomerIdCode) {
    this.completeCustomerIdCode = completeCustomerIdCode;
  }


  public Customer customerFullName(String customerFullName) {
    
    this.customerFullName = customerFullName;
    return this;
  }

   /**
   * Get customerFullName
   * @return customerFullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomerFullName() {
    return customerFullName;
  }


  public void setCustomerFullName(String customerFullName) {
    this.customerFullName = customerFullName;
  }


  public Customer customerId(Long customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public Customer customerIdDocTypeCode(Integer customerIdDocTypeCode) {
    
    this.customerIdDocTypeCode = customerIdDocTypeCode;
    return this;
  }

   /**
   * Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי
   * @return customerIdDocTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID_DOC_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCustomerIdDocTypeCode() {
    return customerIdDocTypeCode;
  }


  public void setCustomerIdDocTypeCode(Integer customerIdDocTypeCode) {
    this.customerIdDocTypeCode = customerIdDocTypeCode;
  }


  public Customer customerSerialNbr(Integer customerSerialNbr) {
    
    this.customerSerialNbr = customerSerialNbr;
    return this;
  }

   /**
   * Get customerSerialNbr
   * @return customerSerialNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_SERIAL_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCustomerSerialNbr() {
    return customerSerialNbr;
  }


  public void setCustomerSerialNbr(Integer customerSerialNbr) {
    this.customerSerialNbr = customerSerialNbr;
  }


  public Customer occasionalCustomerInd(Boolean occasionalCustomerInd) {
    
    this.occasionalCustomerInd = occasionalCustomerInd;
    return this;
  }

   /**
   * Get occasionalCustomerInd
   * @return occasionalCustomerInd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OCCASIONAL_CUSTOMER_IND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOccasionalCustomerInd() {
    return occasionalCustomerInd;
  }


  public void setOccasionalCustomerInd(Boolean occasionalCustomerInd) {
    this.occasionalCustomerInd = occasionalCustomerInd;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.completeCustomerIdCode, customer.completeCustomerIdCode) &&
        Objects.equals(this.customerFullName, customer.customerFullName) &&
        Objects.equals(this.customerId, customer.customerId) &&
        Objects.equals(this.customerIdDocTypeCode, customer.customerIdDocTypeCode) &&
        Objects.equals(this.customerSerialNbr, customer.customerSerialNbr) &&
        Objects.equals(this.occasionalCustomerInd, customer.occasionalCustomerInd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completeCustomerIdCode, customerFullName, customerId, customerIdDocTypeCode, customerSerialNbr, occasionalCustomerInd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    completeCustomerIdCode: ").append(toIndentedString(completeCustomerIdCode)).append("\n");
    sb.append("    customerFullName: ").append(toIndentedString(customerFullName)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerIdDocTypeCode: ").append(toIndentedString(customerIdDocTypeCode)).append("\n");
    sb.append("    customerSerialNbr: ").append(toIndentedString(customerSerialNbr)).append("\n");
    sb.append("    occasionalCustomerInd: ").append(toIndentedString(occasionalCustomerInd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocCustomerData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BankAccount;
import com.poalim.sigverifysanitizer.documentum.model.Customer;
import com.poalim.sigverifysanitizer.documentum.model.DocDetails;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.PensionFund;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocCustomerData
 */
@JsonPropertyOrder({
  DocCustomerData.JSON_PROPERTY_BANK_ACCOUNTS,
  DocCustomerData.JSON_PROPERTY_CUSTOMERS,
  DocCustomerData.JSON_PROPERTY_DOC_DETAILS,
  DocCustomerData.JSON_PROPERTY_EXECUTOR_DETAILS,
  DocCustomerData.JSON_PROPERTY_PENSION_FUND
})
@JsonTypeName("DocCustomerData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class DocCustomerData {
  public static final String JSON_PROPERTY_BANK_ACCOUNTS = "bankAccounts";
  private List<BankAccount> bankAccounts = null;

  public static final String JSON_PROPERTY_CUSTOMERS = "customers";
  private List<Customer> customers = null;

  public static final String JSON_PROPERTY_DOC_DETAILS = "docDetails";
  private DocDetails docDetails;

  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_PENSION_FUND = "pensionFund";
  private PensionFund pensionFund;


  public DocCustomerData bankAccounts(List<BankAccount> bankAccounts) {
    
    this.bankAccounts = bankAccounts;
    return this;
  }

  public DocCustomerData addBankAccountsItem(BankAccount bankAccountsItem) {
    if (this.bankAccounts == null) {
      this.bankAccounts = new ArrayList<>();
    }
    this.bankAccounts.add(bankAccountsItem);
    return this;
  }

   /**
   * Get bankAccounts
   * @return bankAccounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BankAccount> getBankAccounts() {
    return bankAccounts;
  }


  public void setBankAccounts(List<BankAccount> bankAccounts) {
    this.bankAccounts = bankAccounts;
  }


  public DocCustomerData customers(List<Customer> customers) {
    
    this.customers = customers;
    return this;
  }

  public DocCustomerData addCustomersItem(Customer customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Customer> getCustomers() {
    return customers;
  }


  public void setCustomers(List<Customer> customers) {
    this.customers = customers;
  }


  public DocCustomerData docDetails(DocDetails docDetails) {
    
    this.docDetails = docDetails;
    return this;
  }

   /**
   * Get docDetails
   * @return docDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocDetails getDocDetails() {
    return docDetails;
  }


  public void setDocDetails(DocDetails docDetails) {
    this.docDetails = docDetails;
  }


  public DocCustomerData executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public DocCustomerData pensionFund(PensionFund pensionFund) {
    
    this.pensionFund = pensionFund;
    return this;
  }

   /**
   * Get pensionFund
   * @return pensionFund
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PENSION_FUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PensionFund getPensionFund() {
    return pensionFund;
  }


  public void setPensionFund(PensionFund pensionFund) {
    this.pensionFund = pensionFund;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocCustomerData docCustomerData = (DocCustomerData) o;
    return Objects.equals(this.bankAccounts, docCustomerData.bankAccounts) &&
        Objects.equals(this.customers, docCustomerData.customers) &&
        Objects.equals(this.docDetails, docCustomerData.docDetails) &&
        Objects.equals(this.executorDetails, docCustomerData.executorDetails) &&
        Objects.equals(this.pensionFund, docCustomerData.pensionFund);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAccounts, customers, docDetails, executorDetails, pensionFund);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocCustomerData {\n");
    sb.append("    bankAccounts: ").append(toIndentedString(bankAccounts)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    docDetails: ").append(toIndentedString(docDetails)).append("\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    pensionFund: ").append(toIndentedString(pensionFund)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocDetails.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocDetails
 */
@JsonPropertyOrder({
  DocDetails.JSON_PROPERTY_BUSINESS_AREA_CODE,
  DocDetails.JSON_PROPERTY_BUSINESS_PROCESS_ID,
  DocDetails.JSON_PROPERTY_BUSINESS_SUB_AREA_CODE,
  DocDetails.JSON_PROPERTY_CHANNEL_ID,
  DocDetails.JSON_PROPERTY_CONCATENATED_EVENT_IDS,
  DocDetails.JSON_PROPERTY_CURRENCY_CODE,
  DocDetails.JSON_PROPERTY_DCTM_DOCUMENT_ID,
  DocDetails.JSON_PROPERTY_DOC_COMPLETENESS_CODE,
  DocDetails.JSON_PROPERTY_DOC_DELIVERY_NUM,
  DocDetails.JSON_PROPERTY_DOCUMENT_EDITION_NBR,
  DocDetails.JSON_PROPERTY_DOCUMENT_FORM_ID,
  DocDetails.JSON_PROPERTY_DOCUMENT_GROUP_IDS,
  DocDetails.JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM,
  DocDetails.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  DocDetails.JSON_PROPERTY_ONGOING_OR_HISTORY_CODE,
  DocDetails.JSON_PROPERTY_PROJECT_ID,
  DocDetails.JSON_PROPERTY_SCAN_STATUS_CODE,
  DocDetails.JSON_PROPERTY_SIGNATURE_STATUS_CODE,
  DocDetails.JSON_PROPERTY_SYSTEM_CODE,
  DocDetails.JSON_PROPERTY_TEMPLATE_DATA_EXISTS_IND,
  DocDetails.JSON_PROPERTY_TRANSACTION_AMT
})
@JsonTypeName("DocDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class DocDetails {
  public static final String JSON_PROPERTY_BUSINESS_AREA_CODE = "businessAreaCode";
  private Integer businessAreaCode;

  public static final String JSON_PROPERTY_BUSINESS_PROCESS_ID = "businessProcessId";
  private Integer businessProcessId;

  public static final String JSON_PROPERTY_BUSINESS_SUB_AREA_CODE = "businessSubAreaCode";
  private Integer businessSubAreaCode;

  public static final String JSON_PROPERTY_CHANNEL_ID = "channelId";
  private Integer channelId;

  public static final String JSON_PROPERTY_CONCATENATED_EVENT_IDS = "concatenatedEventIds";
  private List<String> concatenatedEventIds = null;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currencyCode";
  private Integer currencyCode;

  public static final String JSON_PROPERTY_DCTM_DOCUMENT_ID = "dctmDocumentId";
  private String dctmDocumentId;

  public static final String JSON_PROPERTY_DOC_COMPLETENESS_CODE = "docCompletenessCode";
  private Integer docCompletenessCode;

  public static final String JSON_PROPERTY_DOC_DELIVERY_NUM = "docDeliveryNum";
  private Integer docDeliveryNum;

  public static final String JSON_PROPERTY_DOCUMENT_EDITION_NBR = "documentEditionNbr";
  private Integer documentEditionNbr;

  public static final String JSON_PROPERTY_DOCUMENT_FORM_ID = "documentFormId";
  private String documentFormId;

  public static final String JSON_PROPERTY_DOCUMENT_GROUP_IDS = "documentGroupIds";
  private List<String> documentGroupIds = null;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM = "legacyDocumentEntryDttm";
  private OffsetDateTime legacyDocumentEntryDttm;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "legacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_ONGOING_OR_HISTORY_CODE = "ongoingOrHistoryCode";
  private Integer ongoingOrHistoryCode;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private Integer projectId;

  public static final String JSON_PROPERTY_SCAN_STATUS_CODE = "scanStatusCode";
  private Integer scanStatusCode;

  public static final String JSON_PROPERTY_SIGNATURE_STATUS_CODE = "signatureStatusCode";
  private Integer signatureStatusCode;

  public static final String JSON_PROPERTY_SYSTEM_CODE = "systemCode";
  private Integer systemCode;

  public static final String JSON_PROPERTY_TEMPLATE_DATA_EXISTS_IND = "templateDataExistsInd";
  private Boolean templateDataExistsInd;

  public static final String JSON_PROPERTY_TRANSACTION_AMT = "transactionAmt";
  private Double transactionAmt;


  public DocDetails businessAreaCode(Integer businessAreaCode) {
    
    this.businessAreaCode = businessAreaCode;
    return this;
  }

   /**
   * Get businessAreaCode
   * @return businessAreaCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BUSINESS_AREA_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBusinessAreaCode() {
    return businessAreaCode;
  }


  public void setBusinessAreaCode(Integer businessAreaCode) {
    this.businessAreaCode = businessAreaCode;
  }


  public DocDetails businessProcessId(Integer businessProcessId) {
    
    this.businessProcessId = businessProcessId;
    return this;
  }

   /**
   * Get businessProcessId
   * @return businessProcessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BUSINESS_PROCESS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBusinessProcessId() {
    return businessProcessId;
  }


  public void setBusinessProcessId(Integer businessProcessId) {
    this.businessProcessId = businessProcessId;
  }


  public DocDetails businessSubAreaCode(Integer businessSubAreaCode) {
    
    this.businessSubAreaCode = businessSubAreaCode;
    return this;
  }

   /**
   * Get businessSubAreaCode
   * @return businessSubAreaCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BUSINESS_SUB_AREA_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBusinessSubAreaCode() {
    return businessSubAreaCode;
  }


  public void setBusinessSubAreaCode(Integer businessSubAreaCode) {
    this.businessSubAreaCode = businessSubAreaCode;
  }


  public DocDetails channelId(Integer channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * Get channelId
   * @return channelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHANNEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getChannelId() {
    return channelId;
  }


  public void setChannelId(Integer channelId) {
    this.channelId = channelId;
  }


  public DocDetails concatenatedEventIds(List<String> concatenatedEventIds) {
    
    this.concatenatedEventIds = concatenatedEventIds;
    return this;
  }

  public DocDetails addConcatenatedEventIdsItem(String concatenatedEventIdsItem) {
    if (this.concatenatedEventIds == null) {
      this.concatenatedEventIds = new ArrayList<>();
    }
    this.concatenatedEventIds.add(concatenatedEventIdsItem);
    return this;
  }

   /**
   * Get concatenatedEventIds
   * @return concatenatedEventIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONCATENATED_EVENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getConcatenatedEventIds() {
    return concatenatedEventIds;
  }


  public void setConcatenatedEventIds(List<String> concatenatedEventIds) {
    this.concatenatedEventIds = concatenatedEventIds;
  }


  public DocDetails currencyCode(Integer currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(Integer currencyCode) {
    this.currencyCode = currencyCode;
  }


  public DocDetails dctmDocumentId(String dctmDocumentId) {
    
    this.dctmDocumentId = dctmDocumentId;
    return this;
  }

   /**
   * Get dctmDocumentId
   * @return dctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDctmDocumentId() {
    return dctmDocumentId;
  }


  public void setDctmDocumentId(String dctmDocumentId) {
    this.dctmDocumentId = dctmDocumentId;
  }


  public DocDetails docCompletenessCode(Integer docCompletenessCode) {
    
    this.docCompletenessCode = docCompletenessCode;
    return this;
  }

   /**
   * Get docCompletenessCode
   * @return docCompletenessCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_COMPLETENESS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocCompletenessCode() {
    return docCompletenessCode;
  }


  public void setDocCompletenessCode(Integer docCompletenessCode) {
    this.docCompletenessCode = docCompletenessCode;
  }


  public DocDetails docDeliveryNum(Integer docDeliveryNum) {
    
    this.docDeliveryNum = docDeliveryNum;
    return this;
  }

   /**
   * Get docDeliveryNum
   * @return docDeliveryNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_DELIVERY_NUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocDeliveryNum() {
    return docDeliveryNum;
  }


  public void setDocDeliveryNum(Integer docDeliveryNum) {
    this.docDeliveryNum = docDeliveryNum;
  }


  public DocDetails documentEditionNbr(Integer documentEditionNbr) {
    
    this.documentEditionNbr = documentEditionNbr;
    return this;
  }

   /**
   * Get documentEditionNbr
   * @return documentEditionNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_EDITION_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocumentEditionNbr() {
    return documentEditionNbr;
  }


  public void setDocumentEditionNbr(Integer documentEditionNbr) {
    this.documentEditionNbr = documentEditionNbr;
  }


  public DocDetails documentFormId(String documentFormId) {
    
    this.documentFormId = documentFormId;
    return this;
  }

   /**
   * Get documentFormId
   * @return documentFormId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_FORM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentFormId() {
    return documentFormId;
  }


  public void setDocumentFormId(String documentFormId) {
    this.documentFormId = documentFormId;
  }


  public DocDetails documentGroupIds(List<String> documentGroupIds) {
    
    this.documentGroupIds = documentGroupIds;
    return this;
  }

  public DocDetails addDocumentGroupIdsItem(String documentGroupIdsItem) {
    if (this.documentGroupIds == null) {
      this.documentGroupIds = new ArrayList<>();
    }
    this.documentGroupIds.add(documentGroupIdsItem);
    return this;
  }

   /**
   * Get documentGroupIds
   * @return documentGroupIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_GROUP_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDocumentGroupIds() {
    return documentGroupIds;
  }


  public void setDocumentGroupIds(List<String> documentGroupIds) {
    this.documentGroupIds = documentGroupIds;
  }


  public DocDetails legacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
    return this;
  }

   /**
   * Get legacyDocumentEntryDttm
   * @return legacyDocumentEntryDttm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLegacyDocumentEntryDttm() {
    return legacyDocumentEntryDttm;
  }


  public void setLegacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
  }


  public DocDetails legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public DocDetails ongoingOrHistoryCode(Integer ongoingOrHistoryCode) {
    
    this.ongoingOrHistoryCode = ongoingOrHistoryCode;
    return this;
  }

   /**
   * Get ongoingOrHistoryCode
   * @return ongoingOrHistoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ONGOING_OR_HISTORY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOngoingOrHistoryCode() {
    return ongoingOrHistoryCode;
  }


  public void setOngoingOrHistoryCode(Integer ongoingOrHistoryCode) {
    this.ongoingOrHistoryCode = ongoingOrHistoryCode;
  }


  public DocDetails projectId(Integer projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public DocDetails scanStatusCode(Integer scanStatusCode) {
    
    this.scanStatusCode = scanStatusCode;
    return this;
  }

   /**
   * Get scanStatusCode
   * @return scanStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCAN_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getScanStatusCode() {
    return scanStatusCode;
  }


  public void setScanStatusCode(Integer scanStatusCode) {
    this.scanStatusCode = scanStatusCode;
  }


  public DocDetails signatureStatusCode(Integer signatureStatusCode) {
    
    this.signatureStatusCode = signatureStatusCode;
    return this;
  }

   /**
   * Get signatureStatusCode
   * @return signatureStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIGNATURE_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSignatureStatusCode() {
    return signatureStatusCode;
  }


  public void setSignatureStatusCode(Integer signatureStatusCode) {
    this.signatureStatusCode = signatureStatusCode;
  }


  public DocDetails systemCode(Integer systemCode) {
    
    this.systemCode = systemCode;
    return this;
  }

   /**
   * Get systemCode
   * @return systemCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SYSTEM_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSystemCode() {
    return systemCode;
  }


  public void setSystemCode(Integer systemCode) {
    this.systemCode = systemCode;
  }


  public DocDetails templateDataExistsInd(Boolean templateDataExistsInd) {
    
    this.templateDataExistsInd = templateDataExistsInd;
    return this;
  }

   /**
   * Get templateDataExistsInd
   * @return templateDataExistsInd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TEMPLATE_DATA_EXISTS_IND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTemplateDataExistsInd() {
    return templateDataExistsInd;
  }


  public void setTemplateDataExistsInd(Boolean templateDataExistsInd) {
    this.templateDataExistsInd = templateDataExistsInd;
  }


  public DocDetails transactionAmt(Double transactionAmt) {
    
    this.transactionAmt = transactionAmt;
    return this;
  }

   /**
   * Get transactionAmt
   * @return transactionAmt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_AMT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTransactionAmt() {
    return transactionAmt;
  }


  public void setTransactionAmt(Double transactionAmt) {
    this.transactionAmt = transactionAmt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocDetails docDetails = (DocDetails) o;
    return Objects.equals(this.businessAreaCode, docDetails.businessAreaCode) &&
        Objects.equals(this.businessProcessId, docDetails.businessProcessId) &&
        Objects.equals(this.businessSubAreaCode, docDetails.businessSubAreaCode) &&
        Objects.equals(this.channelId, docDetails.channelId) &&
        Objects.equals(this.concatenatedEventIds, docDetails.concatenatedEventIds) &&
        Objects.equals(this.currencyCode, docDetails.currencyCode) &&
        Objects.equals(this.dctmDocumentId, docDetails.dctmDocumentId) &&
        Objects.equals(this.docCompletenessCode, docDetails.docCompletenessCode) &&
        Objects.equals(this.docDeliveryNum, docDetails.docDeliveryNum) &&
        Objects.equals(this.documentEditionNbr, docDetails.documentEditionNbr) &&
        Objects.equals(this.documentFormId, docDetails.documentFormId) &&
        Objects.equals(this.documentGroupIds, docDetails.documentGroupIds) &&
        Objects.equals(this.legacyDocumentEntryDttm, docDetails.legacyDocumentEntryDttm) &&
        Objects.equals(this.legacyDocumentId, docDetails.legacyDocumentId) &&
        Objects.equals(this.ongoingOrHistoryCode, docDetails.ongoingOrHistoryCode) &&
        Objects.equals(this.projectId, docDetails.projectId) &&
        Objects.equals(this.scanStatusCode, docDetails.scanStatusCode) &&
        Objects.equals(this.signatureStatusCode, docDetails.signatureStatusCode) &&
        Objects.equals(this.systemCode, docDetails.systemCode) &&
        Objects.equals(this.templateDataExistsInd, docDetails.templateDataExistsInd) &&
        Objects.equals(this.transactionAmt, docDetails.transactionAmt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessAreaCode, businessProcessId, businessSubAreaCode, channelId, concatenatedEventIds, currencyCode, dctmDocumentId, docCompletenessCode, docDeliveryNum, documentEditionNbr, documentFormId, documentGroupIds, legacyDocumentEntryDttm, legacyDocumentId, ongoingOrHistoryCode, projectId, scanStatusCode, signatureStatusCode, systemCode, templateDataExistsInd, transactionAmt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocDetails {\n");
    sb.append("    businessAreaCode: ").append(toIndentedString(businessAreaCode)).append("\n");
    sb.append("    businessProcessId: ").append(toIndentedString(businessProcessId)).append("\n");
    sb.append("    businessSubAreaCode: ").append(toIndentedString(businessSubAreaCode)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    concatenatedEventIds: ").append(toIndentedString(concatenatedEventIds)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    dctmDocumentId: ").append(toIndentedString(dctmDocumentId)).append("\n");
    sb.append("    docCompletenessCode: ").append(toIndentedString(docCompletenessCode)).append("\n");
    sb.append("    docDeliveryNum: ").append(toIndentedString(docDeliveryNum)).append("\n");
    sb.append("    documentEditionNbr: ").append(toIndentedString(documentEditionNbr)).append("\n");
    sb.append("    documentFormId: ").append(toIndentedString(documentFormId)).append("\n");
    sb.append("    documentGroupIds: ").append(toIndentedString(documentGroupIds)).append("\n");
    sb.append("    legacyDocumentEntryDttm: ").append(toIndentedString(legacyDocumentEntryDttm)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    ongoingOrHistoryCode: ").append(toIndentedString(ongoingOrHistoryCode)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    scanStatusCode: ").append(toIndentedString(scanStatusCode)).append("\n");
    sb.append("    signatureStatusCode: ").append(toIndentedString(signatureStatusCode)).append("\n");
    sb.append("    systemCode: ").append(toIndentedString(systemCode)).append("\n");
    sb.append("    templateDataExistsInd: ").append(toIndentedString(templateDataExistsInd)).append("\n");
    sb.append("    transactionAmt: ").append(toIndentedString(transactionAmt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocFile.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocFile
 */
@JsonPropertyOrder({
  DocFile.JSON_PROPERTY_ATTRIBUTES,
  DocFile.JSON_PROPERTY_CHECK_SUM,
  DocFile.JSON_PROPERTY_CLASSIFIER,
  DocFile.JSON_PROPERTY_DOC_FORMAT,
  DocFile.JSON_PROPERTY_DOC_SIZE,
  DocFile.JSON_PROPERTY_DOC_STREAM,
  DocFile.JSON_PROPERTY_DOC_U_R_L,
  DocFile.JSON_PROPERTY_DOS_EXTENSION,
  DocFile.JSON_PROPERTY_MIME_TYPE
})
@JsonTypeName("DocFile")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class DocFile {
  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, Object> attributes = null;

  public static final String JSON_PROPERTY_CHECK_SUM = "checkSum";
  private String checkSum;

  public static final String JSON_PROPERTY_CLASSIFIER = "classifier";
  private String classifier;

  public static final String JSON_PROPERTY_DOC_FORMAT = "docFormat";
  private String docFormat;

  public static final String JSON_PROPERTY_DOC_SIZE = "docSize";
  private Long docSize;

  public static final String JSON_PROPERTY_DOC_STREAM = "docStream";
  private byte[] docStream;

  public static final String JSON_PROPERTY_DOC_U_R_L = "docURL";
  private String docURL;

  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;


  public DocFile attributes(Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public DocFile putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public DocFile checkSum(String checkSum) {
    
    this.checkSum = checkSum;
    return this;
  }

   /**
   * Get checkSum
   * @return checkSum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHECK_SUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCheckSum() {
    return checkSum;
  }


  public void setCheckSum(String checkSum) {
    this.checkSum = checkSum;
  }


  public DocFile classifier(String classifier) {
    
    this.classifier = classifier;
    return this;
  }

   /**
   * Content file classifier. Currently primary content has no classifier, secondary content (printboss job) has classifier \\\&quot;secondary\\\&quot;. In the future other classifiers may be used.
   * @return classifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content file classifier. Currently primary content has no classifier, secondary content (printboss job) has classifier \\\"secondary\\\". In the future other classifiers may be used.")
  @JsonProperty(JSON_PROPERTY_CLASSIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClassifier() {
    return classifier;
  }


  public void setClassifier(String classifier) {
    this.classifier = classifier;
  }


  public DocFile docFormat(String docFormat) {
    
    this.docFormat = docFormat;
    return this;
  }

   /**
   * Get docFormat
   * @return docFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocFormat() {
    return docFormat;
  }


  public void setDocFormat(String docFormat) {
    this.docFormat = docFormat;
  }


  public DocFile docSize(Long docSize) {
    
    this.docSize = docSize;
    return this;
  }

   /**
   * Get docSize
   * @return docSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDocSize() {
    return docSize;
  }


  public void setDocSize(Long docSize) {
    this.docSize = docSize;
  }


  public DocFile docStream(byte[] docStream) {
    
    this.docStream = docStream;
    return this;
  }

   /**
   * Get docStream
   * @return docStream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getDocStream() {
    return docStream;
  }


  public void setDocStream(byte[] docStream) {
    this.docStream = docStream;
  }


  public DocFile docURL(String docURL) {
    
    this.docURL = docURL;
    return this;
  }

   /**
   * Get docURL
   * @return docURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocURL() {
    return docURL;
  }


  public void setDocURL(String docURL) {
    this.docURL = docURL;
  }


  public DocFile dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * Get dosExtension
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public DocFile mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocFile docFile = (DocFile) o;
    return Objects.equals(this.attributes, docFile.attributes) &&
        Objects.equals(this.checkSum, docFile.checkSum) &&
        Objects.equals(this.classifier, docFile.classifier) &&
        Objects.equals(this.docFormat, docFile.docFormat) &&
        Objects.equals(this.docSize, docFile.docSize) &&
        Arrays.equals(this.docStream, docFile.docStream) &&
        Objects.equals(this.docURL, docFile.docURL) &&
        Objects.equals(this.dosExtension, docFile.dosExtension) &&
        Objects.equals(this.mimeType, docFile.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, checkSum, classifier, docFormat, docSize, Arrays.hashCode(docStream), docURL, dosExtension, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocFile {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    checkSum: ").append(toIndentedString(checkSum)).append("\n");
    sb.append("    classifier: ").append(toIndentedString(classifier)).append("\n");
    sb.append("    docFormat: ").append(toIndentedString(docFormat)).append("\n");
    sb.append("    docSize: ").append(toIndentedString(docSize)).append("\n");
    sb.append("    docStream: ").append(toIndentedString(docStream)).append("\n");
    sb.append("    docURL: ").append(toIndentedString(docURL)).append("\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocIdData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocIdData
 */
@JsonPropertyOrder({
  DocIdData.JSON_PROPERTY_DCTM_DOCUMENT_ID,
  DocIdData.JSON_PROPERTY_VERSION_LABELS,
  DocIdData.JSON_PROPERTY_VERSION_NUMBER
})
@JsonTypeName("docIdData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class DocIdData {
  public static final String JSON_PROPERTY_DCTM_DOCUMENT_ID = "dctmDocumentId";
  private String dctmDocumentId;

  public static final String JSON_PROPERTY_VERSION_LABELS = "versionLabels";
  private List<String> versionLabels = null;

  public static final String JSON_PROPERTY_VERSION_NUMBER = "versionNumber";
  private String versionNumber;


  public DocIdData dctmDocumentId(String dctmDocumentId) {
    
    this.dctmDocumentId = dctmDocumentId;
    return this;
  }

   /**
   * Get dctmDocumentId
   * @return dctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDctmDocumentId() {
    return dctmDocumentId;
  }


  public void setDctmDocumentId(String dctmDocumentId) {
    this.dctmDocumentId = dctmDocumentId;
  }


  public DocIdData versionLabels(List<String> versionLabels) {
    
    this.versionLabels = versionLabels;
    return this;
  }

  public DocIdData addVersionLabelsItem(String versionLabelsItem) {
    if (this.versionLabels == null) {
      this.versionLabels = new ArrayList<>();
    }
    this.versionLabels.add(versionLabelsItem);
    return this;
  }

   /**
   * Get versionLabels
   * @return versionLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getVersionLabels() {
    return versionLabels;
  }


  public void setVersionLabels(List<String> versionLabels) {
    this.versionLabels = versionLabels;
  }


  public DocIdData versionNumber(String versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocIdData docIdData = (DocIdData) o;
    return Objects.equals(this.dctmDocumentId, docIdData.dctmDocumentId) &&
        Objects.equals(this.versionLabels, docIdData.versionLabels) &&
        Objects.equals(this.versionNumber, docIdData.versionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dctmDocumentId, versionLabels, versionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocIdData {\n");
    sb.append("    dctmDocumentId: ").append(toIndentedString(dctmDocumentId)).append("\n");
    sb.append("    versionLabels: ").append(toIndentedString(versionLabels)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocPropertyExtension.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCorporateDoc;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDivisionBusiness;
import com.poalim.sigverifysanitizer.documentum.model.BnhpPaperDoc;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocPropertyExtension
 */
@JsonPropertyOrder({
  DocPropertyExtension.JSON_PROPERTY_NAME
})
@JsonTypeName("DocPropertyExtension")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "name", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCorporateDoc.class, name = "bnhp_corporate_doc"),
  @JsonSubTypes.Type(value = BnhpDivisionBusiness.class, name = "bnhp_division_business"),
  @JsonSubTypes.Type(value = BnhpPaperDoc.class, name = "bnhp_paper_doc"),
})

public class DocPropertyExtension {
  public static final String JSON_PROPERTY_NAME = "name";
  protected String name;


  public DocPropertyExtension name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocPropertyExtension docPropertyExtension = (DocPropertyExtension) o;
    return Objects.equals(this.name, docPropertyExtension.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocPropertyExtension {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\DocumentData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocData;
import com.poalim.sigverifysanitizer.documentum.model.Customer;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DocumentData
 */
@JsonPropertyOrder({
  DocumentData.JSON_PROPERTY_CREATION_TIME,
  DocumentData.JSON_PROPERTY_LAST_UPDATE_TIME,
  DocumentData.JSON_PROPERTY_OBJECT_NAME,
  DocumentData.JSON_PROPERTY_OBJECT_TYPE,
  DocumentData.JSON_PROPERTY_PATHS,
  DocumentData.JSON_PROPERTY_VERSION_LABELS,
  DocumentData.JSON_PROPERTY_DOC_FILES,
  DocumentData.JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM,
  DocumentData.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  DocumentData.JSON_PROPERTY_OWNER,
  DocumentData.JSON_PROPERTY_CUSTOMERS,
  DocumentData.JSON_PROPERTY_FOLDER_CONTENT,
  DocumentData.JSON_PROPERTY_IS_EMPTY
})
@JsonTypeName("DocumentData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDoc"),
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDocData"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolder"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolderData"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDoc"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDocData"),
})

public class DocumentData {
  public static final String JSON_PROPERTY_CREATION_TIME = "creationTime";
  private OffsetDateTime creationTime;

  public static final String JSON_PROPERTY_LAST_UPDATE_TIME = "lastUpdateTime";
  private OffsetDateTime lastUpdateTime;

  public static final String JSON_PROPERTY_OBJECT_NAME = "objectName";
  private String objectName;

  public static final String JSON_PROPERTY_OBJECT_TYPE = "objectType";
  protected String objectType;

  public static final String JSON_PROPERTY_PATHS = "paths";
  private List<String> paths = null;

  public static final String JSON_PROPERTY_VERSION_LABELS = "versionLabels";
  private List<String> versionLabels = null;

  public static final String JSON_PROPERTY_DOC_FILES = "docFiles";
  private List<DocFile> docFiles = null;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM = "legacyDocumentEntryDttm";
  private OffsetDateTime legacyDocumentEntryDttm;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "legacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;

  public static final String JSON_PROPERTY_CUSTOMERS = "customers";
  private List<Customer> customers = null;

  public static final String JSON_PROPERTY_FOLDER_CONTENT = "folderContent";
  private List<DocumentData> folderContent = null;

  public static final String JSON_PROPERTY_IS_EMPTY = "isEmpty";
  private Boolean isEmpty;


  private DocCustomerData docCustomerData; 
  
  
   public DocCustomerData getDocCustomerData() {
	   return docCustomerData;
   }

   public void setDocCustomerData(DocCustomerData docCustomerData) {
		this.docCustomerData = docCustomerData;
   }




/**
   * Get creationTime
   * @return creationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREATION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationTime() {
    return creationTime;
  }




   /**
   * Get lastUpdateTime
   * @return lastUpdateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }




  public DocumentData objectName(String objectName) {
    
    this.objectName = objectName;
    return this;
  }

   /**
   * Object name.
   * @return objectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object name.")
  @JsonProperty(JSON_PROPERTY_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObjectName() {
    return objectName;
  }


  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }


  public DocumentData objectType(String objectType) {
    
    this.objectType = objectType;
    return this;
  }

   /**
   * Get objectType
   * @return objectType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectType() {
    return objectType;
  }


  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public DocumentData paths(List<String> paths) {
    
    this.paths = paths;
    return this;
  }

  public DocumentData addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * List of absolute paths of folders the object is linked to
   * @return paths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of absolute paths of folders the object is linked to")
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPaths() {
    return paths;
  }


  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public DocumentData versionLabels(List<String> versionLabels) {
    
    this.versionLabels = versionLabels;
    return this;
  }

  public DocumentData addVersionLabelsItem(String versionLabelsItem) {
    if (this.versionLabels == null) {
      this.versionLabels = new ArrayList<>();
    }
    this.versionLabels.add(versionLabelsItem);
    return this;
  }

   /**
   * Get versionLabels
   * @return versionLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getVersionLabels() {
    return versionLabels;
  }


  public void setVersionLabels(List<String> versionLabels) {
    this.versionLabels = versionLabels;
  }


  public DocumentData docFiles(List<DocFile> docFiles) {
    
    this.docFiles = docFiles;
    return this;
  }

  public DocumentData addDocFilesItem(DocFile docFilesItem) {
    if (this.docFiles == null) {
      this.docFiles = new ArrayList<>();
    }
    this.docFiles.add(docFilesItem);
    return this;
  }

   /**
   * Get docFiles
   * @return docFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocFile> getDocFiles() {
    return docFiles;
  }


  public void setDocFiles(List<DocFile> docFiles) {
    this.docFiles = docFiles;
  }


  public DocumentData legacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
    return this;
  }

   /**
   * Get legacyDocumentEntryDttm
   * @return legacyDocumentEntryDttm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLegacyDocumentEntryDttm() {
    return legacyDocumentEntryDttm;
  }


  public void setLegacyDocumentEntryDttm(OffsetDateTime legacyDocumentEntryDttm) {
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
  }


  public DocumentData legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public DocumentData owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public DocumentData customers(List<Customer> customers) {
    
    this.customers = customers;
    return this;
  }

  public DocumentData addCustomersItem(Customer customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Customer> getCustomers() {
    return customers;
  }


  public void setCustomers(List<Customer> customers) {
    this.customers = customers;
  }


  public DocumentData folderContent(List<DocumentData> folderContent) {
    
    this.folderContent = folderContent;
    return this;
  }

  public DocumentData addFolderContentItem(DocumentData folderContentItem) {
    if (this.folderContent == null) {
      this.folderContent = new ArrayList<>();
    }
    this.folderContent.add(folderContentItem);
    return this;
  }

   /**
   * Get folderContent
   * @return folderContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FOLDER_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocumentData> getFolderContent() {
    return folderContent;
  }


  public void setFolderContent(List<DocumentData> folderContent) {
    this.folderContent = folderContent;
  }


   /**
   * Get isEmpty
   * @return isEmpty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEmpty() {
    return isEmpty;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentData documentData = (DocumentData) o;
    return Objects.equals(this.creationTime, documentData.creationTime) &&
        Objects.equals(this.lastUpdateTime, documentData.lastUpdateTime) &&
        Objects.equals(this.objectName, documentData.objectName) &&
        Objects.equals(this.objectType, documentData.objectType) &&
        Objects.equals(this.paths, documentData.paths) &&
        Objects.equals(this.versionLabels, documentData.versionLabels) &&
        Objects.equals(this.docFiles, documentData.docFiles) &&
        Objects.equals(this.legacyDocumentEntryDttm, documentData.legacyDocumentEntryDttm) &&
        Objects.equals(this.legacyDocumentId, documentData.legacyDocumentId) &&
        Objects.equals(this.owner, documentData.owner) &&
        Objects.equals(this.customers, documentData.customers) &&
        Objects.equals(this.folderContent, documentData.folderContent) &&
        Objects.equals(this.isEmpty, documentData.isEmpty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, lastUpdateTime, objectName, objectType, paths, versionLabels, docFiles, legacyDocumentEntryDttm, legacyDocumentId, owner, customers, folderContent, isEmpty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentData {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    versionLabels: ").append(toIndentedString(versionLabels)).append("\n");
    sb.append("    docFiles: ").append(toIndentedString(docFiles)).append("\n");
    sb.append("    legacyDocumentEntryDttm: ").append(toIndentedString(legacyDocumentEntryDttm)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    folderContent: ").append(toIndentedString(folderContent)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\ErrorDetails.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * ErrorDetails
 */
@JsonPropertyOrder({
  ErrorDetails.JSON_PROPERTY_ERROR_CODE,
  ErrorDetails.JSON_PROPERTY_ERROR_DETAILS,
  ErrorDetails.JSON_PROPERTY_ERROR_TYPE
})
@JsonTypeName("errorDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class ErrorDetails {
  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  private Integer errorCode;

  public static final String JSON_PROPERTY_ERROR_DETAILS = "errorDetails";
  private String errorDetails;

  /**
   * Gets or Sets errorType
   */
  public enum ErrorTypeEnum {
    TEMPORARY("temporary"),
    
    VALIDATION("validation"),
    
    GENERAL("general");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ErrorTypeEnum fromValue(String value) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ERROR_TYPE = "errorType";
  private ErrorTypeEnum errorType;


  public ErrorDetails errorCode(Integer errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Get errorCode
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public ErrorDetails errorDetails(String errorDetails) {
    
    this.errorDetails = errorDetails;
    return this;
  }

   /**
   * Get errorDetails
   * @return errorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorDetails() {
    return errorDetails;
  }


  public void setErrorDetails(String errorDetails) {
    this.errorDetails = errorDetails;
  }


  public ErrorDetails errorType(ErrorTypeEnum errorType) {
    
    this.errorType = errorType;
    return this;
  }

   /**
   * Get errorType
   * @return errorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ErrorTypeEnum getErrorType() {
    return errorType;
  }


  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorDetails errorDetails = (ErrorDetails) o;
    return Objects.equals(this.errorCode, errorDetails.errorCode) &&
        Objects.equals(this.errorDetails, errorDetails.errorDetails) &&
        Objects.equals(this.errorType, errorDetails.errorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorDetails, errorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorDetails {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\ExecutorDetails.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Specifies human or software agent behind call to the service. It is mandatory when this information is not provided as part of JWT token from the API gateway (when service is used with with applicative system-level authentication  against API gateway. Not required when such information is provided. If provided the required fields  are ipAddress and executingEmpIdCode. When provided when operations that create/update documents is is suggested to provide executingBranchId and executingBankId because these attributes are used for filtering in document retrieval interfaces of Mesila.
 */
//@ApiModel(description = "Specifies human or software agent behind call to the service. It is mandatory when this information is not provided as part of JWT token from the API gateway (when service is used with with applicative system-level authentication  against API gateway. Not required when such information is provided. If provided the required fields  are ipAddress and executingEmpIdCode. When provided when operations that create/update documents is is suggested to provide executingBranchId and executingBankId because these attributes are used for filtering in document retrieval interfaces of Mesila.")
@JsonPropertyOrder({
  ExecutorDetails.JSON_PROPERTY_BANKOL_ID,
  ExecutorDetails.JSON_PROPERTY_EMP_ID_DOCUMENT_TYPE_CODE,
  ExecutorDetails.JSON_PROPERTY_EXECUTING_BANK_ID,
  ExecutorDetails.JSON_PROPERTY_EXECUTING_BRANCH_ID,
  ExecutorDetails.JSON_PROPERTY_EXECUTING_EMP_FULL_NAME,
  ExecutorDetails.JSON_PROPERTY_EXECUTING_EMP_ID_CODE,
  ExecutorDetails.JSON_PROPERTY_EXECUTING_USER_NAME,
  ExecutorDetails.JSON_PROPERTY_INSTRUCTION_RECEIVE_TYPE_CODE,
  ExecutorDetails.JSON_PROPERTY_IP_ADDRESS,
  ExecutorDetails.JSON_PROPERTY_TERMINAL_CHANNEL_ID
})
@JsonTypeName("executorDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class ExecutorDetails {
  public static final String JSON_PROPERTY_BANKOL_ID = "bankolId";
  private Integer bankolId;

  public static final String JSON_PROPERTY_EMP_ID_DOCUMENT_TYPE_CODE = "empIdDocumentTypeCode";
  private Integer empIdDocumentTypeCode;

  public static final String JSON_PROPERTY_EXECUTING_BANK_ID = "executingBankId";
  private Integer executingBankId;

  public static final String JSON_PROPERTY_EXECUTING_BRANCH_ID = "executingBranchId";
  private Integer executingBranchId;

  public static final String JSON_PROPERTY_EXECUTING_EMP_FULL_NAME = "executingEmpFullName";
  private String executingEmpFullName;

  public static final String JSON_PROPERTY_EXECUTING_EMP_ID_CODE = "executingEmpIdCode";
  private String executingEmpIdCode;

  public static final String JSON_PROPERTY_EXECUTING_USER_NAME = "executingUserName";
  private String executingUserName;

  public static final String JSON_PROPERTY_INSTRUCTION_RECEIVE_TYPE_CODE = "instructionReceiveTypeCode";
  private Integer instructionReceiveTypeCode;

  public static final String JSON_PROPERTY_IP_ADDRESS = "ipAddress";
  private String ipAddress;

  public static final String JSON_PROPERTY_TERMINAL_CHANNEL_ID = "terminalChannelId";
  private Integer terminalChannelId;


  public ExecutorDetails bankolId(Integer bankolId) {
    
    this.bankolId = bankolId;
    return this;
  }

   /**
   * Get bankolId
   * @return bankolId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BANKOL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBankolId() {
    return bankolId;
  }


  public void setBankolId(Integer bankolId) {
    this.bankolId = bankolId;
  }


  public ExecutorDetails empIdDocumentTypeCode(Integer empIdDocumentTypeCode) {
    
    this.empIdDocumentTypeCode = empIdDocumentTypeCode;
    return this;
  }

   /**
   * Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי
   * @return empIdDocumentTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי")
  @JsonProperty(JSON_PROPERTY_EMP_ID_DOCUMENT_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEmpIdDocumentTypeCode() {
    return empIdDocumentTypeCode;
  }


  public void setEmpIdDocumentTypeCode(Integer empIdDocumentTypeCode) {
    this.empIdDocumentTypeCode = empIdDocumentTypeCode;
  }


  public ExecutorDetails executingBankId(Integer executingBankId) {
    
    this.executingBankId = executingBankId;
    return this;
  }

   /**
   * Get executingBankId
   * @return executingBankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING_BANK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExecutingBankId() {
    return executingBankId;
  }


  public void setExecutingBankId(Integer executingBankId) {
    this.executingBankId = executingBankId;
  }


  public ExecutorDetails executingBranchId(Integer executingBranchId) {
    
    this.executingBranchId = executingBranchId;
    return this;
  }

   /**
   * Get executingBranchId
   * @return executingBranchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING_BRANCH_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExecutingBranchId() {
    return executingBranchId;
  }


  public void setExecutingBranchId(Integer executingBranchId) {
    this.executingBranchId = executingBranchId;
  }


  public ExecutorDetails executingEmpFullName(String executingEmpFullName) {
    
    this.executingEmpFullName = executingEmpFullName;
    return this;
  }

   /**
   * Get executingEmpFullName
   * @return executingEmpFullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING_EMP_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutingEmpFullName() {
    return executingEmpFullName;
  }


  public void setExecutingEmpFullName(String executingEmpFullName) {
    this.executingEmpFullName = executingEmpFullName;
  }


  public ExecutorDetails executingEmpIdCode(String executingEmpIdCode) {
    
    this.executingEmpIdCode = executingEmpIdCode;
    return this;
  }

   /**
   * Get executingEmpIdCode
   * @return executingEmpIdCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING_EMP_ID_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutingEmpIdCode() {
    return executingEmpIdCode;
  }


  public void setExecutingEmpIdCode(String executingEmpIdCode) {
    this.executingEmpIdCode = executingEmpIdCode;
  }


  public ExecutorDetails executingUserName(String executingUserName) {
    
    this.executingUserName = executingUserName;
    return this;
  }

   /**
   * Get executingUserName
   * @return executingUserName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutingUserName() {
    return executingUserName;
  }


  public void setExecutingUserName(String executingUserName) {
    this.executingUserName = executingUserName;
  }


  public ExecutorDetails instructionReceiveTypeCode(Integer instructionReceiveTypeCode) {
    
    this.instructionReceiveTypeCode = instructionReceiveTypeCode;
    return this;
  }

   /**
   * Get instructionReceiveTypeCode
   * @return instructionReceiveTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUCTION_RECEIVE_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInstructionReceiveTypeCode() {
    return instructionReceiveTypeCode;
  }


  public void setInstructionReceiveTypeCode(Integer instructionReceiveTypeCode) {
    this.instructionReceiveTypeCode = instructionReceiveTypeCode;
  }


  public ExecutorDetails ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ExecutorDetails terminalChannelId(Integer terminalChannelId) {
    
    this.terminalChannelId = terminalChannelId;
    return this;
  }

   /**
   * Get terminalChannelId
   * @return terminalChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TERMINAL_CHANNEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTerminalChannelId() {
    return terminalChannelId;
  }


  public void setTerminalChannelId(Integer terminalChannelId) {
    this.terminalChannelId = terminalChannelId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutorDetails executorDetails = (ExecutorDetails) o;
    return Objects.equals(this.bankolId, executorDetails.bankolId) &&
        Objects.equals(this.empIdDocumentTypeCode, executorDetails.empIdDocumentTypeCode) &&
        Objects.equals(this.executingBankId, executorDetails.executingBankId) &&
        Objects.equals(this.executingBranchId, executorDetails.executingBranchId) &&
        Objects.equals(this.executingEmpFullName, executorDetails.executingEmpFullName) &&
        Objects.equals(this.executingEmpIdCode, executorDetails.executingEmpIdCode) &&
        Objects.equals(this.executingUserName, executorDetails.executingUserName) &&
        Objects.equals(this.instructionReceiveTypeCode, executorDetails.instructionReceiveTypeCode) &&
        Objects.equals(this.ipAddress, executorDetails.ipAddress) &&
        Objects.equals(this.terminalChannelId, executorDetails.terminalChannelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankolId, empIdDocumentTypeCode, executingBankId, executingBranchId, executingEmpFullName, executingEmpIdCode, executingUserName, instructionReceiveTypeCode, ipAddress, terminalChannelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutorDetails {\n");
    sb.append("    bankolId: ").append(toIndentedString(bankolId)).append("\n");
    sb.append("    empIdDocumentTypeCode: ").append(toIndentedString(empIdDocumentTypeCode)).append("\n");
    sb.append("    executingBankId: ").append(toIndentedString(executingBankId)).append("\n");
    sb.append("    executingBranchId: ").append(toIndentedString(executingBranchId)).append("\n");
    sb.append("    executingEmpFullName: ").append(toIndentedString(executingEmpFullName)).append("\n");
    sb.append("    executingEmpIdCode: ").append(toIndentedString(executingEmpIdCode)).append("\n");
    sb.append("    executingUserName: ").append(toIndentedString(executingUserName)).append("\n");
    sb.append("    instructionReceiveTypeCode: ").append(toIndentedString(instructionReceiveTypeCode)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    terminalChannelId: ").append(toIndentedString(terminalChannelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\FetchType.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.   * content - binary content for documents, list of entries for folders   * meta - object metadata (attributes)   * full  - both content and attributes
 */
public enum FetchType {
  
  FULL("full"),
  
  CONTENT("content"),
  
  META("meta");

  private String value;

  FetchType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static FetchType fromValue(String value) {
    for (FetchType b : FetchType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\IdType.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * type of unique object id:   * legacyDocumentId - external, created by service user   * dctmDocumentId - internal, created automatically by service
 */
public enum IdType {
  
  LEGACYDOCUMENTID("legacyDocumentId"),
  
  DCTMDOCUMENTID("dctmDocumentId");

  private String value;

  IdType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static IdType fromValue(String value) {
    for (IdType b : IdType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.RequestAppendDocByParamRequestParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject
 */
@JsonPropertyOrder({
  InlineObject.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject.JSON_PROPERTY_REQUEST_PARAMETERS
})
@JsonTypeName("inline_object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject {
  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_REQUEST_PARAMETERS = "requestParameters";
  private RequestAppendDocByParamRequestParameters requestParameters;


  public InlineObject executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject requestParameters(RequestAppendDocByParamRequestParameters requestParameters) {
    
    this.requestParameters = requestParameters;
    return this;
  }

   /**
   * Get requestParameters
   * @return requestParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestAppendDocByParamRequestParameters getRequestParameters() {
    return requestParameters;
  }


  public void setRequestParameters(RequestAppendDocByParamRequestParameters requestParameters) {
    this.requestParameters = requestParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject inlineObject = (InlineObject) o;
    return Objects.equals(this.executorDetails, inlineObject.executorDetails) &&
        Objects.equals(this.requestParameters, inlineObject.requestParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executorDetails, requestParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject {\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject1.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.RequestConcatenateDocsByParamsRequestParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject1
 */
@JsonPropertyOrder({
  InlineObject1.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject1.JSON_PROPERTY_REQUEST_PARAMETERS
})
@JsonTypeName("inline_object_1")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject1 {
  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_REQUEST_PARAMETERS = "requestParameters";
  private RequestConcatenateDocsByParamsRequestParameters requestParameters;


  public InlineObject1 executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject1 requestParameters(RequestConcatenateDocsByParamsRequestParameters requestParameters) {
    
    this.requestParameters = requestParameters;
    return this;
  }

   /**
   * Get requestParameters
   * @return requestParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestConcatenateDocsByParamsRequestParameters getRequestParameters() {
    return requestParameters;
  }


  public void setRequestParameters(RequestConcatenateDocsByParamsRequestParameters requestParameters) {
    this.requestParameters = requestParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject1 inlineObject1 = (InlineObject1) o;
    return Objects.equals(this.executorDetails, inlineObject1.executorDetails) &&
        Objects.equals(this.requestParameters, inlineObject1.requestParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executorDetails, requestParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject1 {\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject2.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.RequestCountDocumentsPagesRequestParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject2
 */
@JsonPropertyOrder({
  InlineObject2.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject2.JSON_PROPERTY_REQUEST_PARAMETERS
})
@JsonTypeName("inline_object_2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject2 {
  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_REQUEST_PARAMETERS = "requestParameters";
  private RequestCountDocumentsPagesRequestParameters requestParameters;


  public InlineObject2 executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject2 requestParameters(RequestCountDocumentsPagesRequestParameters requestParameters) {
    
    this.requestParameters = requestParameters;
    return this;
  }

   /**
   * Get requestParameters
   * @return requestParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestCountDocumentsPagesRequestParameters getRequestParameters() {
    return requestParameters;
  }


  public void setRequestParameters(RequestCountDocumentsPagesRequestParameters requestParameters) {
    this.requestParameters = requestParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject2 inlineObject2 = (InlineObject2) o;
    return Objects.equals(this.executorDetails, inlineObject2.executorDetails) &&
        Objects.equals(this.requestParameters, inlineObject2.requestParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executorDetails, requestParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject2 {\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject3.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.RequestRetrieveDocumentsByZipRequestParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject3
 */
@JsonPropertyOrder({
  InlineObject3.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject3.JSON_PROPERTY_REQUEST_PARAMETERS
})
@JsonTypeName("inline_object_3")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject3 {
  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_REQUEST_PARAMETERS = "requestParameters";
  private RequestRetrieveDocumentsByZipRequestParameters requestParameters;


  public InlineObject3 executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject3 requestParameters(RequestRetrieveDocumentsByZipRequestParameters requestParameters) {
    
    this.requestParameters = requestParameters;
    return this;
  }

   /**
   * Get requestParameters
   * @return requestParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestRetrieveDocumentsByZipRequestParameters getRequestParameters() {
    return requestParameters;
  }


  public void setRequestParameters(RequestRetrieveDocumentsByZipRequestParameters requestParameters) {
    this.requestParameters = requestParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject3 inlineObject3 = (InlineObject3) o;
    return Objects.equals(this.executorDetails, inlineObject3.executorDetails) &&
        Objects.equals(this.requestParameters, inlineObject3.requestParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executorDetails, requestParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject3 {\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject4.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.FetchType;
import com.poalim.sigverifysanitizer.documentum.model.PagingDefinition;
import com.poalim.sigverifysanitizer.documentum.model.SearchSearchCustomerDocumentsAccounts;
import com.poalim.sigverifysanitizer.documentum.model.SearchSearchCustomerDocumentsCustomers;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject4
 */
@JsonPropertyOrder({
  InlineObject4.JSON_PROPERTY_ACCOUNTS,
  InlineObject4.JSON_PROPERTY_CUSTOMERS,
  InlineObject4.JSON_PROPERTY_DOS_EXTENSION,
  InlineObject4.JSON_PROPERTY_END_DATE,
  InlineObject4.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject4.JSON_PROPERTY_FETCH_TYPE,
  InlineObject4.JSON_PROPERTY_FULLTEXT,
  InlineObject4.JSON_PROPERTY_PAGING_DEFINITIONS,
  InlineObject4.JSON_PROPERTY_SORT_BY_FIELDS,
  InlineObject4.JSON_PROPERTY_START_DATE
})
@JsonTypeName("inline_object_4")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject4 {
  public static final String JSON_PROPERTY_ACCOUNTS = "accounts";
  private List<SearchSearchCustomerDocumentsAccounts> accounts = null;

  public static final String JSON_PROPERTY_CUSTOMERS = "customers";
  private List<SearchSearchCustomerDocumentsCustomers> customers = null;

  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private LocalDate endDate;

  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_FETCH_TYPE = "fetchType";
  private FetchType fetchType = FetchType.CONTENT;

  public static final String JSON_PROPERTY_FULLTEXT = "fulltext";
  private String fulltext;

  public static final String JSON_PROPERTY_PAGING_DEFINITIONS = "pagingDefinitions";
  private PagingDefinition pagingDefinitions;

  public static final String JSON_PROPERTY_SORT_BY_FIELDS = "sortByFields";
  private List<Object> sortByFields = null;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private LocalDate startDate;


  public InlineObject4 accounts(List<SearchSearchCustomerDocumentsAccounts> accounts) {
    
    this.accounts = accounts;
    return this;
  }

  public InlineObject4 addAccountsItem(SearchSearchCustomerDocumentsAccounts accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SearchSearchCustomerDocumentsAccounts> getAccounts() {
    return accounts;
  }


  public void setAccounts(List<SearchSearchCustomerDocumentsAccounts> accounts) {
    this.accounts = accounts;
  }


  public InlineObject4 customers(List<SearchSearchCustomerDocumentsCustomers> customers) {
    
    this.customers = customers;
    return this;
  }

  public InlineObject4 addCustomersItem(SearchSearchCustomerDocumentsCustomers customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SearchSearchCustomerDocumentsCustomers> getCustomers() {
    return customers;
  }


  public void setCustomers(List<SearchSearchCustomerDocumentsCustomers> customers) {
    this.customers = customers;
  }


  public InlineObject4 dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * Get dosExtension
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public InlineObject4 endDate(LocalDate endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public InlineObject4 executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject4 fetchType(FetchType fetchType) {
    
    this.fetchType = fetchType;
    return this;
  }

   /**
   * Get fetchType
   * @return fetchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FETCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FetchType getFetchType() {
    return fetchType;
  }


  public void setFetchType(FetchType fetchType) {
    this.fetchType = fetchType;
  }


  public InlineObject4 fulltext(String fulltext) {
    
    this.fulltext = fulltext;
    return this;
  }

   /**
   * Get fulltext
   * @return fulltext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FULLTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFulltext() {
    return fulltext;
  }


  public void setFulltext(String fulltext) {
    this.fulltext = fulltext;
  }


  public InlineObject4 pagingDefinitions(PagingDefinition pagingDefinitions) {
    
    this.pagingDefinitions = pagingDefinitions;
    return this;
  }

   /**
   * Get pagingDefinitions
   * @return pagingDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAGING_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PagingDefinition getPagingDefinitions() {
    return pagingDefinitions;
  }


  public void setPagingDefinitions(PagingDefinition pagingDefinitions) {
    this.pagingDefinitions = pagingDefinitions;
  }


  public InlineObject4 sortByFields(List<Object> sortByFields) {
    
    this.sortByFields = sortByFields;
    return this;
  }

  public InlineObject4 addSortByFieldsItem(Object sortByFieldsItem) {
    if (this.sortByFields == null) {
      this.sortByFields = new ArrayList<>();
    }
    this.sortByFields.add(sortByFieldsItem);
    return this;
  }

   /**
   * list of fields to sort by them
   * @return sortByFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of fields to sort by them")
  @JsonProperty(JSON_PROPERTY_SORT_BY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getSortByFields() {
    return sortByFields;
  }


  public void setSortByFields(List<Object> sortByFields) {
    this.sortByFields = sortByFields;
  }


  public InlineObject4 startDate(LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject4 inlineObject4 = (InlineObject4) o;
    return Objects.equals(this.accounts, inlineObject4.accounts) &&
        Objects.equals(this.customers, inlineObject4.customers) &&
        Objects.equals(this.dosExtension, inlineObject4.dosExtension) &&
        Objects.equals(this.endDate, inlineObject4.endDate) &&
        Objects.equals(this.executorDetails, inlineObject4.executorDetails) &&
        Objects.equals(this.fetchType, inlineObject4.fetchType) &&
        Objects.equals(this.fulltext, inlineObject4.fulltext) &&
        Objects.equals(this.pagingDefinitions, inlineObject4.pagingDefinitions) &&
        Objects.equals(this.sortByFields, inlineObject4.sortByFields) &&
        Objects.equals(this.startDate, inlineObject4.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, customers, dosExtension, endDate, executorDetails, fetchType, fulltext, pagingDefinitions, sortByFields, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject4 {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    fetchType: ").append(toIndentedString(fetchType)).append("\n");
    sb.append("    fulltext: ").append(toIndentedString(fulltext)).append("\n");
    sb.append("    pagingDefinitions: ").append(toIndentedString(pagingDefinitions)).append("\n");
    sb.append("    sortByFields: ").append(toIndentedString(sortByFields)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject5.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.SearchSearchDocumentsByIdsSearchParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject5
 */
@JsonPropertyOrder({
  InlineObject5.JSON_PROPERTY_SEARCH_PARAMETERS
})
@JsonTypeName("inline_object_5")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject5 {
  public static final String JSON_PROPERTY_SEARCH_PARAMETERS = "searchParameters";
  private SearchSearchDocumentsByIdsSearchParameters searchParameters;


  public InlineObject5 searchParameters(SearchSearchDocumentsByIdsSearchParameters searchParameters) {
    
    this.searchParameters = searchParameters;
    return this;
  }

   /**
   * Get searchParameters
   * @return searchParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SEARCH_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SearchSearchDocumentsByIdsSearchParameters getSearchParameters() {
    return searchParameters;
  }


  public void setSearchParameters(SearchSearchDocumentsByIdsSearchParameters searchParameters) {
    this.searchParameters = searchParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject5 inlineObject5 = (InlineObject5) o;
    return Objects.equals(this.searchParameters, inlineObject5.searchParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject5 {\n");
    sb.append("    searchParameters: ").append(toIndentedString(searchParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineObject6.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.FetchType;
import com.poalim.sigverifysanitizer.documentum.model.PagingDefinition;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineObject6
 */
@JsonPropertyOrder({
  InlineObject6.JSON_PROPERTY_DOS_EXTENSION,
  InlineObject6.JSON_PROPERTY_END_CREATION_DATE,
  InlineObject6.JSON_PROPERTY_END_UPDATE_DATE,
  InlineObject6.JSON_PROPERTY_EXECUTOR_DETAILS,
  InlineObject6.JSON_PROPERTY_FETCH_TYPE,
  InlineObject6.JSON_PROPERTY_NAME_SUBSTRING,
  InlineObject6.JSON_PROPERTY_OWNER_NAME,
  InlineObject6.JSON_PROPERTY_PAGING_DEFINITIONS,
  InlineObject6.JSON_PROPERTY_SORT_BY_FIELDS,
  InlineObject6.JSON_PROPERTY_START_CREATION_DATE,
  InlineObject6.JSON_PROPERTY_START_UPDATE_DATE
})
@JsonTypeName("inline_object_6")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineObject6 {
  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  public static final String JSON_PROPERTY_END_CREATION_DATE = "endCreationDate";
  private LocalDate endCreationDate;

  public static final String JSON_PROPERTY_END_UPDATE_DATE = "endUpdateDate";
  private LocalDate endUpdateDate;

  public static final String JSON_PROPERTY_EXECUTOR_DETAILS = "executorDetails";
  private ExecutorDetails executorDetails;

  public static final String JSON_PROPERTY_FETCH_TYPE = "fetchType";
  private FetchType fetchType = FetchType.CONTENT;

  public static final String JSON_PROPERTY_NAME_SUBSTRING = "nameSubstring";
  private String nameSubstring;

  public static final String JSON_PROPERTY_OWNER_NAME = "ownerName";
  private String ownerName;

  public static final String JSON_PROPERTY_PAGING_DEFINITIONS = "pagingDefinitions";
  private PagingDefinition pagingDefinitions;

  public static final String JSON_PROPERTY_SORT_BY_FIELDS = "sortByFields";
  private List<Object> sortByFields = null;

  public static final String JSON_PROPERTY_START_CREATION_DATE = "startCreationDate";
  private LocalDate startCreationDate;

  public static final String JSON_PROPERTY_START_UPDATE_DATE = "startUpdateDate";
  private LocalDate startUpdateDate;


  public InlineObject6 dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * Get dosExtension
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public InlineObject6 endCreationDate(LocalDate endCreationDate) {
    
    this.endCreationDate = endCreationDate;
    return this;
  }

   /**
   * Get endCreationDate
   * @return endCreationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_END_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getEndCreationDate() {
    return endCreationDate;
  }


  public void setEndCreationDate(LocalDate endCreationDate) {
    this.endCreationDate = endCreationDate;
  }


  public InlineObject6 endUpdateDate(LocalDate endUpdateDate) {
    
    this.endUpdateDate = endUpdateDate;
    return this;
  }

   /**
   * Get endUpdateDate
   * @return endUpdateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_END_UPDATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getEndUpdateDate() {
    return endUpdateDate;
  }


  public void setEndUpdateDate(LocalDate endUpdateDate) {
    this.endUpdateDate = endUpdateDate;
  }


  public InlineObject6 executorDetails(ExecutorDetails executorDetails) {
    
    this.executorDetails = executorDetails;
    return this;
  }

   /**
   * Get executorDetails
   * @return executorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutorDetails getExecutorDetails() {
    return executorDetails;
  }


  public void setExecutorDetails(ExecutorDetails executorDetails) {
    this.executorDetails = executorDetails;
  }


  public InlineObject6 fetchType(FetchType fetchType) {
    
    this.fetchType = fetchType;
    return this;
  }

   /**
   * Get fetchType
   * @return fetchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FETCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FetchType getFetchType() {
    return fetchType;
  }


  public void setFetchType(FetchType fetchType) {
    this.fetchType = fetchType;
  }


  public InlineObject6 nameSubstring(String nameSubstring) {
    
    this.nameSubstring = nameSubstring;
    return this;
  }

   /**
   * Get nameSubstring
   * @return nameSubstring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAME_SUBSTRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNameSubstring() {
    return nameSubstring;
  }


  public void setNameSubstring(String nameSubstring) {
    this.nameSubstring = nameSubstring;
  }


  public InlineObject6 ownerName(String ownerName) {
    
    this.ownerName = ownerName;
    return this;
  }

   /**
   * document owner (user name)
   * @return ownerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "document owner (user name)")
  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwnerName() {
    return ownerName;
  }


  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public InlineObject6 pagingDefinitions(PagingDefinition pagingDefinitions) {
    
    this.pagingDefinitions = pagingDefinitions;
    return this;
  }

   /**
   * Get pagingDefinitions
   * @return pagingDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAGING_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PagingDefinition getPagingDefinitions() {
    return pagingDefinitions;
  }


  public void setPagingDefinitions(PagingDefinition pagingDefinitions) {
    this.pagingDefinitions = pagingDefinitions;
  }


  public InlineObject6 sortByFields(List<Object> sortByFields) {
    
    this.sortByFields = sortByFields;
    return this;
  }

  public InlineObject6 addSortByFieldsItem(Object sortByFieldsItem) {
    if (this.sortByFields == null) {
      this.sortByFields = new ArrayList<>();
    }
    this.sortByFields.add(sortByFieldsItem);
    return this;
  }

   /**
   * list of fields to sort by them
   * @return sortByFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of fields to sort by them")
  @JsonProperty(JSON_PROPERTY_SORT_BY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getSortByFields() {
    return sortByFields;
  }


  public void setSortByFields(List<Object> sortByFields) {
    this.sortByFields = sortByFields;
  }


  public InlineObject6 startCreationDate(LocalDate startCreationDate) {
    
    this.startCreationDate = startCreationDate;
    return this;
  }

   /**
   * Get startCreationDate
   * @return startCreationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_START_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getStartCreationDate() {
    return startCreationDate;
  }


  public void setStartCreationDate(LocalDate startCreationDate) {
    this.startCreationDate = startCreationDate;
  }


  public InlineObject6 startUpdateDate(LocalDate startUpdateDate) {
    
    this.startUpdateDate = startUpdateDate;
    return this;
  }

   /**
   * Get startUpdateDate
   * @return startUpdateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_START_UPDATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getStartUpdateDate() {
    return startUpdateDate;
  }


  public void setStartUpdateDate(LocalDate startUpdateDate) {
    this.startUpdateDate = startUpdateDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject6 inlineObject6 = (InlineObject6) o;
    return Objects.equals(this.dosExtension, inlineObject6.dosExtension) &&
        Objects.equals(this.endCreationDate, inlineObject6.endCreationDate) &&
        Objects.equals(this.endUpdateDate, inlineObject6.endUpdateDate) &&
        Objects.equals(this.executorDetails, inlineObject6.executorDetails) &&
        Objects.equals(this.fetchType, inlineObject6.fetchType) &&
        Objects.equals(this.nameSubstring, inlineObject6.nameSubstring) &&
        Objects.equals(this.ownerName, inlineObject6.ownerName) &&
        Objects.equals(this.pagingDefinitions, inlineObject6.pagingDefinitions) &&
        Objects.equals(this.sortByFields, inlineObject6.sortByFields) &&
        Objects.equals(this.startCreationDate, inlineObject6.startCreationDate) &&
        Objects.equals(this.startUpdateDate, inlineObject6.startUpdateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dosExtension, endCreationDate, endUpdateDate, executorDetails, fetchType, nameSubstring, ownerName, pagingDefinitions, sortByFields, startCreationDate, startUpdateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject6 {\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    endCreationDate: ").append(toIndentedString(endCreationDate)).append("\n");
    sb.append("    endUpdateDate: ").append(toIndentedString(endUpdateDate)).append("\n");
    sb.append("    executorDetails: ").append(toIndentedString(executorDetails)).append("\n");
    sb.append("    fetchType: ").append(toIndentedString(fetchType)).append("\n");
    sb.append("    nameSubstring: ").append(toIndentedString(nameSubstring)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    pagingDefinitions: ").append(toIndentedString(pagingDefinitions)).append("\n");
    sb.append("    sortByFields: ").append(toIndentedString(sortByFields)).append("\n");
    sb.append("    startCreationDate: ").append(toIndentedString(startCreationDate)).append("\n");
    sb.append("    startUpdateDate: ").append(toIndentedString(startUpdateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineResponse200.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.DocumentData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineResponse200
 */
@JsonPropertyOrder({
  InlineResponse200.JSON_PROPERTY_ESTIMATED_TOTAL,
  InlineResponse200.JSON_PROPERTY_OBJECTS,
  InlineResponse200.JSON_PROPERTY_START_INDEX
})
@JsonTypeName("inline_response_200")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineResponse200 {
  public static final String JSON_PROPERTY_ESTIMATED_TOTAL = "estimatedTotal";
  private Long estimatedTotal;

  public static final String JSON_PROPERTY_OBJECTS = "objects";
  private List<DocumentData> objects = new ArrayList<>();

  public static final String JSON_PROPERTY_START_INDEX = "startIndex";
  private Long startIndex;


  public InlineResponse200 estimatedTotal(Long estimatedTotal) {
    
    this.estimatedTotal = estimatedTotal;
    return this;
  }

   /**
   * Get estimatedTotal
   * @return estimatedTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ESTIMATED_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getEstimatedTotal() {
    return estimatedTotal;
  }


  public void setEstimatedTotal(Long estimatedTotal) {
    this.estimatedTotal = estimatedTotal;
  }


  public InlineResponse200 objects(List<DocumentData> objects) {
    
    this.objects = objects;
    return this;
  }

  public InlineResponse200 addObjectsItem(DocumentData objectsItem) {
    this.objects.add(objectsItem);
    return this;
  }

   /**
   * Get objects
   * @return objects
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<DocumentData> getObjects() {
    return objects;
  }


  public void setObjects(List<DocumentData> objects) {
    this.objects = objects;
  }


  public InlineResponse200 startIndex(Long startIndex) {
    
    this.startIndex = startIndex;
    return this;
  }

   /**
   * Get startIndex
   * @return startIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStartIndex() {
    return startIndex;
  }


  public void setStartIndex(Long startIndex) {
    this.startIndex = startIndex;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200 inlineResponse200 = (InlineResponse200) o;
    return Objects.equals(this.estimatedTotal, inlineResponse200.estimatedTotal) &&
        Objects.equals(this.objects, inlineResponse200.objects) &&
        Objects.equals(this.startIndex, inlineResponse200.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedTotal, objects, startIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200 {\n");
    sb.append("    estimatedTotal: ").append(toIndentedString(estimatedTotal)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\InlineResponse202.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InlineResponse202
 */
@JsonPropertyOrder({
  InlineResponse202.JSON_PROPERTY_CORRELATION_ID
})
@JsonTypeName("inline_response_202")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class InlineResponse202 {
  public static final String JSON_PROPERTY_CORRELATION_ID = "correlationId";
  private String correlationId;


  public InlineResponse202 correlationId(String correlationId) {
    
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Get correlationId
   * @return correlationId
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCorrelationId() {
    return correlationId;
  }


  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse202 inlineResponse202 = (InlineResponse202) o;
    return Objects.equals(this.correlationId, inlineResponse202.correlationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse202 {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

// FIXME: make generator give it sane name
public class OneOfbnhpPaperDocbnhpCorporateDocbnhpDivisionBusiness {

	private String name;

	private Map<String, Object> properties;

	/**
	 * @return the name
	 */
	@ApiModelProperty(value = "")
	@JsonProperty("name")
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the properties
	 */
	@ApiModelProperty(value = "")
	@JsonProperty("properties")
	public Map<String, Object> getProperties() {
		return properties;
	}

	/**
	 * @param properties the properties to set
	 */
	public void setProperties(Map<String, Object> properties) {
		this.properties = properties;
	}
	
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\PagingDefinition.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * PagingDefinition
 */
@JsonPropertyOrder({
  PagingDefinition.JSON_PROPERTY_MAX_RESULT_COUNT,
  PagingDefinition.JSON_PROPERTY_SHOULD_RETURN_TOTAL_RESULTS,
  PagingDefinition.JSON_PROPERTY_START_INDEX
})
@JsonTypeName("PagingDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class PagingDefinition {
  public static final String JSON_PROPERTY_MAX_RESULT_COUNT = "maxResultCount";
  private Integer maxResultCount = 25;

  public static final String JSON_PROPERTY_SHOULD_RETURN_TOTAL_RESULTS = "shouldReturnTotalResults";
  private Boolean shouldReturnTotalResults = false;

  public static final String JSON_PROPERTY_START_INDEX = "startIndex";
  private Long startIndex = 0l;


  public PagingDefinition maxResultCount(Integer maxResultCount) {
    
    this.maxResultCount = maxResultCount;
    return this;
  }

   /**
   * Get maxResultCount
   * @return maxResultCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAX_RESULT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxResultCount() {
    return maxResultCount;
  }


  public void setMaxResultCount(Integer maxResultCount) {
    this.maxResultCount = maxResultCount;
  }


  public PagingDefinition shouldReturnTotalResults(Boolean shouldReturnTotalResults) {
    
    this.shouldReturnTotalResults = shouldReturnTotalResults;
    return this;
  }

   /**
   * Get shouldReturnTotalResults
   * @return shouldReturnTotalResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SHOULD_RETURN_TOTAL_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShouldReturnTotalResults() {
    return shouldReturnTotalResults;
  }


  public void setShouldReturnTotalResults(Boolean shouldReturnTotalResults) {
    this.shouldReturnTotalResults = shouldReturnTotalResults;
  }


  public PagingDefinition startIndex(Long startIndex) {
    
    this.startIndex = startIndex;
    return this;
  }

   /**
   * Get startIndex
   * @return startIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStartIndex() {
    return startIndex;
  }


  public void setStartIndex(Long startIndex) {
    this.startIndex = startIndex;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagingDefinition pagingDefinition = (PagingDefinition) o;
    return Objects.equals(this.maxResultCount, pagingDefinition.maxResultCount) &&
        Objects.equals(this.shouldReturnTotalResults, pagingDefinition.shouldReturnTotalResults) &&
        Objects.equals(this.startIndex, pagingDefinition.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxResultCount, shouldReturnTotalResults, startIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagingDefinition {\n");
    sb.append("    maxResultCount: ").append(toIndentedString(maxResultCount)).append("\n");
    sb.append("    shouldReturnTotalResults: ").append(toIndentedString(shouldReturnTotalResults)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\PensionFund.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * PensionFund
 */
@JsonPropertyOrder({
  PensionFund.JSON_PROPERTY_PENSION_FUND_NBR,
  PensionFund.JSON_PROPERTY_PLANHOLDER_NUMBER
})
@JsonTypeName("PensionFund")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class PensionFund {
  public static final String JSON_PROPERTY_PENSION_FUND_NBR = "pensionFundNbr";
  private Integer pensionFundNbr;

  public static final String JSON_PROPERTY_PLANHOLDER_NUMBER = "planholderNumber";
  private Integer planholderNumber;


  public PensionFund pensionFundNbr(Integer pensionFundNbr) {
    
    this.pensionFundNbr = pensionFundNbr;
    return this;
  }

   /**
   * Get pensionFundNbr
   * @return pensionFundNbr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PENSION_FUND_NBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPensionFundNbr() {
    return pensionFundNbr;
  }


  public void setPensionFundNbr(Integer pensionFundNbr) {
    this.pensionFundNbr = pensionFundNbr;
  }


  public PensionFund planholderNumber(Integer planholderNumber) {
    
    this.planholderNumber = planholderNumber;
    return this;
  }

   /**
   * Get planholderNumber
   * @return planholderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PLANHOLDER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPlanholderNumber() {
    return planholderNumber;
  }


  public void setPlanholderNumber(Integer planholderNumber) {
    this.planholderNumber = planholderNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PensionFund pensionFund = (PensionFund) o;
    return Objects.equals(this.pensionFundNbr, pensionFund.pensionFundNbr) &&
        Objects.equals(this.planholderNumber, pensionFund.planholderNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pensionFundNbr, planholderNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PensionFund {\n");
    sb.append("    pensionFundNbr: ").append(toIndentedString(pensionFundNbr)).append("\n");
    sb.append("    planholderNumber: ").append(toIndentedString(planholderNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestAppendDocByParamRequestParameters.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.RequestAppendDocByParamRequestParametersAppendPath;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestAppendDocByParamRequestParameters
 */
@JsonPropertyOrder({
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_APPEND_PATH,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_DOCUMENT_FORM_ID,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_PAGE_RENUMBERING,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_SRC_DCTM_DOCUMENT_ID,
  RequestAppendDocByParamRequestParameters.JSON_PROPERTY_SRC_LEGACY_DOCUMENT_ID
})
@JsonTypeName("_request_AppendDocByParam_requestParameters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestAppendDocByParamRequestParameters {
  public static final String JSON_PROPERTY_APPEND_PATH = "AppendPath";
  private List<RequestAppendDocByParamRequestParametersAppendPath> appendPath = new ArrayList<>();

  public static final String JSON_PROPERTY_DOCUMENT_FORM_ID = "DocumentFormId";
  private String documentFormId;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM = "LegacyDocumentEntryDttm";
  private String legacyDocumentEntryDttm;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "LegacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_PAGE_RENUMBERING = "PageRenumbering";
  private String pageRenumbering;

  public static final String JSON_PROPERTY_SRC_DCTM_DOCUMENT_ID = "SrcDctmDocumentId";
  private String srcDctmDocumentId;

  public static final String JSON_PROPERTY_SRC_LEGACY_DOCUMENT_ID = "SrcLegacyDocumentId";
  private String srcLegacyDocumentId;


  public RequestAppendDocByParamRequestParameters appendPath(List<RequestAppendDocByParamRequestParametersAppendPath> appendPath) {
    
    this.appendPath = appendPath;
    return this;
  }

  public RequestAppendDocByParamRequestParameters addAppendPathItem(RequestAppendDocByParamRequestParametersAppendPath appendPathItem) {
    this.appendPath.add(appendPathItem);
    return this;
  }

   /**
   * Array of entries that specify documents to be appended. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.
   * @return appendPath
  **/
  @ApiModelProperty(required = true, value = "Array of entries that specify documents to be appended. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.")
  @JsonProperty(JSON_PROPERTY_APPEND_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RequestAppendDocByParamRequestParametersAppendPath> getAppendPath() {
    return appendPath;
  }


  public void setAppendPath(List<RequestAppendDocByParamRequestParametersAppendPath> appendPath) {
    this.appendPath = appendPath;
  }


  public RequestAppendDocByParamRequestParameters documentFormId(String documentFormId) {
    
    this.documentFormId = documentFormId;
    return this;
  }

   /**
   * documentFormId (makat) for the newly created document.
   * @return documentFormId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "documentFormId (makat) for the newly created document.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_FORM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentFormId() {
    return documentFormId;
  }


  public void setDocumentFormId(String documentFormId) {
    this.documentFormId = documentFormId;
  }


  public RequestAppendDocByParamRequestParameters legacyDocumentEntryDttm(String legacyDocumentEntryDttm) {
    
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
    return this;
  }

   /**
   * date for the newly created document
   * @return legacyDocumentEntryDttm
  **/
  @ApiModelProperty(required = true, value = "date for the newly created document")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ENTRY_DTTM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLegacyDocumentEntryDttm() {
    return legacyDocumentEntryDttm;
  }


  public void setLegacyDocumentEntryDttm(String legacyDocumentEntryDttm) {
    this.legacyDocumentEntryDttm = legacyDocumentEntryDttm;
  }


  public RequestAppendDocByParamRequestParameters legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * LegacyDocumentId for the newly created document.
   * @return legacyDocumentId
  **/
  @ApiModelProperty(required = true, value = "LegacyDocumentId for the newly created document.")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public RequestAppendDocByParamRequestParameters pageRenumbering(String pageRenumbering) {
    
    this.pageRenumbering = pageRenumbering;
    return this;
  }

   /**
   * Format for page numbers. Page number and and total number of pages are inserted instead of %d. Empty value disables renumbering of pages.
   * @return pageRenumbering
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Page %d of %d", value = "Format for page numbers. Page number and and total number of pages are inserted instead of %d. Empty value disables renumbering of pages.")
  @JsonProperty(JSON_PROPERTY_PAGE_RENUMBERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPageRenumbering() {
    return pageRenumbering;
  }


  public void setPageRenumbering(String pageRenumbering) {
    this.pageRenumbering = pageRenumbering;
  }


  public RequestAppendDocByParamRequestParameters srcDctmDocumentId(String srcDctmDocumentId) {
    
    this.srcDctmDocumentId = srcDctmDocumentId;
    return this;
  }

   /**
   * DctmDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcLegacyDocumentId, it is mandatory to provide one of them.
   * @return srcDctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DctmDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcLegacyDocumentId, it is mandatory to provide one of them.")
  @JsonProperty(JSON_PROPERTY_SRC_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSrcDctmDocumentId() {
    return srcDctmDocumentId;
  }


  public void setSrcDctmDocumentId(String srcDctmDocumentId) {
    this.srcDctmDocumentId = srcDctmDocumentId;
  }


  public RequestAppendDocByParamRequestParameters srcLegacyDocumentId(String srcLegacyDocumentId) {
    
    this.srcLegacyDocumentId = srcLegacyDocumentId;
    return this;
  }

   /**
   * LegacyDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcDctmDocumentId, it is mandatory to provide one of them.
   * @return srcLegacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "LegacyDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcDctmDocumentId, it is mandatory to provide one of them.")
  @JsonProperty(JSON_PROPERTY_SRC_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSrcLegacyDocumentId() {
    return srcLegacyDocumentId;
  }


  public void setSrcLegacyDocumentId(String srcLegacyDocumentId) {
    this.srcLegacyDocumentId = srcLegacyDocumentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestAppendDocByParamRequestParameters requestAppendDocByParamRequestParameters = (RequestAppendDocByParamRequestParameters) o;
    return Objects.equals(this.appendPath, requestAppendDocByParamRequestParameters.appendPath) &&
        Objects.equals(this.documentFormId, requestAppendDocByParamRequestParameters.documentFormId) &&
        Objects.equals(this.legacyDocumentEntryDttm, requestAppendDocByParamRequestParameters.legacyDocumentEntryDttm) &&
        Objects.equals(this.legacyDocumentId, requestAppendDocByParamRequestParameters.legacyDocumentId) &&
        Objects.equals(this.pageRenumbering, requestAppendDocByParamRequestParameters.pageRenumbering) &&
        Objects.equals(this.srcDctmDocumentId, requestAppendDocByParamRequestParameters.srcDctmDocumentId) &&
        Objects.equals(this.srcLegacyDocumentId, requestAppendDocByParamRequestParameters.srcLegacyDocumentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appendPath, documentFormId, legacyDocumentEntryDttm, legacyDocumentId, pageRenumbering, srcDctmDocumentId, srcLegacyDocumentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestAppendDocByParamRequestParameters {\n");
    sb.append("    appendPath: ").append(toIndentedString(appendPath)).append("\n");
    sb.append("    documentFormId: ").append(toIndentedString(documentFormId)).append("\n");
    sb.append("    legacyDocumentEntryDttm: ").append(toIndentedString(legacyDocumentEntryDttm)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    pageRenumbering: ").append(toIndentedString(pageRenumbering)).append("\n");
    sb.append("    srcDctmDocumentId: ").append(toIndentedString(srcDctmDocumentId)).append("\n");
    sb.append("    srcLegacyDocumentId: ").append(toIndentedString(srcLegacyDocumentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestAppendDocByParamRequestParametersAppendPath.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestAppendDocByParamRequestParametersAppendPath
 */
@JsonPropertyOrder({
  RequestAppendDocByParamRequestParametersAppendPath.JSON_PROPERTY_DCTM_DOCUMENT_ID,
  RequestAppendDocByParamRequestParametersAppendPath.JSON_PROPERTY_DOC_DATA_CHECK,
  RequestAppendDocByParamRequestParametersAppendPath.JSON_PROPERTY_DOC_FILE,
  RequestAppendDocByParamRequestParametersAppendPath.JSON_PROPERTY_LEGACY_DOCUMENT_ID
})
@JsonTypeName("_request_AppendDocByParam_requestParameters_AppendPath")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestAppendDocByParamRequestParametersAppendPath {
  public static final String JSON_PROPERTY_DCTM_DOCUMENT_ID = "DctmDocumentId";
  private String dctmDocumentId;

  public static final String JSON_PROPERTY_DOC_DATA_CHECK = "DocDataCheck";
  private DocCustomerData docDataCheck;

  public static final String JSON_PROPERTY_DOC_FILE = "DocFile";
  private DocFile docFile;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "LegacyDocumentId";
  private String legacyDocumentId;


  public RequestAppendDocByParamRequestParametersAppendPath dctmDocumentId(String dctmDocumentId) {
    
    this.dctmDocumentId = dctmDocumentId;
    return this;
  }

   /**
   * Get dctmDocumentId
   * @return dctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDctmDocumentId() {
    return dctmDocumentId;
  }


  public void setDctmDocumentId(String dctmDocumentId) {
    this.dctmDocumentId = dctmDocumentId;
  }


  public RequestAppendDocByParamRequestParametersAppendPath docDataCheck(DocCustomerData docDataCheck) {
    
    this.docDataCheck = docDataCheck;
    return this;
  }

   /**
   * Get docDataCheck
   * @return docDataCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_DATA_CHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocCustomerData getDocDataCheck() {
    return docDataCheck;
  }


  public void setDocDataCheck(DocCustomerData docDataCheck) {
    this.docDataCheck = docDataCheck;
  }


  public RequestAppendDocByParamRequestParametersAppendPath docFile(DocFile docFile) {
    
    this.docFile = docFile;
    return this;
  }

   /**
   * Get docFile
   * @return docFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocFile getDocFile() {
    return docFile;
  }


  public void setDocFile(DocFile docFile) {
    this.docFile = docFile;
  }


  public RequestAppendDocByParamRequestParametersAppendPath legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestAppendDocByParamRequestParametersAppendPath requestAppendDocByParamRequestParametersAppendPath = (RequestAppendDocByParamRequestParametersAppendPath) o;
    return Objects.equals(this.dctmDocumentId, requestAppendDocByParamRequestParametersAppendPath.dctmDocumentId) &&
        Objects.equals(this.docDataCheck, requestAppendDocByParamRequestParametersAppendPath.docDataCheck) &&
        Objects.equals(this.docFile, requestAppendDocByParamRequestParametersAppendPath.docFile) &&
        Objects.equals(this.legacyDocumentId, requestAppendDocByParamRequestParametersAppendPath.legacyDocumentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dctmDocumentId, docDataCheck, docFile, legacyDocumentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestAppendDocByParamRequestParametersAppendPath {\n");
    sb.append("    dctmDocumentId: ").append(toIndentedString(dctmDocumentId)).append("\n");
    sb.append("    docDataCheck: ").append(toIndentedString(docDataCheck)).append("\n");
    sb.append("    docFile: ").append(toIndentedString(docFile)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestConcatenateDocsByParamsRequestParameters.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.RequestConcatenateDocsByParamsRequestParametersDocList;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestConcatenateDocsByParamsRequestParameters
 */
@JsonPropertyOrder({
  RequestConcatenateDocsByParamsRequestParameters.JSON_PROPERTY_DOC_LIST,
  RequestConcatenateDocsByParamsRequestParameters.JSON_PROPERTY_PAGE_RENUMBERING,
  RequestConcatenateDocsByParamsRequestParameters.JSON_PROPERTY_RETRIEVE_PROFILE
})
@JsonTypeName("_request_ConcatenateDocsByParams_requestParameters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestConcatenateDocsByParamsRequestParameters {
  public static final String JSON_PROPERTY_DOC_LIST = "DocList";
  private List<RequestConcatenateDocsByParamsRequestParametersDocList> docList = new ArrayList<>();

  public static final String JSON_PROPERTY_PAGE_RENUMBERING = "PageRenumbering";
  private String pageRenumbering;

  public static final String JSON_PROPERTY_RETRIEVE_PROFILE = "RetrieveProfile";
  private String retrieveProfile;


  public RequestConcatenateDocsByParamsRequestParameters docList(List<RequestConcatenateDocsByParamsRequestParametersDocList> docList) {
    
    this.docList = docList;
    return this;
  }

  public RequestConcatenateDocsByParamsRequestParameters addDocListItem(RequestConcatenateDocsByParamsRequestParametersDocList docListItem) {
    this.docList.add(docListItem);
    return this;
  }

   /**
   * Array of entries that specify documents to be concatenated. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some caller systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.
   * @return docList
  **/
  @ApiModelProperty(required = true, value = "Array of entries that specify documents to be concatenated. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some caller systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.")
  @JsonProperty(JSON_PROPERTY_DOC_LIST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RequestConcatenateDocsByParamsRequestParametersDocList> getDocList() {
    return docList;
  }


  public void setDocList(List<RequestConcatenateDocsByParamsRequestParametersDocList> docList) {
    this.docList = docList;
  }


  public RequestConcatenateDocsByParamsRequestParameters pageRenumbering(String pageRenumbering) {
    
    this.pageRenumbering = pageRenumbering;
    return this;
  }

   /**
   * Format for page numbers. Page number and and total number of pages are inserted instead of %d in the format string. No value or empty value disables renumbering of pages. The default is no renumbering.
   * @return pageRenumbering
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Page %d of %d", value = "Format for page numbers. Page number and and total number of pages are inserted instead of %d in the format string. No value or empty value disables renumbering of pages. The default is no renumbering.")
  @JsonProperty(JSON_PROPERTY_PAGE_RENUMBERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPageRenumbering() {
    return pageRenumbering;
  }


  public void setPageRenumbering(String pageRenumbering) {
    this.pageRenumbering = pageRenumbering;
  }


  public RequestConcatenateDocsByParamsRequestParameters retrieveProfile(String retrieveProfile) {
    
    this.retrieveProfile = retrieveProfile;
    return this;
  }

   /**
   * Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply
   * @return retrieveProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply")
  @JsonProperty(JSON_PROPERTY_RETRIEVE_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRetrieveProfile() {
    return retrieveProfile;
  }


  public void setRetrieveProfile(String retrieveProfile) {
    this.retrieveProfile = retrieveProfile;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestConcatenateDocsByParamsRequestParameters requestConcatenateDocsByParamsRequestParameters = (RequestConcatenateDocsByParamsRequestParameters) o;
    return Objects.equals(this.docList, requestConcatenateDocsByParamsRequestParameters.docList) &&
        Objects.equals(this.pageRenumbering, requestConcatenateDocsByParamsRequestParameters.pageRenumbering) &&
        Objects.equals(this.retrieveProfile, requestConcatenateDocsByParamsRequestParameters.retrieveProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docList, pageRenumbering, retrieveProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestConcatenateDocsByParamsRequestParameters {\n");
    sb.append("    docList: ").append(toIndentedString(docList)).append("\n");
    sb.append("    pageRenumbering: ").append(toIndentedString(pageRenumbering)).append("\n");
    sb.append("    retrieveProfile: ").append(toIndentedString(retrieveProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestConcatenateDocsByParamsRequestParametersDocList.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestConcatenateDocsByParamsRequestParametersDocList
 */
@JsonPropertyOrder({
  RequestConcatenateDocsByParamsRequestParametersDocList.JSON_PROPERTY_DCTM_DOCUMENT_ID,
  RequestConcatenateDocsByParamsRequestParametersDocList.JSON_PROPERTY_DOC_DATA_CHECK,
  RequestConcatenateDocsByParamsRequestParametersDocList.JSON_PROPERTY_DOC_FILE,
  RequestConcatenateDocsByParamsRequestParametersDocList.JSON_PROPERTY_LEGACY_DOCUMENT_ID
})
@JsonTypeName("_request_ConcatenateDocsByParams_requestParameters_DocList")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestConcatenateDocsByParamsRequestParametersDocList {
  public static final String JSON_PROPERTY_DCTM_DOCUMENT_ID = "DctmDocumentId";
  private String dctmDocumentId;

  public static final String JSON_PROPERTY_DOC_DATA_CHECK = "DocDataCheck";
  private DocCustomerData docDataCheck;

  public static final String JSON_PROPERTY_DOC_FILE = "DocFile";
  private DocFile docFile;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "LegacyDocumentId";
  private String legacyDocumentId;


  public RequestConcatenateDocsByParamsRequestParametersDocList dctmDocumentId(String dctmDocumentId) {
    
    this.dctmDocumentId = dctmDocumentId;
    return this;
  }

   /**
   * DctmDocumentId for document.
   * @return dctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DctmDocumentId for document.")
  @JsonProperty(JSON_PROPERTY_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDctmDocumentId() {
    return dctmDocumentId;
  }


  public void setDctmDocumentId(String dctmDocumentId) {
    this.dctmDocumentId = dctmDocumentId;
  }


  public RequestConcatenateDocsByParamsRequestParametersDocList docDataCheck(DocCustomerData docDataCheck) {
    
    this.docDataCheck = docDataCheck;
    return this;
  }

   /**
   * Get docDataCheck
   * @return docDataCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_DATA_CHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocCustomerData getDocDataCheck() {
    return docDataCheck;
  }


  public void setDocDataCheck(DocCustomerData docDataCheck) {
    this.docDataCheck = docDataCheck;
  }


  public RequestConcatenateDocsByParamsRequestParametersDocList docFile(DocFile docFile) {
    
    this.docFile = docFile;
    return this;
  }

   /**
   * Get docFile
   * @return docFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocFile getDocFile() {
    return docFile;
  }


  public void setDocFile(DocFile docFile) {
    this.docFile = docFile;
  }


  public RequestConcatenateDocsByParamsRequestParametersDocList legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * LegacyDocumentId for document.
   * @return legacyDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "LegacyDocumentId for document.")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestConcatenateDocsByParamsRequestParametersDocList requestConcatenateDocsByParamsRequestParametersDocList = (RequestConcatenateDocsByParamsRequestParametersDocList) o;
    return Objects.equals(this.dctmDocumentId, requestConcatenateDocsByParamsRequestParametersDocList.dctmDocumentId) &&
        Objects.equals(this.docDataCheck, requestConcatenateDocsByParamsRequestParametersDocList.docDataCheck) &&
        Objects.equals(this.docFile, requestConcatenateDocsByParamsRequestParametersDocList.docFile) &&
        Objects.equals(this.legacyDocumentId, requestConcatenateDocsByParamsRequestParametersDocList.legacyDocumentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dctmDocumentId, docDataCheck, docFile, legacyDocumentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestConcatenateDocsByParamsRequestParametersDocList {\n");
    sb.append("    dctmDocumentId: ").append(toIndentedString(dctmDocumentId)).append("\n");
    sb.append("    docDataCheck: ").append(toIndentedString(docDataCheck)).append("\n");
    sb.append("    docFile: ").append(toIndentedString(docFile)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestCountDocumentsPagesRequestParameters.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
//import com.poalim.sigverifysanitizer.documentum.model.OneOfURIarray;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestCountDocumentsPagesRequestParameters
 */
@JsonPropertyOrder({
  RequestCountDocumentsPagesRequestParameters.JSON_PROPERTY_DOCUMENTS,
  RequestCountDocumentsPagesRequestParameters.JSON_PROPERTY_DOS_EXTENSION,
  RequestCountDocumentsPagesRequestParameters.JSON_PROPERTY_TARGET_U_R_L
})
@JsonTypeName("_request_countDocumentsPages_requestParameters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestCountDocumentsPagesRequestParameters {
  public static final String JSON_PROPERTY_DOCUMENTS = "documents";
//  private OneOfURIarray documents = null;

  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  public static final String JSON_PROPERTY_TARGET_U_R_L = "targetURL";
  private URI targetURL;


//  public RequestCountDocumentsPagesRequestParameters documents(OneOfURIarray documents) {
//    
//    this.documents = documents;
//    return this;
//  }

   /**
   * Get documents
   * @return documents
  **/
//  @ApiModelProperty(required = true, value = "")
//  @JsonProperty(JSON_PROPERTY_DOCUMENTS)
//  @JsonInclude(value = JsonInclude.Include.ALWAYS)
//
//  public OneOfURIarray getDocuments() {
//    return documents;
//  }


//  public void setDocuments(OneOfURIarray documents) {
//    this.documents = documents;
//  }


  public RequestCountDocumentsPagesRequestParameters dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * Extension of content format to be used. If not set pdf will be used.
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extension of content format to be used. If not set pdf will be used.")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public RequestCountDocumentsPagesRequestParameters targetURL(URI targetURL) {
    
    this.targetURL = targetURL;
    return this;
  }

   /**
   * URL of output file. If not set the service will attempt to return data array in response
   * @return targetURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of output file. If not set the service will attempt to return data array in response")
  @JsonProperty(JSON_PROPERTY_TARGET_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getTargetURL() {
    return targetURL;
  }


  public void setTargetURL(URI targetURL) {
    this.targetURL = targetURL;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestCountDocumentsPagesRequestParameters requestCountDocumentsPagesRequestParameters = (RequestCountDocumentsPagesRequestParameters) o;
    return //Objects.equals(this.documents, requestCountDocumentsPagesRequestParameters.documents) &&
        Objects.equals(this.dosExtension, requestCountDocumentsPagesRequestParameters.dosExtension) &&
        Objects.equals(this.targetURL, requestCountDocumentsPagesRequestParameters.targetURL);
  }

  @Override
  public int hashCode() {
    //return Objects.hash(documents, dosExtension, targetURL);
    return Objects.hash(dosExtension, targetURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestCountDocumentsPagesRequestParameters {\n");
//    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    targetURL: ").append(toIndentedString(targetURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RequestRetrieveDocumentsByZipRequestParameters.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
//import com.poalim.sigverifysanitizer.documentum.model.OneOfURIarray;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RequestRetrieveDocumentsByZipRequestParameters
 */
@JsonPropertyOrder({
  RequestRetrieveDocumentsByZipRequestParameters.JSON_PROPERTY_DOCUMENTS,
  RequestRetrieveDocumentsByZipRequestParameters.JSON_PROPERTY_DOS_EXTENSION,
  RequestRetrieveDocumentsByZipRequestParameters.JSON_PROPERTY_FILE_NAME_SOURCE,
  RequestRetrieveDocumentsByZipRequestParameters.JSON_PROPERTY_TARGET_STATUS_U_R_L,
  RequestRetrieveDocumentsByZipRequestParameters.JSON_PROPERTY_TARGET_U_R_L
})
@JsonTypeName("_request_retrieveDocumentsByZip_requestParameters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RequestRetrieveDocumentsByZipRequestParameters {
  public static final String JSON_PROPERTY_DOCUMENTS = "documents";
//  private OneOfURIarray documents = null;

  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  /**
   * Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries
   */
  public enum FileNameSourceEnum {
    LEGACYDOCUMENTID("legacyDocumentId"),
    
    DCTMDOCUMENTID("dctmDocumentId"),
    
    EXPLICIT("explicit");

    private String value;

    FileNameSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileNameSourceEnum fromValue(String value) {
      for (FileNameSourceEnum b : FileNameSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILE_NAME_SOURCE = "fileNameSource";
  private FileNameSourceEnum fileNameSource;

  public static final String JSON_PROPERTY_TARGET_STATUS_U_R_L = "targetStatusURL";
  private URI targetStatusURL;

  public static final String JSON_PROPERTY_TARGET_U_R_L = "targetURL";
  private URI targetURL;


//  public RequestRetrieveDocumentsByZipRequestParameters documents(OneOfURIarray documents) {
//    
//    this.documents = documents;
//    return this;
//  }

   /**
   * Get documents
   * @return documents
  **/
//  @ApiModelProperty(required = true, value = "")
//  @JsonProperty(JSON_PROPERTY_DOCUMENTS)
//  @JsonInclude(value = JsonInclude.Include.ALWAYS)
//
//  public OneOfURIarray getDocuments() {
//    return documents;
//  }
//
//
//  public void setDocuments(OneOfURIarray documents) {
//    this.documents = documents;
//  }


  public RequestRetrieveDocumentsByZipRequestParameters dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * extension of content format to be retrieved
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "extension of content format to be retrieved")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public RequestRetrieveDocumentsByZipRequestParameters fileNameSource(FileNameSourceEnum fileNameSource) {
    
    this.fileNameSource = fileNameSource;
    return this;
  }

   /**
   * Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries
   * @return fileNameSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries")
  @JsonProperty(JSON_PROPERTY_FILE_NAME_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileNameSourceEnum getFileNameSource() {
    return fileNameSource;
  }


  public void setFileNameSource(FileNameSourceEnum fileNameSource) {
    this.fileNameSource = fileNameSource;
  }


  public RequestRetrieveDocumentsByZipRequestParameters targetStatusURL(URI targetStatusURL) {
    
    this.targetStatusURL = targetStatusURL;
    return this;
  }

   /**
   * URL of file with array of document statuses. If not given the service will return the array in the response. File format is same as DocumentsStatusList
   * @return targetStatusURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of file with array of document statuses. If not given the service will return the array in the response. File format is same as DocumentsStatusList")
  @JsonProperty(JSON_PROPERTY_TARGET_STATUS_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getTargetStatusURL() {
    return targetStatusURL;
  }


  public void setTargetStatusURL(URI targetStatusURL) {
    this.targetStatusURL = targetStatusURL;
  }


  public RequestRetrieveDocumentsByZipRequestParameters targetURL(URI targetURL) {
    
    this.targetURL = targetURL;
    return this;
  }

   /**
   * URL of target zip file. If not set the service will attempt to return zip in response
   * @return targetURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of target zip file. If not set the service will attempt to return zip in response")
  @JsonProperty(JSON_PROPERTY_TARGET_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getTargetURL() {
    return targetURL;
  }


  public void setTargetURL(URI targetURL) {
    this.targetURL = targetURL;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestRetrieveDocumentsByZipRequestParameters requestRetrieveDocumentsByZipRequestParameters = (RequestRetrieveDocumentsByZipRequestParameters) o;
    return //Objects.equals(this.documents, requestRetrieveDocumentsByZipRequestParameters.documents) &&
        Objects.equals(this.dosExtension, requestRetrieveDocumentsByZipRequestParameters.dosExtension) &&
        Objects.equals(this.fileNameSource, requestRetrieveDocumentsByZipRequestParameters.fileNameSource) &&
        Objects.equals(this.targetStatusURL, requestRetrieveDocumentsByZipRequestParameters.targetStatusURL) &&
        Objects.equals(this.targetURL, requestRetrieveDocumentsByZipRequestParameters.targetURL);
  }

  @Override
  public int hashCode() {
//    return Objects.hash(documents, dosExtension, fileNameSource, targetStatusURL, targetURL);
    return Objects.hash(dosExtension, fileNameSource, targetStatusURL, targetURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestRetrieveDocumentsByZipRequestParameters {\n");
//    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    fileNameSource: ").append(toIndentedString(fileNameSource)).append("\n");
    sb.append("    targetStatusURL: ").append(toIndentedString(targetStatusURL)).append("\n");
    sb.append("    targetURL: ").append(toIndentedString(targetURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\RetrieveFormat.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * RetrieveFormat
 */
@JsonPropertyOrder({
  RetrieveFormat.JSON_PROPERTY_DOC_FORMAT,
  RetrieveFormat.JSON_PROPERTY_DOS_EXTENSION,
  RetrieveFormat.JSON_PROPERTY_MIME_TYPE
})
@JsonTypeName("RetrieveFormat")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class RetrieveFormat {
  public static final String JSON_PROPERTY_DOC_FORMAT = "docFormat";
  private String docFormat;

  public static final String JSON_PROPERTY_DOS_EXTENSION = "dosExtension";
  private String dosExtension;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;


  public RetrieveFormat docFormat(String docFormat) {
    
    this.docFormat = docFormat;
    return this;
  }

   /**
   * Get docFormat
   * @return docFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOC_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocFormat() {
    return docFormat;
  }


  public void setDocFormat(String docFormat) {
    this.docFormat = docFormat;
  }


  public RetrieveFormat dosExtension(String dosExtension) {
    
    this.dosExtension = dosExtension;
    return this;
  }

   /**
   * Get dosExtension
   * @return dosExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOS_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDosExtension() {
    return dosExtension;
  }


  public void setDosExtension(String dosExtension) {
    this.dosExtension = dosExtension;
  }


  public RetrieveFormat mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveFormat retrieveFormat = (RetrieveFormat) o;
    return Objects.equals(this.docFormat, retrieveFormat.docFormat) &&
        Objects.equals(this.dosExtension, retrieveFormat.dosExtension) &&
        Objects.equals(this.mimeType, retrieveFormat.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docFormat, dosExtension, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveFormat {\n");
    sb.append("    docFormat: ").append(toIndentedString(docFormat)).append("\n");
    sb.append("    dosExtension: ").append(toIndentedString(dosExtension)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\SearchSearchCustomerDocumentsAccounts.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SearchSearchCustomerDocumentsAccounts
 */
@JsonPropertyOrder({
  SearchSearchCustomerDocumentsAccounts.JSON_PROPERTY_ACCOUNT_BANK_ID,
  SearchSearchCustomerDocumentsAccounts.JSON_PROPERTY_ACCOUNT_NUMBER,
  SearchSearchCustomerDocumentsAccounts.JSON_PROPERTY_BRANCH_ID
})
@JsonTypeName("_search_searchCustomerDocuments_accounts")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class SearchSearchCustomerDocumentsAccounts {
  public static final String JSON_PROPERTY_ACCOUNT_BANK_ID = "accountBankId";
  private Integer accountBankId;

  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
  private Integer accountNumber;

  public static final String JSON_PROPERTY_BRANCH_ID = "branchId";
  private Integer branchId;


  public SearchSearchCustomerDocumentsAccounts accountBankId(Integer accountBankId) {
    
    this.accountBankId = accountBankId;
    return this;
  }

   /**
   * Get accountBankId
   * @return accountBankId
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_BANK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAccountBankId() {
    return accountBankId;
  }


  public void setAccountBankId(Integer accountBankId) {
    this.accountBankId = accountBankId;
  }


  public SearchSearchCustomerDocumentsAccounts accountNumber(Integer accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(Integer accountNumber) {
    this.accountNumber = accountNumber;
  }


  public SearchSearchCustomerDocumentsAccounts branchId(Integer branchId) {
    
    this.branchId = branchId;
    return this;
  }

   /**
   * Get branchId
   * @return branchId
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBranchId() {
    return branchId;
  }


  public void setBranchId(Integer branchId) {
    this.branchId = branchId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSearchCustomerDocumentsAccounts searchSearchCustomerDocumentsAccounts = (SearchSearchCustomerDocumentsAccounts) o;
    return Objects.equals(this.accountBankId, searchSearchCustomerDocumentsAccounts.accountBankId) &&
        Objects.equals(this.accountNumber, searchSearchCustomerDocumentsAccounts.accountNumber) &&
        Objects.equals(this.branchId, searchSearchCustomerDocumentsAccounts.branchId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountBankId, accountNumber, branchId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSearchCustomerDocumentsAccounts {\n");
    sb.append("    accountBankId: ").append(toIndentedString(accountBankId)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\SearchSearchCustomerDocumentsCustomers.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SearchSearchCustomerDocumentsCustomers
 */
@JsonPropertyOrder({
  SearchSearchCustomerDocumentsCustomers.JSON_PROPERTY_ENTITY_ID,
  SearchSearchCustomerDocumentsCustomers.JSON_PROPERTY_ENTITY_TYPE
})
@JsonTypeName("_search_searchCustomerDocuments_customers")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class SearchSearchCustomerDocumentsCustomers {
  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private Integer entityType;


  public SearchSearchCustomerDocumentsCustomers entityId(String entityId) {
    
    this.entityId = entityId;
    return this;
  }

   /**
   * Get entityId
   * @return entityId
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public SearchSearchCustomerDocumentsCustomers entityType(Integer entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of customer:   1 - תעודה ישראלית   4 - תעודה זרה   5 - תאגיד רשום   6 - תאגיד לא רשום   7 - קבוצה של לקחות   8 - מספר פנימי")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEntityType() {
    return entityType;
  }


  public void setEntityType(Integer entityType) {
    this.entityType = entityType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSearchCustomerDocumentsCustomers searchSearchCustomerDocumentsCustomers = (SearchSearchCustomerDocumentsCustomers) o;
    return Objects.equals(this.entityId, searchSearchCustomerDocumentsCustomers.entityId) &&
        Objects.equals(this.entityType, searchSearchCustomerDocumentsCustomers.entityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSearchCustomerDocumentsCustomers {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\SearchSearchDocumentsByIdsSearchParameters.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.FetchType;
import com.poalim.sigverifysanitizer.documentum.model.PagingDefinition;
import com.poalim.sigverifysanitizer.documentum.model.SearchSearchDocumentsByIdsSearchParametersDocumentIds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SearchSearchDocumentsByIdsSearchParameters
 */
@JsonPropertyOrder({
  SearchSearchDocumentsByIdsSearchParameters.JSON_PROPERTY_DOCUMENT_IDS,
  SearchSearchDocumentsByIdsSearchParameters.JSON_PROPERTY_FETCH_TYPE,
  SearchSearchDocumentsByIdsSearchParameters.JSON_PROPERTY_PAGING_DEFINITIONS
})
@JsonTypeName("_search_searchDocumentsByIds_searchParameters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class SearchSearchDocumentsByIdsSearchParameters {
  public static final String JSON_PROPERTY_DOCUMENT_IDS = "documentIds";
  private List<SearchSearchDocumentsByIdsSearchParametersDocumentIds> documentIds = null;

  public static final String JSON_PROPERTY_FETCH_TYPE = "fetchType";
  private FetchType fetchType = FetchType.CONTENT;

  public static final String JSON_PROPERTY_PAGING_DEFINITIONS = "pagingDefinitions";
  private PagingDefinition pagingDefinitions;


  public SearchSearchDocumentsByIdsSearchParameters documentIds(List<SearchSearchDocumentsByIdsSearchParametersDocumentIds> documentIds) {
    
    this.documentIds = documentIds;
    return this;
  }

  public SearchSearchDocumentsByIdsSearchParameters addDocumentIdsItem(SearchSearchDocumentsByIdsSearchParametersDocumentIds documentIdsItem) {
    if (this.documentIds == null) {
      this.documentIds = new ArrayList<>();
    }
    this.documentIds.add(documentIdsItem);
    return this;
  }

   /**
   * Get documentIds
   * @return documentIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SearchSearchDocumentsByIdsSearchParametersDocumentIds> getDocumentIds() {
    return documentIds;
  }


  public void setDocumentIds(List<SearchSearchDocumentsByIdsSearchParametersDocumentIds> documentIds) {
    this.documentIds = documentIds;
  }


  public SearchSearchDocumentsByIdsSearchParameters fetchType(FetchType fetchType) {
    
    this.fetchType = fetchType;
    return this;
  }

   /**
   * Get fetchType
   * @return fetchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FETCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FetchType getFetchType() {
    return fetchType;
  }


  public void setFetchType(FetchType fetchType) {
    this.fetchType = fetchType;
  }


  public SearchSearchDocumentsByIdsSearchParameters pagingDefinitions(PagingDefinition pagingDefinitions) {
    
    this.pagingDefinitions = pagingDefinitions;
    return this;
  }

   /**
   * Get pagingDefinitions
   * @return pagingDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAGING_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PagingDefinition getPagingDefinitions() {
    return pagingDefinitions;
  }


  public void setPagingDefinitions(PagingDefinition pagingDefinitions) {
    this.pagingDefinitions = pagingDefinitions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSearchDocumentsByIdsSearchParameters searchSearchDocumentsByIdsSearchParameters = (SearchSearchDocumentsByIdsSearchParameters) o;
    return Objects.equals(this.documentIds, searchSearchDocumentsByIdsSearchParameters.documentIds) &&
        Objects.equals(this.fetchType, searchSearchDocumentsByIdsSearchParameters.fetchType) &&
        Objects.equals(this.pagingDefinitions, searchSearchDocumentsByIdsSearchParameters.pagingDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentIds, fetchType, pagingDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSearchDocumentsByIdsSearchParameters {\n");
    sb.append("    documentIds: ").append(toIndentedString(documentIds)).append("\n");
    sb.append("    fetchType: ").append(toIndentedString(fetchType)).append("\n");
    sb.append("    pagingDefinitions: ").append(toIndentedString(pagingDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\SearchSearchDocumentsByIdsSearchParametersDocumentIds.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SearchSearchDocumentsByIdsSearchParametersDocumentIds
 */
@JsonPropertyOrder({
  SearchSearchDocumentsByIdsSearchParametersDocumentIds.JSON_PROPERTY_DCTM_DOCUMENT_ID,
  SearchSearchDocumentsByIdsSearchParametersDocumentIds.JSON_PROPERTY_LEGACY_DOCUMENT_ID,
  SearchSearchDocumentsByIdsSearchParametersDocumentIds.JSON_PROPERTY_VERSION_LABEL
})
@JsonTypeName("_search_searchDocumentsByIds_searchParameters_documentIds")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
public class SearchSearchDocumentsByIdsSearchParametersDocumentIds {
  public static final String JSON_PROPERTY_DCTM_DOCUMENT_ID = "dctmDocumentId";
  private String dctmDocumentId;

  public static final String JSON_PROPERTY_LEGACY_DOCUMENT_ID = "legacyDocumentId";
  private String legacyDocumentId;

  public static final String JSON_PROPERTY_VERSION_LABEL = "versionLabel";
  private String versionLabel;


  public SearchSearchDocumentsByIdsSearchParametersDocumentIds dctmDocumentId(String dctmDocumentId) {
    
    this.dctmDocumentId = dctmDocumentId;
    return this;
  }

   /**
   * Get dctmDocumentId
   * @return dctmDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DCTM_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDctmDocumentId() {
    return dctmDocumentId;
  }


  public void setDctmDocumentId(String dctmDocumentId) {
    this.dctmDocumentId = dctmDocumentId;
  }


  public SearchSearchDocumentsByIdsSearchParametersDocumentIds legacyDocumentId(String legacyDocumentId) {
    
    this.legacyDocumentId = legacyDocumentId;
    return this;
  }

   /**
   * Get legacyDocumentId
   * @return legacyDocumentId
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLegacyDocumentId() {
    return legacyDocumentId;
  }


  public void setLegacyDocumentId(String legacyDocumentId) {
    this.legacyDocumentId = legacyDocumentId;
  }


  public SearchSearchDocumentsByIdsSearchParametersDocumentIds versionLabel(String versionLabel) {
    
    this.versionLabel = versionLabel;
    return this;
  }

   /**
   * Version label of documents to be retrieved. If unspecified CURRENT will be retrieved. * will retrieve all documents versions.
   * @return versionLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version label of documents to be retrieved. If unspecified CURRENT will be retrieved. * will retrieve all documents versions.")
  @JsonProperty(JSON_PROPERTY_VERSION_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersionLabel() {
    return versionLabel;
  }


  public void setVersionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSearchDocumentsByIdsSearchParametersDocumentIds searchSearchDocumentsByIdsSearchParametersDocumentIds = (SearchSearchDocumentsByIdsSearchParametersDocumentIds) o;
    return Objects.equals(this.dctmDocumentId, searchSearchDocumentsByIdsSearchParametersDocumentIds.dctmDocumentId) &&
        Objects.equals(this.legacyDocumentId, searchSearchDocumentsByIdsSearchParametersDocumentIds.legacyDocumentId) &&
        Objects.equals(this.versionLabel, searchSearchDocumentsByIdsSearchParametersDocumentIds.versionLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dctmDocumentId, legacyDocumentId, versionLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSearchDocumentsByIdsSearchParametersDocumentIds {\n");
    sb.append("    dctmDocumentId: ").append(toIndentedString(dctmDocumentId)).append("\n");
    sb.append("    legacyDocumentId: ").append(toIndentedString(legacyDocumentId)).append("\n");
    sb.append("    versionLabel: ").append(toIndentedString(versionLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\model\SysObjectData.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.poalim.sigverifysanitizer.documentum.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpDocFolderData;
import com.poalim.sigverifysanitizer.documentum.model.BnhpGeneralDocData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SysObjectData
 */
@JsonPropertyOrder({
  SysObjectData.JSON_PROPERTY_CREATION_TIME,
  SysObjectData.JSON_PROPERTY_LAST_UPDATE_TIME,
  SysObjectData.JSON_PROPERTY_OBJECT_NAME,
  SysObjectData.JSON_PROPERTY_OBJECT_TYPE,
  SysObjectData.JSON_PROPERTY_PATHS,
  SysObjectData.JSON_PROPERTY_VERSION_LABELS
})
@JsonTypeName("SysObjectData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T13:09:45.403932900+03:00[Asia/Jerusalem]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDoc"),
  @JsonSubTypes.Type(value = BnhpCustomerDocData.class, name = "BnhpCustomerDocData"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolder"),
  @JsonSubTypes.Type(value = BnhpDocFolderData.class, name = "BnhpDocFolderData"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDoc"),
  @JsonSubTypes.Type(value = BnhpGeneralDocData.class, name = "BnhpGeneralDocData"),
})

public class SysObjectData {
  public static final String JSON_PROPERTY_CREATION_TIME = "creationTime";
  private OffsetDateTime creationTime;

  public static final String JSON_PROPERTY_LAST_UPDATE_TIME = "lastUpdateTime";
  private OffsetDateTime lastUpdateTime;

  public static final String JSON_PROPERTY_OBJECT_NAME = "objectName";
  private String objectName;

  public static final String JSON_PROPERTY_OBJECT_TYPE = "objectType";
  protected String objectType;

  public static final String JSON_PROPERTY_PATHS = "paths";
  private List<String> paths = null;

  public static final String JSON_PROPERTY_VERSION_LABELS = "versionLabels";
  private List<String> versionLabels = null;


   /**
   * Get creationTime
   * @return creationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREATION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationTime() {
    return creationTime;
  }




   /**
   * Get lastUpdateTime
   * @return lastUpdateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }




  public SysObjectData objectName(String objectName) {
    
    this.objectName = objectName;
    return this;
  }

   /**
   * Object name.
   * @return objectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object name.")
  @JsonProperty(JSON_PROPERTY_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObjectName() {
    return objectName;
  }


  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }


  public SysObjectData objectType(String objectType) {
    
    this.objectType = objectType;
    return this;
  }

   /**
   * Get objectType
   * @return objectType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectType() {
    return objectType;
  }


  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public SysObjectData paths(List<String> paths) {
    
    this.paths = paths;
    return this;
  }

  public SysObjectData addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * List of absolute paths of folders the object is linked to
   * @return paths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of absolute paths of folders the object is linked to")
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPaths() {
    return paths;
  }


  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public SysObjectData versionLabels(List<String> versionLabels) {
    
    this.versionLabels = versionLabels;
    return this;
  }

  public SysObjectData addVersionLabelsItem(String versionLabelsItem) {
    if (this.versionLabels == null) {
      this.versionLabels = new ArrayList<>();
    }
    this.versionLabels.add(versionLabelsItem);
    return this;
  }

   /**
   * Get versionLabels
   * @return versionLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getVersionLabels() {
    return versionLabels;
  }


  public void setVersionLabels(List<String> versionLabels) {
    this.versionLabels = versionLabels;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SysObjectData sysObjectData = (SysObjectData) o;
    return Objects.equals(this.creationTime, sysObjectData.creationTime) &&
        Objects.equals(this.lastUpdateTime, sysObjectData.lastUpdateTime) &&
        Objects.equals(this.objectName, sysObjectData.objectName) &&
        Objects.equals(this.objectType, sysObjectData.objectType) &&
        Objects.equals(this.paths, sysObjectData.paths) &&
        Objects.equals(this.versionLabels, sysObjectData.versionLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, lastUpdateTime, objectName, objectType, paths, versionLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SysObjectData {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    versionLabels: ").append(toIndentedString(versionLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\proxy\DocumentumProxy.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.proxy;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.poalim.sigverifysanitizer.documentum.api.InfrastructuralServicesObjectOperationsByIdApi;
import com.poalim.sigverifysanitizer.documentum.model.BnhpCustomerDocData;
import com.poalim.sigverifysanitizer.documentum.model.DocCustomerData;
import com.poalim.sigverifysanitizer.documentum.model.DocDetails;
import com.poalim.sigverifysanitizer.documentum.model.DocFile;
import com.poalim.sigverifysanitizer.documentum.model.DocumentData;
import com.poalim.sigverifysanitizer.documentum.model.ExecutorDetails;
import com.poalim.sigverifysanitizer.documentum.model.IdType;
import com.poalim.sigverifysanitizer.model.XmlSignatureVerifyRequest;


public class DocumentumProxy {
	public static String insertDocument(XmlSignatureVerifyRequest request) {
		String id = UUID.randomUUID().toString();
		InfrastructuralServicesObjectOperationsByIdApi api = new InfrastructuralServicesObjectOperationsByIdApi();
//		api.getApiClient().setBasePath("https://twsodev01.restest.bank:8243/bnhp-DocumentManager/0.3.5");
//		api.getApiClient().addDefaultHeader(HttpHeaders.AUTHORIZATION, "Bearer 4a187e6e-9ec1-3ac7-9e42-6bd0fc76dab2");
//		api.getApiClient().setBasePath("http://tdcmdfs01-7.restest.bank:9033/0.3.5");
		api.getApiClient().setBasePath("http://localhost:9033/0.3.5");
		api.getApiClient().addDefaultHeader("X-JWT-Assertion", "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImI2TnozUDJwMHg1QWpfWENsUmhrVDFzNlNIQSJ9.eyJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbnRpZXIiOiJVbmxpbWl0ZWQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9rZXl0eXBlIjoiUFJPRFVDVElPTiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3ZlcnNpb24iOiIwLjMuNSIsImlzcyI6IndzbzIub3JnXC9wcm9kdWN0c1wvYW0iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbm5hbWUiOiJ3c28yRGV2VHJ5SXQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbmR1c2VyIjoiSTBHRkBjYXJib24uc3VwZXIiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbmR1c2VyVGVuYW50SWQiOiItMTIzNCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3N1YnNjcmliZXIiOiJJMEdGIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvdGllciI6IkdvbGQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbmlkIjoiMzA5OCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3VzZXJ0eXBlIjoiQVBQTElDQVRJT04iLCJleHAiOjE2MjE3ODg5NTEsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwaWNvbnRleHQiOiJcL2JuaHAtRG9jdW1lbnRNYW5hZ2VyXC8wLjMuNSJ9.cfJU2bKP6V0n7DgopgpCdFPPQHkOR4+1AlM12FpU1JQ3NG8TlgL3fRGhLED6sUFDDwsl7ksbv9zpidjNnK49vOldeh2duQ+CzdWLfOWpMLZBvwQLx95dCIs+QSAInNSRvMQ0m+jpYWXpzKU+GXFIBhR4bFrPeSC4Jqf3dRmzSp/b7QyZwkGf9ouOUDBZc6SzILdmargrAW5Ob2bgJFDBgtgRr7KrTq9yUgcp55dWngfPzZd0677rLtNCT8FrsuxXo9oeOAoIHXo3FFQ/ndbgncNE5MF9VyI6PHskzh5Tz7NCvTdAAoiilHwdJkWTtzGnqqZ7VuqejXr2uHEEdb3fxw==");
		DocumentData documentData= getDocumentData(request, id);
		documentData.setObjectType("bnhp_customer_doc");
		documentData.setVersionLabels(Arrays.asList("CURRENT","1.0"));
		//documentData.setDo
//		BnhpCustomerDocData bnhpCustomerDocData = new BnhpCustomerDocData();
		DocCustomerData docCustomerData= getDocCustomerData();
		documentData.setDocCustomerData(docCustomerData);

//		bnhpCustomerDocData.setDocCustomerData(docCustomerData);
//		bnhpCustomerDocData.setObjectType("bnhp_customer_doc");
//		bnhpCustomerDocData.setVersionLabels(Arrays.asList("CURRENT","1.0"));
//		api.createDocumentById(IdType.LEGACYDOCUMENTID, id, bnhpCustomerDocData, null, null);	
		
		
		api.createDocumentById(IdType.LEGACYDOCUMENTID, id, documentData, null, null);	
		return id;
	}
	private static DocumentData getDocumentData(XmlSignatureVerifyRequest request, String id) {
		DocumentData docData = new DocumentData();
		DocFile docFile = getDocFile(request.getBase64FileContent());
		
		docData.addDocFilesItem(docFile);

		docData.setLegacyDocumentId(id);
		return docData;
	}
	private static DocFile getDocFile(String file) {
		DocFile docFile = new DocFile();
		docFile.setDocStream(file.getBytes());
		docFile.setDocFormat("xml");
		return docFile;
	}
	private static DocCustomerData getDocCustomerData() {
		DocCustomerData docCustData = new DocCustomerData();
		ExecutorDetails executorDetails = new ExecutorDetails();
		docCustData.setExecutorDetails(executorDetails);
		executorDetails.setExecutingEmpIdCode("1234");
		docCustData.docDetails(getDocDetails());
		return docCustData;
	}
	private static DocDetails getDocDetails() {
		DocDetails docDetails = new DocDetails();
		docDetails.setProjectId(21);
		docDetails.setDocumentFormId("0000062016");
		docDetails.setBusinessSubAreaCode(10);
		docDetails.setBusinessAreaCode(80);
		
		return docDetails;
	}

}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\RFC3339DateFormat.java
-----------------------------------------------------
/*
 * Document Management REST API
 * Document Management REST API subset for internal (non-cloud) projects.
 *
 * The version of the OpenAPI document: 0.3.6
 * Contact: evgeni.doudine@poalim.co.il
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.poalim.sigverifysanitizer.documentum;

import com.fasterxml.jackson.databind.util.StdDateFormat;

import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class RFC3339DateFormat extends DateFormat {
  private static final long serialVersionUID = 1L;
  private static final TimeZone TIMEZONE_Z = TimeZone.getTimeZone("UTC");

  private final StdDateFormat fmt = new StdDateFormat()
          .withTimeZone(TIMEZONE_Z)
          .withColonInTimeZone(true);

  public RFC3339DateFormat() {
    this.calendar = new GregorianCalendar();
  }

  @Override
  public Date parse(String source) {
    return parse(source, new ParsePosition(0));
  }

  @Override
  public Date parse(String source, ParsePosition pos) {
    return fmt.parse(source, pos);
  }

  @Override
  public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {
    return fmt.format(date, toAppendTo, fieldPosition);
  }

  @Override
  public Object clone() {
    return this;
  }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\ServerConfiguration.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum;

import java.util.Map;

/**
 * Representing a Server configuration.
 */
public class ServerConfiguration {
    public String URL;
    public String description;
    public Map<String, ServerVariable> variables;

    /**
     * @param URL A URL to the target host.
     * @param description A describtion of the host designated by the URL.
     * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
     */
    public ServerConfiguration(String URL, String description, Map<String, ServerVariable> variables) {
        this.URL = URL;
        this.description = description;
        this.variables = variables;
    }

    /**
     * Format URL template using given variables.
     *
     * @param variables A map between a variable name and its value.
     * @return Formatted URL.
     */
    public String URL(Map<String, String> variables) {
        String url = this.URL;

        // go through variables and replace placeholders
        for (Map.Entry<String, ServerVariable> variable: this.variables.entrySet()) {
            String name = variable.getKey();
            ServerVariable serverVariable = variable.getValue();
            String value = serverVariable.defaultValue;

            if (variables != null && variables.containsKey(name)) {
                value = variables.get(name);
                if (serverVariable.enumValues.size() > 0 && !serverVariable.enumValues.contains(value)) {
                    throw new RuntimeException("The variable " + name + " in the server URL has invalid value " + value + ".");
                }
            }
            url = url.replaceAll("\\{" + name + "\\}", value);
        }
        return url;
    }

    /**
     * Format URL template using default server variables.
     *
     * @return Formatted URL.
     */
    public String URL() {
        return URL(null);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\ServerVariable.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum;

import java.util.HashSet;

/**
 * Representing a Server Variable for server URL template substitution.
 */
public class ServerVariable {
    public String description;
    public String defaultValue;
    public HashSet<String> enumValues = null;

    /**
     * @param description A description for the server variable.
     * @param defaultValue The default value to use for substitution.
     * @param enumValues An enumeration of string values to be used if the substitution options are from a limited set.
     */
    public ServerVariable(String description, String defaultValue, HashSet<String> enumValues) {
        this.description = description;
        this.defaultValue = defaultValue;
        this.enumValues = enumValues;
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\documentum\service\DocumentumService.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.documentum.service;

import java.net.URI;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
//import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientResponseException;

//import com.poalim.mv.talyon.commons.exception.DocumentumException;

//import com.poalim.mv.talyon.commons.model.AppProperties;
//import com.poalim.mv.talyon.commons.service.IDocumentumService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class DocumentumService {//implements IDocumentumService {

//    @Autowired
//    private OAuth2RestTemplate auth2RestTemplate;
//
//    @Autowired
//    private AppProperties appProperties;
//
//    @Override
//    public String createDocumentum(String body, String documentId) {
//        try{
//            log.info("Call documentum {}", body);
//            //String metadataSourceUrl = FilesUtils.buildDocumentumPath(body, "172.22.80.79/24400_2/hadar/");
//
//            String url = appProperties.getDocumentumServiceUrl()
//                    + documentId; //  "&cleanupPolicy=never&versionLabel=CURRENT&asNewVersion=true";
//
//            RequestEntity<String> request = RequestEntity
//                    .put(new URI(url))
//                    .accept(MediaType.APPLICATION_JSON)
//                    .contentType(MediaType.APPLICATION_JSON)
//                    .body(body);
//
//            ResponseEntity<String> responseEntity = auth2RestTemplate.exchange(request, String.class);
//
//            String response= responseEntity.getBody();
//
//            log.info("Documentum response {}", response);
//            if(response.toLowerCase().contains("error")){
//                throw new DocumentumException(response);
//            }
//            return response;
//        } catch (Exception e) {
//            log.error("{}, {}", body, e);
//            String message=null;
//            if(e instanceof RestClientResponseException){
//                RestClientResponseException ex = (RestClientResponseException)e;
//                log.info("exception: {}", ex.getResponseBodyAsString());
//                message = ex.getResponseBodyAsString();
//            }else{
//                message = e.getMessage();
//            }
//
//            throw new DocumentumException(message, e);
//        }
//    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\logging\client\model\ClientHttpRequestResponseLog.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.logging.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Data;
import org.springframework.http.HttpHeaders;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ClientHttpRequestResponseLog {

    private String url;

    private String method;

    private String curl;

    private int statusCode;

    private String responseBody;

    private HttpHeaders headers;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\logging\client\RestTemplateCurlPrinterInterceptor.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.logging.client;

import static com.poalim.sigverifysanitizer.util.JsonUtil.OBJECT_MAPPER;
//import static net.logstash.logback.argument.StructuredArguments.kv;
import com.fasterxml.jackson.databind.JsonNode;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Option;
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider;
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;
import com.poalim.sigverifysanitizer.logging.client.model.ClientHttpRequestResponseLog;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Set;
import javax.validation.constraints.NotNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRequest;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.StreamUtils;

@Component
@Slf4j
@RequiredArgsConstructor
public class RestTemplateCurlPrinterInterceptor implements ClientHttpRequestInterceptor {

    public static final int MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT = 5000;

    private static final String LOGSTASH = "logstash";

    private static final Configuration configuration = Configuration.builder().options(Option.SUPPRESS_EXCEPTIONS).jsonProvider(new JacksonJsonNodeJsonProvider()).mappingProvider(new JacksonMappingProvider()).build();

    @Value("${logger.client.blacklist-headers}")
    private Set<String> loggerClientBlacklistHeaders;

    @Value("${logger.client.mask-body-values}")
    private Set<String> loggerClientMaskBodyValues;

    @Value("${logger.appender}")
    private String loggerAppender;

    @NotNull
    @Override
    public ClientHttpResponse intercept(@NotNull HttpRequest request, @NotNull byte[] body, @NotNull ClientHttpRequestExecution execution) throws IOException {
        ClientHttpRequestResponseLog clientHttpRequestResponseLog = new ClientHttpRequestResponseLog();
        try {
            buildRequest(clientHttpRequestResponseLog,
                         request,
                         body);
        } catch (Exception ex) {
            log.error(ex.getMessage(),
                      ex);
        }
        ClientHttpResponse clientHttpResponse = execution.execute(request,
                                                                  body);
        // TODO: Dont delete !  clientHttpResponse inputStream couldn't read - investigate
        System.out.println(clientHttpResponse.getRawStatusCode());
        try {
            buildResponse(clientHttpRequestResponseLog,
                          clientHttpResponse);
        } catch (Exception ex) {
            log.error(ex.getMessage(),
                      ex);
        }
        print(clientHttpRequestResponseLog);
        return clientHttpResponse;
    }

    private void buildResponse(ClientHttpRequestResponseLog clientHttpRequestResponseLog, ClientHttpResponse clientHttpResponse) throws IOException {
        String responseBodyString = StreamUtils.copyToString(clientHttpResponse.getBody(),
                                                             Charset.defaultCharset());
        try {
            for (String jsonExp : loggerClientMaskBodyValues) {
                JsonNode updatedJson = JsonPath.using(configuration)
                                               .parse(responseBodyString)
                                               .set(jsonExp,
                                                    "********")
                                               .json();
                responseBodyString = updatedJson.toString();
            }
        } catch (Exception ex) {
            log.warn(ex.getMessage());
        }
        if (responseBodyString.length() > MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) {
            responseBodyString = String.format("Response body reached %s characters, part of the response body: ",
                                               MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) + responseBodyString.substring(0,
                                                                                                                        MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT);
        }
        clientHttpRequestResponseLog.setResponseBody(responseBodyString);
        clientHttpRequestResponseLog.setStatusCode(clientHttpResponse.getRawStatusCode());
        clientHttpRequestResponseLog.setHeaders(clientHttpResponse.getHeaders());
    }

    private void buildRequest(ClientHttpRequestResponseLog clientHttpRequestResponseLog, HttpRequest request, byte[] body) {
        StringBuilder curlString = new StringBuilder(60);
        curlString.append("curl --location --request ");
        curlString.append(request.getMethod())
                  .append(" ");
        curlString.append(String.format("'%s' ",
                                        request.getURI()));
        HttpHeaders httpHeaders = request.getHeaders();
        for (String header : httpHeaders.keySet()) {
            if (loggerClientBlacklistHeaders.contains(header.toLowerCase())) {
                curlString.append(String.format("--header '%s: ********' ",
                                                header));
                continue;
            }
            curlString.append(String.format("--header '%s: %s' ",
                                            header,
                                            httpHeaders.getFirst(header)));
        }
        if (body.length != 0) {
            MediaType contentType = request.getHeaders()
                                           .getContentType();
            String jsonString = new String(body);
            if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) {
                for (String jsonExp : loggerClientMaskBodyValues) {
                    JsonNode updatedJson = JsonPath.using(configuration)
                                                   .parse(jsonString)
                                                   .set(jsonExp,
                                                        "********")
                                                   .json();
                    jsonString = updatedJson.toString();
                }
            }
            if (jsonString.length() > MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) {
                jsonString = String.format("Request body reached %d characters, part of the request body:  %s",
                                           MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT,
                                           jsonString.substring(0,
                                                                MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT));
            }
            curlString.append(String.format("--data-raw '%s'",
                                            jsonString));
        }
        clientHttpRequestResponseLog.setCurl(curlString.toString());
        String url = String.format("%s://%s%s",
                                   request.getURI().getScheme(),
                                   request.getURI().getHost(),
                                   request.getURI().getPath());
        clientHttpRequestResponseLog.setUrl(url);
        if (request.getMethod() != null) {
            clientHttpRequestResponseLog.setMethod(request.getMethod().toString());
        }
    }

    private void print(ClientHttpRequestResponseLog clientHttpRequestResponseLog) throws IOException {
        if (loggerAppender.equalsIgnoreCase(LOGSTASH)) {
//            log.info(null,
//                     kv("clientHttpRequestResponse",
//                        clientHttpRequestResponseLog));
        } else {
            log.info(OBJECT_MAPPER.writeValueAsString(clientHttpRequestResponseLog));
        }
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\logging\filter\LoggingFilter.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.logging.filter;

import static com.poalim.sigverifysanitizer.util.JsonUtil.OBJECT_MAPPER;
//import static net.logstash.logback.argument.StructuredArguments.kv;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Option;
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider;
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;
import com.poalim.sigverifysanitizer.logging.model.LogResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Set;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.springframework.web.util.ContentCachingResponseWrapper;
import org.springframework.web.util.WebUtils;

@Slf4j
@Component
@RequiredArgsConstructor
@Order(Ordered.HIGHEST_PRECEDENCE + 50)
public class LoggingFilter extends OncePerRequestFilter {

    private static final int MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT = 5000;

    private static final String REQUEST_RESPONSE = "RequestResponse";

    private static final String FILTER_START_TIME = "filter_startTime";

    private static final String LOGSTASH = "logstash";

    private static final Configuration configuration = Configuration.builder().options(Option.SUPPRESS_EXCEPTIONS).jsonProvider(new JacksonJsonNodeJsonProvider()).mappingProvider(new JacksonMappingProvider()).build();

    @Value("${logger.client.blacklist-headers}")
    private Set<String> loggerClientBlacklistHeaders;

    @Value("${logger.client.mask-body-values}")
    private Set<String> loggerClientMaskBodyValues;

    @Value("${logger.appender}")
    private String loggerAppender;

    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {
        httpServletRequest.setAttribute(FILTER_START_TIME,
                                        System.currentTimeMillis());
        ContentCachingResponseWrapper contentCachingResponseWrapper = new ContentCachingResponseWrapper(httpServletResponse);
        ContentCachingRequestWrapper contentCachingRequestWrapper = new ContentCachingRequestWrapper(httpServletRequest);
        filterChain.doFilter(contentCachingRequestWrapper,
                             contentCachingResponseWrapper);
        int statusCode = httpServletResponse.getStatus();
        LogResponse logResponse = new LogResponse();
        logResponse.setCurl(getCurl(contentCachingRequestWrapper));
        logResponse.setMethod(httpServletRequest.getMethod());
        logResponse.setRemoteHost(httpServletRequest.getRemoteHost());
        logResponse.setStatusCode(statusCode);
        logResponse.setTimeElapsed((System.currentTimeMillis() - (Long) httpServletRequest.getAttribute(FILTER_START_TIME)));
        logResponse.setUserAgent(httpServletRequest.getHeader(HttpHeaders.USER_AGENT));
        logResponse.setUri((String) httpServletRequest.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE));
        String responseBody = getResponseBody(contentCachingResponseWrapper,
                                              httpServletResponse);
        if (responseBody != null && responseBody.length() > MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) {
            responseBody = String.format("Response body reached %s characters, part of the response body: ",
                                         MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) + responseBody.substring(0,
                                                                                                            MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT);
        }
        logResponse.setResponseBody(responseBody);
        logResponse(logResponse,
                    statusCode);
        contentCachingResponseWrapper.copyBodyToResponse();
    }

    private String getResponseBody(ContentCachingResponseWrapper wrappedResponse, HttpServletResponse httpServletResponse) {
        String contentType = httpServletResponse.getContentType();
        if (!APPLICATION_JSON_VALUE.equalsIgnoreCase(contentType)) {
            return null;
        }
        byte[] buf = wrappedResponse.getContentAsByteArray();
        return getContentAsString(buf,
                                  httpServletResponse.getCharacterEncoding());
    }

    private String getCurl(ContentCachingRequestWrapper contentCachingRequestWrapper) {
        StringBuilder curlString = new StringBuilder(60);
        curlString.append("curl --location --request ");
        curlString.append(contentCachingRequestWrapper.getMethod())
                  .append(" ");
        curlString.append(String.format("'%s",
                                        contentCachingRequestWrapper.getRequestURL()));
        String queryString = contentCachingRequestWrapper.getQueryString();
        if (queryString != null) {
            curlString.append("?")
                      .append(queryString);
        }
        curlString.append("' ");
        Enumeration<String> headerNames = contentCachingRequestWrapper.getHeaderNames();
        if (headerNames != null) {
            while (headerNames.hasMoreElements()) {
                String headerKey = headerNames.nextElement();
                String headerValue = contentCachingRequestWrapper.getHeader(headerKey);
                if (loggerClientBlacklistHeaders.contains(headerKey.toLowerCase())) {
                    curlString.append(String.format("--header '%s: ********' ",
                                                    headerKey));
                    continue;
                }
                curlString.append(String.format("--header '%s: %s' ",
                                                headerKey,
                                                headerValue));
            }
        }
        try {
            String bodyString = getBodyString(contentCachingRequestWrapper);
            if (bodyString != null && !bodyString.equalsIgnoreCase("")) {
                curlString.append(String.format("--data-raw '%s'",
                                                bodyString));
            }
        } catch (Exception e) {
            log.error(e.getMessage(),
                      e);
        }
        return curlString.toString();
    }

    private String getBodyString(ContentCachingRequestWrapper contentCachingRequestWrapper) throws IOException {
        String contentType = contentCachingRequestWrapper.getContentType();
        if (!APPLICATION_JSON_VALUE.equalsIgnoreCase(contentType)) {
            return null;
        }
        ContentCachingRequestWrapper wrapper = WebUtils.getNativeRequest(contentCachingRequestWrapper,
                                                                         ContentCachingRequestWrapper.class);
        if (wrapper == null) {
            return null;
        }
        byte[] body = wrapper.getContentAsByteArray();
        String jsonString = new String(body);
        if ("".equals(jsonString)) {
            return null;
        }
        for (String jsonExp : loggerClientMaskBodyValues) {
            try {
                JsonNode updatedJson = JsonPath.using(configuration)
                                               .parse(jsonString)
                                               .set(jsonExp,
                                                    "********")
                                               .json();
                jsonString = updatedJson.toString();
            } catch (Exception ex) {
                log.warn(ex.getMessage());
                break;
            }
        }
        if (jsonString.length() > MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT) {
            jsonString = String.format("Request body reached %d characters, part of the request body:  %s",
                                       MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT,
                                       jsonString.substring(0,
                                                            MAX_CHARACTERS_SIZE_JSON_FIELD_FOR_PRINT));
        }
        return jsonString;
    }

    private void logResponse(LogResponse logResponse, int statusCode) throws JsonProcessingException {
        if (loggerAppender.equalsIgnoreCase(LOGSTASH)) {
            if (statusCode >= 500) {
//                log.error(null,
//                          kv(REQUEST_RESPONSE,
//                             logResponse));
            } else if (statusCode >= 400) {
//                log.warn(null,
//                         kv(REQUEST_RESPONSE,
//                            logResponse));
            } else {
//                log.info(null,
//                         kv(REQUEST_RESPONSE,
//                            logResponse));
            }
        } else {
            if (statusCode >= 500) {
                log.error(OBJECT_MAPPER.writeValueAsString(logResponse));
            } else if (statusCode >= 400) {
                log.warn(OBJECT_MAPPER.writeValueAsString(logResponse));
            } else {
                log.info(OBJECT_MAPPER.writeValueAsString(logResponse));
            }
        }
    }

    private String getContentAsString(byte[] buf, String charsetName) {
        if (buf == null || buf.length == 0)
            return "";
        int length = buf.length;
        try {
            return new String(buf,
                              0,
                              length,
                              charsetName);
        } catch (UnsupportedEncodingException ex) {
            return "Unsupported Encoding";
        }
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\logging\model\LogResponse.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.logging.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LogResponse {

    private String method;

    private int statusCode;

    private long timeElapsed;

    private String uri;

    private String userAgent;

    private String remoteHost;

    private String curl;

    private String responseBody;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\model\BaseResponseStruct.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.model;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class BaseResponseStruct{
	@Schema
    private Map<String, String>  global;
    @Schema
    private Map<String, String>  data;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\model\FileSanitizingRequest.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class FileSanitizingRequest {

    @Schema(example = "10")
    private int clientSystemID;
    @Schema(example = "arvout57.xml")
    private String fileName;
    @Schema(example = "Base64 String")
    private String base64FileContent;
//    @Schema(example = "010203")
//    private String signature;
//    @Schema(example = "SHA-256")
//    private String algorithm;
//    @Schema(example = "Base64 String")
//    private String X509Cert;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\model\ResponseWrapper.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.model;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseWrapper{
	@Schema
	private Map<String, String> data;
	@Schema
	private BaseResponseStruct errors;
	@Schema
	private BaseResponseStruct messages;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\model\SignedFileSanitizingResponse.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SignedFileSanitizingResponse {

    @Schema(example = "10")
    private int clientSystemID;
    @Schema(example = "arvout57.xml")
    private String fileName;
    @Schema(example = "Base64 String")
    private String base64FileContent;
    @Schema(example = "010203")
    private byte[] signature;
    @Schema(example = "SHA-256")
    private String algorithm;
    @Schema(example = "Base64 String")
    private String X509Cert;
}



file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\model\XmlSignatureVerifyRequest.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class XmlSignatureVerifyRequest {

    @Schema(example = "Base64 String")
    private String base64FileContent;
    @Schema(example = "2")
    private int signatureIdx;
    @Schema(example = "Base64 String")
    private String X509Cert;
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\resec\proxy\ResecProxy.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.resec.proxy;

public class ResecProxy {
	static public int callSanitizingServer() {
		return 1;
	}
	static public byte[] getSanitizedFileStream() {
		return null;
	}
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\signature\verifier\CertificateHandler.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.signature.verifier;

import java.io.ByteArrayInputStream;
import java.security.cert.CRLReason;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateRevokedException;
import java.security.cert.X509CRL;
import java.security.cert.X509Certificate;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Base64Utils;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class CertificateHandler {

	Logger logger = LoggerFactory.getLogger(CertificateHandler.class);
	
	public static X509Certificate getCertificate(String strCert) throws Exception {
		CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
		X509Certificate cert = (X509Certificate) certFactory.generateCertificate
				(new ByteArrayInputStream(Base64Utils.decodeFromString(strCert)));
		cert.checkValidity();
		ensureCertificateNotRevoked(cert);
		return cert;
	}
	public static X509Certificate getCertificate(Node node) throws Exception {
		String strCert = ((Element)node).getElementsByTagName("X509Data").item(0).getTextContent();
		CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
		X509Certificate cert = (X509Certificate) certFactory.generateCertificate
				(new ByteArrayInputStream(Base64Utils.decodeFromString(strCert)));
		cert.checkValidity();
		ensureCertificateNotRevoked(cert);
		return cert;
	}
	private static void ensureCertificateNotRevoked(X509Certificate cert) throws Exception {
		X509CRL crl = CRLHandler.generateCRLObject(cert);
		if (crl==null) {
			throw new Exception("CRL comming is null");
		}
		else if (crl.isRevoked(cert)) {
			Date revocDate = crl.getRevokedCertificate(cert.getSerialNumber()).getRevocationDate();
			throw new CertificateRevokedException(revocDate, null, null, null);
		}
	}
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\signature\verifier\CRLHandler.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.signature.verifier;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.cert.CRLException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509CRL;
import java.security.cert.X509Certificate;
import java.util.Date;

import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.x509.AuthorityKeyIdentifier;
import org.bouncycastle.asn1.x509.Extension;
//import java.security.Extension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CRLHandler {
	
	
	private static Logger logger = LoggerFactory.getLogger(CertificateHandler.class);

	public static X509CRL generateCRLObject(X509Certificate cert) throws Exception {
		String endpoint = extractCRLUrlsFromCertificate(cert);
		X509CRL crl = getCRLFromLocalCRLFile(endpoint);
		if (crl == null) {
			crl = getUptodateCRLFileFromDistributionPoint(endpoint);
		}else if (crl.getNextUpdate()!=null) {
			logger.info("CRL valid Date:"+crl.getNextUpdate());
			if (crl.getNextUpdate().compareTo(new Date()) <= 0 ) {
				logger.info("CRL valid Date:"+crl.getNextUpdate()+" , Expired");
			}
			crl = getUptodateCRLFileFromDistributionPoint(endpoint);
			//TODO: consider recheck next update after getting updated crl 
		}
		return crl;
	}
	
	private static String getExnetnsionValue(X509Certificate cert,String oid) {
		byte[] extensionValue=cert.getExtensionValue(oid);
		String  extStr = null;
		if (extensionValue!=null) {
			extStr = new String(extensionValue);
		} 
		System.out.println("for oid:" + oid + ", value:"+extStr);
		return extStr;
		
	}
	private static String extractCRLUrlsFromCertificate(X509Certificate cert) {    
		//String crls = new String(cert.getExtensionValue("2.5.29.31"));
		getExnetnsionValue(cert,"2.5.29.31");
		//getExnetnsionValue(cert,"2.5.29.32");
		//getExnetnsionValue(cert,"2.5.29.35");

		String oid=Extension.authorityKeyIdentifier.getId();
		getExnetnsionValue(cert,oid);
		
		
//		byte[] extensionValue=cert.getExtensionValue(oid);
//		String crls1 = new String(extensionValue);
//		
//		ASN1OctetString akiAsn1OctetString =ASN1OctetString.getInstance(extensionValue);
//		AuthorityKeyIdentifier aki = AuthorityKeyIdentifier.getInstance(akiAsn1OctetString.getOctets());
//		aki.getKeyIdentifier();
//		aki.getAuthorityCertIssuer();
//		aki.getAuthorityCertSerialNumber();
//		System.out.println(cert.getIssuerDN());
//		System.out.println(cert.getPublicKey());
		String crls = "http://tampkicrl01.restest.bank/public/TamuzDevG2.crl"; 
		//String crls = new String(cert.getExtensionValue("2.5.29.31"));
		//TODO: consider mapping the entire URL to shuki's URL
		return crls;
	}
	private static X509CRL getCRLFromLocalCRLFile(String endpoint) throws CertificateException, CRLException, FileNotFoundException {
		try {
				String filename = endpoint.substring(endpoint.lastIndexOf("/") + 1);
				FileInputStream instream = new FileInputStream(filename);
				CertificateFactory cf = CertificateFactory.getInstance("x.509");
				X509CRL crl = (X509CRL)cf.generateCRL(instream);
				return crl;
		}
		catch(Exception ex) {
			return null;
		}
	}
	private static X509CRL getUptodateCRLFileFromDistributionPoint(String endpoint) throws Exception{
		//CertificateFactory cf = CertificateFactory.getInstance("x.509");
		X509CRL x509crl = null;
		try {
			InputStream instream = callHttpEndpoint(endpoint);
			saveCRLToFile(instream, endpoint);
			x509crl = getCRLFromLocalCRLFile(endpoint);
		}catch(Exception e){
			logger.error("fail to call to: {}",endpoint);
		}
		return x509crl;
		//X509CRL crl = (X509CRL)cf.generateCRL(instream);
		//return getCRLFromLocalCRLFile(endpoint);
	}
	private static InputStream callHttpEndpoint(String endpoint) throws Exception {
		URL url = new URL(endpoint);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		connection.setRequestMethod("GET");
		return connection.getInputStream();
	}
	private static void saveCRLToFile(InputStream instream, String endpoint) throws IOException {
		String fileName = endpoint.substring(endpoint.lastIndexOf("/") + 1);
		FileOutputStream stream = new FileOutputStream(fileName);
		try {
			stream.write(instream.readAllBytes());
		} 
		catch (IOException e) {
			//only log
		}
		finally {
			stream.close();
		}
	}
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\signature\verifier\XMLSignatureVerifier.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.signature.verifier;
import java.io.ByteArrayInputStream;

import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.springframework.util.Base64Utils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class XMLSignatureVerifier {
	Document doc = null;
	public boolean verifyXMLSignature(String signedfile) throws Exception{
		createDocument(signedfile);
		boolean isValid = validateAllSignatures();
		return isValid;
	}
	private void createDocument(String signedFile) throws Exception {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		dbf.setNamespaceAware(true);
		doc = dbf.newDocumentBuilder()
				.parse(new ByteArrayInputStream(Base64Utils.decodeFromString(signedFile)));
	}
	private boolean validateAllSignatures() throws Exception {
		NodeList signatures = doc.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");
		for (int i = 0; i < signatures.getLength(); i ++) {
			boolean validate=validateSingleSignature(signatures.item(i));
			if ( validate != true) {
				//throw XMLS
				return false;
			}
		}
		return true;
	}
	private boolean validateSingleSignature(Node signature) throws Exception {
		XMLSignatureFactory xsf = XMLSignatureFactory.getInstance("DOM");
		
		java.security.PublicKey publicKey = CertificateHandler.getCertificate(signature).getPublicKey();		
		DOMValidateContext valContext = new DOMValidateContext(publicKey, signature);
		setAllIdAtrributes(valContext, signature);
		XMLSignature sig = xsf.unmarshalXMLSignature(valContext);
		return sig.validate(valContext);
	}
	private void setAllIdAtrributes(DOMValidateContext context, Node sigNode) throws Exception {
		NodeList references = ((Element)sigNode).getElementsByTagName("Reference");
		for (int i = 0; i < references.getLength(); i++) {
			setSingleIdAtrribute((Element)references.item(i), context);
		}
	}
	private void setSingleIdAtrribute(Element reference, DOMValidateContext context) throws Exception {
		XPath xpath = XPathFactory.newInstance().newXPath();
		Element contentNode = (Element)xpath.compile(getXPathExpression(reference)).evaluate(doc, XPathConstants.NODE);
		context.setIdAttributeNS(contentNode, null, "id");
	}
	private String getXPathExpression(Element reference) {
		String expression = "//*[@id='%s']";
		String uri = reference.getAttributes().getNamedItem("URI").getTextContent().substring(1);
		return String.format(expression,uri);
	}
	/* import java.security.Signature;
	 * private boolean isSignatureOK(SignedFileRequest signedFile) throws Exception {
		Signature sig = Signature.getInstance(signedFile.getAlgorithm());
		sig.initVerify(getCertificate(signedFile.getX509Cert()));
		//sig.update(signedFile.getBase64FileContent().getBytes());
		sig.update(Base64Utils.decodeFromString(signedFile.getBase64FileContent()));
		return sig.verify(Base64Utils.decodeFromString(signedFile.getSignature()));
	}*/
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\java\com\poalim\sigverifysanitizer\util\JsonUtil.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class JsonUtil {

    public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,
                                                                                  false).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                                                                                                   false).registerModule(new JavaTimeModule());

    public static final XmlMapper XML_MAPPER = new XmlMapper();

    public static String decodeValue(String value) throws UnsupportedEncodingException {
        return URLDecoder.decode(value,
                                 StandardCharsets.UTF_8.toString());
    }

    public static <T> T deserializeFromJson(String contentAsString, Class<T> responseClass) throws JsonProcessingException {
        return OBJECT_MAPPER.readValue(contentAsString,
                                       responseClass);
    }

    public static <T> T deserializeFromXML(String contentAsString, Class<T> responseClass) throws JsonProcessingException {
        return XML_MAPPER.readValue(contentAsString,
                                    responseClass);
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\resources\application.yaml
-----------------------------------------------------
# If this property set to true any exception will return the ApiError object with
# a developer message and a stacktrace.
# False by default.
server:
  port: 8080
  max-http-header-size: 65536
  servlet:
    context-path: /bnhp-api/signature-services/signature
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

application:
  rest-connection-timeout-sec: 10
  rest-read-timeout-sec: 10

management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: health, prometheus, metrics
  endpoint:
    health:
      show-details: always
  health:
    db:
      enabled: true
#for secured connection
#javax:
#  net:
#    ssl:
#      trustStore: ${TRUSTORE_FILE} .jks/.pem
#      trustStorePassword: ${TRUSTORE_PASSWORD}
spring:
  application:
    name: sig-verify-sanitizer

  data:
    mongodb:
      uri: ${MONGODB_URL:mongodb://root:root@localhost:27017/admin}
springdoc:
  cache:
    disabled: true
  api-docs:
    groups:
      enabled: true
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    display-request-duration: true
    path: /swagger-ui
error-handling:
  debug-mode: false
logger:
  appender: ${LOGGER_APPENDER:STDOUT} # possible values: STDOUT / logstash
  level: ${LOGGER_LEVEL:DEBUG}
  client:
    blacklist-headers: authorization, cookie, cookies, jsessionid, registry, x-api-key
    mask-body-values: $.password
env:
  name: ${ENV_NAME:local}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\main\resources\logback-spring.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<configuration debug="true" scan="true" scanPeriod="5 seconds">

    <springProperty name="LOGGER_APPENDER" source="logger.appender" value="${logger.appender:-logstash}"/>
    <springProperty name="LOGGER_LEVEL" source="logger.level" value="${logger.level:-INFO}"/>
    <springProperty name="SPRING_APPLICATION_NAME" source="spring.application.name" value="${spring.application.name:-general}"/>
    <springProperty name="ENV_NAME" source="env.name" value="${env.name:local}"/>

    <contextName>testContext</contextName>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- Appender to log to file in a JSON format with LogstashEncoder and mdc-->
    <appender name="logstash" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- Here you can determine the timestamp pattern will be logged -->
            <timestampPattern>dd-MM-yyyy HH:mm:ss.SSS</timestampPattern>

            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                <maxLength>4096</maxLength>
                <shortenedClassNameLength>20</shortenedClassNameLength>
                <exclude>sun\.reflect\..*\.invoke.*</exclude>
                <exclude>net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                <rootCauseFirst>true</rootCauseFirst>
                <inlineHash>true</inlineHash>
            </throwableConverter>
            <!-- Here you can custom the fields name will be logged -->
            <fieldNames>
                <!-- In case you don't want the field will be logged add [ignore] inside the []-->
                <timestamp>timestamp</timestamp>
                <version>[ignore]</version>
                <levelValue>[ignore]</levelValue>
                <level>logLevel</level>
                <logger>loggerName</logger>
                <message>[ignore]</message>
            </fieldNames>
            <!-- In case you want to exclude the mdc -->
            <excludeMdcKeyName>X-B3-TraceId</excludeMdcKeyName>
            <excludeMdcKeyName>X-B3-SpanId</excludeMdcKeyName>
            <excludeMdcKeyName>X-Span-Export</excludeMdcKeyName>
            <excludeMdcKeyName>spanExportable</excludeMdcKeyName>

            <provider class="net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider">
                <pattern>
                    {
                    "message":"%.-10000message"
                    }
                </pattern>
            </provider>

            <customFields>{"application":"${SPRING_APPLICATION_NAME}-${ENV_NAME}"}</customFields>
        </encoder>
    </appender>

    <logger name="org.springframework" level="INFO"/>
    <logger name="org.hibernate" level="INFO"/>
    <logger name="com.zaxxer.hikari" level="${LOGGER_LEVEL:-INFO}"/>
    <logger name="org.apache.http" level="${LOGGER_LEVEL:-INFO}"/>

    <root level="${LOGGER_LEVEL:-INFO}" additivity="false">
        <appender-ref ref="${LOGGER_APPENDER:-logstash}"/>
    </root>


</configuration>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\test\java\com\poalim\sigverifysanitizer\config\EmbeddedMongoConfig.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.config;

import org.springframework.boot.autoconfigure.mongo.embedded.DownloadConfigBuilderCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

//@Configuration
public class EmbeddedMongoConfig {

    private static final String downloadPath = "https://repo.devops.poalim.bank/artifactory/chef-files-repo/flapdoodle/";

//    @Bean
//    public DownloadConfigBuilderCustomizer downloadCustomizer() {
//        return downloadConfigBuilder -> downloadConfigBuilder.downloadPath(downloadPath);
//    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\test\java\com\poalim\sigverifysanitizer\controller\HomeControllerTest.java
-----------------------------------------------------
package com.poalim.sigverifysanitizer.controller;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

@ExtendWith(MockitoExtension.class)
public class HomeControllerTest {

    private MockMvc mockMvc;

    @InjectMocks
    private HomeController homeController;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(homeController)
                                 .build();
    }

    @Test
    public void sampleApiTest() throws Exception {
        MockHttpServletRequestBuilder mockHttpServletRequestBuilder = MockMvcRequestBuilders.get("/")
                                                                                            .accept(MediaType.APPLICATION_JSON);
        ResultActions resultActions = this.mockMvc.perform(mockHttpServletRequestBuilder);
        MockHttpServletResponse mockHttpServletResponse = resultActions.andReturn()
                                                                       .getResponse();
        Assertions.assertEquals(302,
                                mockHttpServletResponse.getStatus());
    }
}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\src\test\resources\application-default.yaml
-----------------------------------------------------



file Read:C:\Users\AP068\git\sig-verify-sanitizer\swagger.json
-----------------------------------------------------
{"info":{"contact":{"email":"evgeni.doudine@poalim.co.il","name":"Evgeni Doudine"},"description":"Document Management REST API subset for internal (non-cloud) projects.","title":"Document Management REST API","version":"0.3.6"},"openapi":"3.0.0","servers":[{"url":"http://not-relevant"}],"paths":{"/WhoAmI":{"get":{"operationId":"getWhoAmI","responses":{"200":{"$ref":"#/components/responses/JsonResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Show the Client who he is","tags":["Troubleshooting and debugging"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/objects/{idType}/{documentId}":{"delete":{"operationId":"cancelObjectById","parameters":[{"description":"type of identifier","in":"path","name":"idType","required":true,"schema":{"$ref":"#/components/schemas/idType"}},{"description":"Unique document identifier","in":"path","name":"documentId","required":true,"schema":{"$ref":"#/components/schemas/documentId"}},{"$ref":"#/components/parameters/queryVersionLabel"},{"in":"query","name":"executorDetails","required":false,"schema":{"$ref":"#/components/schemas/executorDetails"}},{"description":"delete dependent objects","in":"query","name":"recursively","required":false,"schema":{"type":"boolean"}}],"responses":{"200":{"$ref":"#/components/responses/DocIdDataResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Cancel document by Id","tags":["Infrastructural Services: Object Operations by Id"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"},"get":{"operationId":"retrieveObjectById","parameters":[{"description":"Type of unique object identifier:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service","in":"path","name":"idType","required":true,"schema":{"$ref":"#/components/schemas/idType"}},{"description":"Unique document identifier","in":"path","name":"documentId","required":true,"schema":{"$ref":"#/components/schemas/documentId"}},{"$ref":"#/components/parameters/queryVersionLabel"},{"$ref":"#/components/parameters/queryRetrieveFormat"},{"$ref":"#/components/parameters/queryFechType"},{"$ref":"#/components/parameters/queryRetrieveProfile"},{"$ref":"#/components/parameters/queryRetrieveDeleted"},{"$ref":"#/components/parameters/queryExecutorDetails"},{"$ref":"#/components/parameters/queryObjectTypes"},{"$ref":"#/components/parameters/queryCustomerType"},{"$ref":"#/components/parameters/queryCompleteCustomerIdCode"},{"$ref":"#/components/parameters/queryCustomerId"},{"$ref":"#/components/parameters/queryAccountBankId"},{"$ref":"#/components/parameters/queryAccountBranchId"},{"$ref":"#/components/parameters/queryAccountNbr"},{"$ref":"#/components/parameters/queryDocDataCheck"},{"$ref":"#/components/parameters/queryPagingDefinition"},{"$ref":"#/components/parameters/queryRetrieveSecondaryContent"}],"responses":{"200":{"$ref":"#/components/responses/GetObjectResponse"},"203":{"$ref":"#/components/responses/GetObjectResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Retrieve Document By Unique Identifier","tags":["Infrastructural Services: Object Operations by Id"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"},"patch":{"operationId":"patchDocumentById","parameters":[{"description":"type of identifier","in":"path","name":"idType","required":true,"schema":{"$ref":"#/components/schemas/idType"}},{"description":"Unique document identifier","in":"path","name":"documentId","required":true,"schema":{"$ref":"#/components/schemas/documentId"}},{"$ref":"#/components/parameters/queryVersionLabel"},{"$ref":"#/components/parameters/queryMetadataSourceUrl"},{"$ref":"#/components/parameters/queryCleanupPolicy"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentData"}},"multipart/form-data":{"schema":{"$ref":"#/components/schemas/DocumentFormData"}}},"description":"Document metadata","required":true},"responses":{"200":{"$ref":"#/components/responses/DocIdDataResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Modify document properties by specifying it by unique ID","tags":["Infrastructural Services: Object Operations by Id"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"},"post":{"operationId":"createDocumentById","parameters":[{"description":"Type of identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.","in":"path","name":"idType","required":true,"schema":{"$ref":"#/components/schemas/idType"}},{"description":"Unique document identifier","in":"path","name":"documentId","required":true,"schema":{"$ref":"#/components/schemas/documentId"}},{"$ref":"#/components/parameters/queryMetadataSourceUrl"},{"$ref":"#/components/parameters/queryCleanupPolicy"}],"requestBody":{"content":{"application/json":{"example":{"docCustomerData":{"bankAccounts":[{"accountBankId":12,"accountNbr":123456,"branchId":123,"divisionId":5,"specialHandlingCode":false}],"customers":[{"completeCustomerIdCode":"09876543","customerFullName":"Lakoah Ploni","customerId":1234,"customerIdDocTypeCode":"1,","customerSerialNbr":"1,","occasionalCustomerInd":false}],"docDetails":{"businessAreaCode":40,"businessSubAreaCode":10,"channelId":1,"docCompletenessCode":0,"documentFormId":"5555500001","documentGroupIds":["XX_SOME_GROUP_ID"],"legacyDocumentEntryDttm":"2019-02-13T09:22:15Z","legacyDocumentId":"XX_SOME_DOCUMENT_ID","ongoingOrHistoryCode":1,"projectId":1,"scanStatusCode":4,"signatureStatusCode":0,"systemCode":28008},"executorDetails":{"empIdDocumentTypeCode":1,"executingBankId":12,"executingBranchId":777,"executingEmpFullName":"Pakid Ploni","executingEmpIdCode":"12345678","executingUserName":"XYZ","ipAddress":"1.2.3.4"}},"docFiles":[{"docSize":1024,"docURL":"file:///Tofes_Peula/0/somefile.pdf","mimeType":"application/pdf"}],"objectName":"SampleCustomerDocument.pdf","objectType":"BnhpCustomerDocData","versionLabels":["SOME_USER_LABEL"]},"schema":{"$ref":"#/components/schemas/DocumentData"}},"multipart/form-data":{"schema":{"$ref":"#/components/schemas/DocumentFormData"}}},"description":"Document metadata","required":true},"responses":{"200":{"$ref":"#/components/responses/DocIdDataResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Create object with given ID in repository.","tags":["Infrastructural Services: Object Operations by Id"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"},"put":{"operationId":"putDocumentById","parameters":[{"description":"Type of unique object identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service","in":"path","name":"idType","required":true,"schema":{"$ref":"#/components/schemas/idType"}},{"description":"Unique document identifier","in":"path","name":"documentId","required":true,"schema":{"$ref":"#/components/schemas/documentId"}},{"$ref":"#/components/parameters/queryMetadataSourceUrl"},{"$ref":"#/components/parameters/queryCleanupPolicy"},{"$ref":"#/components/parameters/queryVersionLabel"},{"$ref":"#/components/parameters/queryAsNewVersion"}],"requestBody":{"content":{"application/json":{"example":{"docCustomerData":{"bankAccounts":[{"accountBankId":12,"accountNbr":123456,"branchId":123,"divisionId":5,"specialHandlingCode":false}],"customers":[{"completeCustomerIdCode":"09876543","customerFullName":"Lakoah Ploni","customerId":1234,"customerIdDocTypeCode":"1,","customerSerialNbr":"1,","occasionalCustomerInd":false}],"docDetails":{"businessAreaCode":40,"businessSubAreaCode":10,"channelId":1,"docCompletenessCode":0,"documentFormId":"5555500001","documentGroupIds":["XX_SOME_GROUP_ID"],"legacyDocumentEntryDttm":"2019-02-13T09:22:15Z","legacyDocumentId":"XX_SOME_DOCUMENT_ID","ongoingOrHistoryCode":1,"projectId":1,"scanStatusCode":4,"signatureStatusCode":0,"systemCode":28008},"executorDetails":{"empIdDocumentTypeCode":1,"executingBankId":12,"executingBranchId":777,"executingEmpFullName":"Pakid Ploni","executingEmpIdCode":"12345678","executingUserName":"XYZ","ipAddress":"1.2.3.4"}},"docFiles":[{"docSize":1024,"docURL":"file:///Tofes_Peula/0/somefile.pdf","mimeType":"application/pdf"}],"objectName":"SampleCustomerDocument.pdf","objectType":"BnhpCustomerDocData","versionLabels":["SOME_USER_LABEL"]},"schema":{"$ref":"#/components/schemas/DocumentData"}},"multipart/form-data":{"schema":{"$ref":"#/components/schemas/DocumentFormData"}}},"description":"Document metadata","required":true},"responses":{"200":{"$ref":"#/components/responses/DocIdDataResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Create or update document by Unique Id","tags":["Infrastructural Services: Object Operations by Id"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/request/AppendDocByParam":{"post":{"operationId":"AppendDocByParam","parameters":[{"$ref":"#/components/parameters/headerRequestID"}],"requestBody":{"content":{"application/json":{"schema":{"properties":{"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"requestParameters":{"properties":{"AppendPath":{"description":"Array of entries that specify documents to be appended. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.","items":{"properties":{"DctmDocumentId":{"type":"string"},"DocDataCheck":{"$ref":"#/components/schemas/DocCustomerData"},"DocFile":{"$ref":"#/components/schemas/DocFile"},"LegacyDocumentId":{"type":"string"}},"type":"object"},"type":"array"},"DocumentFormId":{"description":"documentFormId (makat) for the newly created document.","type":"string"},"LegacyDocumentEntryDttm":{"description":"date for the newly created document","type":"string"},"LegacyDocumentId":{"description":"LegacyDocumentId for the newly created document.","type":"string"},"PageRenumbering":{"description":"Format for page numbers. Page number and and total number of pages are inserted instead of %d. Empty value disables renumbering of pages.","example":"Page %d of %d","type":"string"},"SrcDctmDocumentId":{"description":"DctmDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcLegacyDocumentId, it is mandatory to provide one of them.","type":"string"},"SrcLegacyDocumentId":{"description":"LegacyDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcDctmDocumentId, it is mandatory to provide one of them.","type":"string"}},"required":["LegacyDocumentEntryDttm","LegacyDocumentId","AppendPath"],"type":"object"}},"type":"object"}}},"description":"request parameters","required":true},"responses":{"200":{"$ref":"#/components/responses/DocIdDataResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Append pages to a pdf document and save as new document version","tags":["Requests"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/request/ConcatenateDocsByParams":{"post":{"operationId":"GetConcatenatedDocsByLegacyDocIds","parameters":[{"$ref":"#/components/parameters/headerRequestID"}],"requestBody":{"content":{"application/json":{"schema":{"properties":{"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"requestParameters":{"properties":{"DocList":{"description":"Array of entries that specify documents to be concatenated. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some caller systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not.","items":{"properties":{"DctmDocumentId":{"description":"DctmDocumentId for document.","type":"string"},"DocDataCheck":{"$ref":"#/components/schemas/DocCustomerData"},"DocFile":{"$ref":"#/components/schemas/DocFile"},"LegacyDocumentId":{"description":"LegacyDocumentId for document.","type":"string"}},"type":"object"},"type":"array"},"PageRenumbering":{"description":"Format for page numbers. Page number and and total number of pages are inserted instead of %d in the format string. No value or empty value disables renumbering of pages. The default is no renumbering.","example":"Page %d of %d","type":"string"},"RetrieveProfile":{"description":"Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply","type":"string"}},"required":["DocList"],"type":"object"}},"type":"object"}}},"description":"request parameters","required":true},"responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocFile"}},"application/pdf":{"schema":{"format":"binary","type":"string"}}},"description":"OK"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Concatenate given documents and retrieve resulting file","tags":["Requests"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/request/countDocumentsPages":{"post":{"callbacks":{"asyncReply":{"{$request.header.X-Callback-URL}":{"post":{"operationId":"countDocumentsPagesAsyncReply","parameters":[{"$ref":"#/components/parameters/headerCorrelationID"},{"$ref":"#/components/parameters/queryResult"},{"$ref":"#/components/parameters/queryErrorCode"},{"$ref":"#/components/parameters/queryErrorDetails"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentsPageCountList"}}},"description":"callback parameters","required":true},"responses":{"200":{"description":"OK"}}}}}},"operationId":"countDocumentsPages","parameters":[{"$ref":"#/components/parameters/headerRequestID"},{"$ref":"#/components/parameters/headerCallbackURL"}],"requestBody":{"content":{"application/json":{"schema":{"properties":{"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"requestParameters":{"properties":{"documents":{"oneOf":[{"$ref":"#/components/schemas/DocumentsSourceURL"},{"$ref":"#/components/schemas/DocumentsSourceList"}]},"dosExtension":{"description":"Extension of content format to be used. If not set pdf will be used.","type":"string"},"targetURL":{"description":"URL of output file. If not set the service will attempt to return data array in response","format":"uri","type":"string"}},"required":["documents"],"type":"object"}},"type":"object"}}},"description":"request parameters","required":true},"responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentsPageCountList"}}},"description":"OK"},"202":{"$ref":"#/components/responses/Accepted202"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Count pages in a set of documents","tags":["Requests"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/request/retrieveDocumentsByZip":{"post":{"callbacks":{"asyncReply":{"{$request.header.X-Callback-URL}":{"post":{"operationId":"retrieveDocumentsByZipAsyncReply","parameters":[{"$ref":"#/components/parameters/headerCorrelationID"},{"$ref":"#/components/parameters/queryResult"},{"$ref":"#/components/parameters/queryErrorCode"},{"$ref":"#/components/parameters/queryErrorDetails"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentsStatusList"}},"application/zip":{"schema":{"format":"binary","type":"string"}}},"description":"callback payload","required":true},"responses":{"200":{"description":"OK"}}}}}},"operationId":"retrieveDocumentsByZip","parameters":[{"$ref":"#/components/parameters/headerRequestID"},{"$ref":"#/components/parameters/headerCallbackURL"}],"requestBody":{"content":{"application/json":{"schema":{"properties":{"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"requestParameters":{"properties":{"documents":{"oneOf":[{"$ref":"#/components/schemas/DocumentsSourceURL"},{"$ref":"#/components/schemas/DocumentsSourceListWithDocDataCheck"}]},"dosExtension":{"description":"extension of content format to be retrieved","type":"string"},"fileNameSource":{"description":"Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries","enum":["legacyDocumentId","dctmDocumentId","explicit"],"type":"string"},"targetStatusURL":{"description":"URL of file with array of document statuses. If not given the service will return the array in the response. File format is same as DocumentsStatusList","format":"uri","type":"string"},"targetURL":{"description":"URL of target zip file. If not set the service will attempt to return zip in response","format":"uri","type":"string"}},"required":["documents"],"type":"object"}},"type":"object"}}},"description":"request parameters","required":true},"responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentsStatusList"}},"application/zip":{"schema":{"format":"binary","type":"string"}}},"description":"OK"},"202":{"$ref":"#/components/responses/Accepted202"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"409":{"$ref":"#/components/responses/Error409"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Retrieve number of documents in a zip archive","tags":["Requests"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/requests/async/{requestId}/status":{"get":{"operationId":"getAsyncRequestStatus","parameters":[{"description":"is of an asyncronous request","in":"path","name":"requestId","required":true,"schema":{"type":"string"}},{"description":"If need to return request output. default is false","in":"query","name":"returnOutput","required":false,"schema":{"type":"boolean"}}],"responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsyncRequestStatus"}}},"description":"OK"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Get status of an asynchronous request","tags":["Asynchronous request handling"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/search/searchCustomerDocuments":{"post":{"operationId":"searchCustomerDocuments","requestBody":{"content":{"application/json":{"schema":{"properties":{"accounts":{"items":{"properties":{"accountBankId":{"format":"int32","type":"integer"},"accountNumber":{"format":"int32","type":"integer"},"branchId":{"format":"int32","type":"integer"}},"required":["accountNumber","accountBankId","branchId"],"type":"object"},"type":"array"},"customers":{"items":{"properties":{"entityId":{"type":"string"},"entityType":{"$ref":"#/components/schemas/CustomerType"}},"required":["entityId"],"type":"object"},"type":"array"},"dosExtension":{"type":"string"},"endDate":{"format":"date","type":"string"},"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"fetchType":{"$ref":"#/components/schemas/fetchType"},"fulltext":{"type":"string"},"pagingDefinitions":{"$ref":"#/components/schemas/PagingDefinition"},"sortByFields":{"$ref":"#/components/schemas/SortDefinitions"},"startDate":{"format":"date","type":"string"}},"type":"object"}}},"description":"Search parameters","required":true},"responses":{"200":{"$ref":"#/components/responses/DocumentsListResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Retrieve list of Customer Documents according to user specified criteria","tags":["Search services"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/search/searchDocumentsByIds":{"post":{"operationId":"searchDocumentsByIds","requestBody":{"content":{"application/json":{"schema":{"properties":{"searchParameters":{"properties":{"documentIds":{"items":{"properties":{"dctmDocumentId":{"type":"string"},"legacyDocumentId":{"type":"string"},"versionLabel":{"description":"Version label of documents to be retrieved. If unspecified CURRENT will be retrieved. * will retrieve all documents versions.","type":"string"}},"required":["legacyDocumentId"],"type":"object"},"type":"array"},"fetchType":{"$ref":"#/components/schemas/fetchType"},"pagingDefinitions":{"$ref":"#/components/schemas/PagingDefinition"}},"type":"object"}},"type":"object"}}},"description":"Search parameters","required":true},"responses":{"200":{"$ref":"#/components/responses/DocumentsListResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Retrieve list of documents with the specified identifiers","tags":["Search services"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}},"/search/searchGeneralDocuments":{"post":{"operationId":"searchGeneralDocuments","requestBody":{"content":{"application/json":{"schema":{"properties":{"dosExtension":{"type":"string"},"endCreationDate":{"format":"date","type":"string"},"endUpdateDate":{"format":"date","type":"string"},"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"fetchType":{"$ref":"#/components/schemas/fetchType"},"nameSubstring":{"type":"string"},"ownerName":{"description":"document owner (user name)","type":"string"},"pagingDefinitions":{"$ref":"#/components/schemas/PagingDefinition"},"sortByFields":{"$ref":"#/components/schemas/SortDefinitions"},"startCreationDate":{"format":"date","type":"string"},"startUpdateDate":{"format":"date","type":"string"}},"type":"object"}}},"description":"Search parameters","required":true},"responses":{"200":{"$ref":"#/components/responses/DocumentsListResponse"},"400":{"$ref":"#/components/responses/Error400"},"401":{"$ref":"#/components/responses/Error401"},"403":{"$ref":"#/components/responses/Error403"},"404":{"$ref":"#/components/responses/Error404"},"405":{"$ref":"#/components/responses/Error405"},"406":{"$ref":"#/components/responses/Error406"},"500":{"$ref":"#/components/responses/Error500"},"503":{"$ref":"#/components/responses/Error503"}},"summary":"Search General Documents according to user criteria","tags":["Search services"],"x-auth-type":"Application & Application User","x-throttling-tier":"Unlimited"}}},"components":{"parameters":{"headerCallbackURL":{"in":"header","name":"X-Callback-URL","required":false,"schema":{"type":"string"}},"headerCorrelationID":{"description":"ID of an asyncronous request","in":"header","name":"X-Correlation-ID","required":true,"schema":{"type":"string"}},"headerRequestID":{"in":"header","name":"X-Request-ID","required":false,"schema":{"type":"string"}},"queryAccountBankId":{"description":"Limit retrieve only to objects with account in the specified bank   (to be used with accountNbr and accountBranchId)","in":"query","name":"accountBankId","required":false,"schema":{"format":"int32","type":"integer"}},"queryAccountBranchId":{"description":"Limit retrieve only to objects of the specified account branch (to be used with accountNbr and accountBankId)","in":"query","name":"accountBranchId","required":false,"schema":{"format":"int32","type":"integer"}},"queryAccountNbr":{"description":"Limit retrieve only to objects of the specified account number (to be used with accountBranchId and accountBankId)","in":"query","name":"accountNbr","required":false,"schema":{"format":"int32","type":"integer"}},"queryAsNewVersion":{"description":"Save updated document as new version","in":"query","name":"asNewVersion","required":false,"schema":{"default":true,"type":"boolean"}},"queryCleanupPolicy":{"description":"For file-based upload operations specifies policy for content deletion:\n  * always - always delete files after upload attempt, whether it succeeded or not\n  * never - always leave file as is\n  * onSuccess - delete file on success, leave file on failure","in":"query","name":"cleanupPolicy","required":false,"schema":{"enum":["always","never","onSuccess"],"type":"string"}},"queryCompleteCustomerIdCode":{"description":"Limit retrieve only to objects of customer with specified ID number (Teudat Zhut number, passport number, etc.)","in":"query","name":"completeCustomerIdCode","required":false,"schema":{"type":"string"}},"queryCustomerId":{"description":"Limit retrieve only to objects of customer with specified id  (sifrur lakoakh).","in":"query","name":"customerId","required":false,"schema":{"format":"int32","type":"integer"}},"queryCustomerType":{"description":"Limit retrieve only to objects of customer with customer ID type:\n  * 1 - תעודה ישראלית\n  * 4 - תעודה זרה\n  * 5 - תאגיד רשום\n  * 6 - תאגיד לא רשום\n  * 7 - קבוצה של לקחות\n  * 8 - מספר פנימי","in":"query","name":"customerTypeCode","required":false,"schema":{"$ref":"#/components/schemas/CustomerType"}},"queryDocDataCheck":{"description":"Limit retrieve only to objects with specified properties (more general alternative to account* and customer* properties). Allows specify any number of accounts or  customers as well as other properties. The structure is same as DocCustomerData.","in":"query","name":"docDataCheck","required":false,"schema":{"$ref":"#/components/schemas/DocCustomerData"}},"queryErrorCode":{"description":"error code","in":"query","name":"errorCode","required":false,"schema":{"format":"int32","type":"integer"}},"queryErrorDetails":{"description":"description of error in handling of an asynchronous request","in":"query","name":"errorDetails","required":false,"schema":{"type":"string"}},"queryExecutorDetails":{"description":"Details on person/applications performing the operation, needs to be passwd when these details cannot be derived from authentication parameters (application level authentication is in place).","in":"query","name":"executorDetails","required":false,"schema":{"$ref":"#/components/schemas/executorDetails"}},"queryFechType":{"description":"Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes","in":"query","name":"fetchType","required":false,"schema":{"$ref":"#/components/schemas/fetchType"}},"queryMetadataSourceUrl":{"description":"Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL.","in":"query","name":"metadataSourceUrl","required":false,"schema":{"format":"uri","type":"string"}},"queryObjectTypes":{"description":"list of object types to be retrieved If not set any object type will be retrieved","in":"query","name":"objectTypes","required":false,"schema":{"items":{"enum":["BnhpCustomerDoc","BnhpGeneralDoc","BnhpDocFolder"],"type":"string"},"type":"array"}},"queryPagingDefinition":{"description":"Specifies range of data items to be retrived (for directory entries, items of search results).","example":{"maxResultCount":25,"startIndex":0},"in":"query","name":"paging","required":false,"schema":{"$ref":"#/components/schemas/PagingDefinition"}},"queryResult":{"description":"request handling result (callback parameter)","in":"query","name":"result","required":true,"schema":{"enum":["OK TemporaryError FatalError GeneralError"],"type":"string"}},"queryRetrieveDeleted":{"description":"Retreieve document even if it has been marked as canceled.","in":"query","name":"retrieveDeleted","required":false,"schema":{"default":false,"type":"boolean"}},"queryRetrieveFormat":{"description":"Format of content to be retrieved. May contain one of three mutually exclusive fields:\n  * dosExtension - file extension (like pdf or txt)\n  * mimeType - MIME type of content (like application/pdf or text/plain)\n  * docFormat - documentum type specifier (like pdf or msw12)\n  If specified content format not available and _fetchTypeI is _file_\n  the service will return error 406. For other fetch types the service\n  will return document metadata without contents.\\\n  If this parameter is not specified the service will try to use the\n  _Accept_ HTTP header to determine content format to be retrieved.","in":"query","name":"retrieveFormat","required":false,"schema":{"$ref":"#/components/schemas/RetrieveFormat"}},"queryRetrieveProfile":{"description":"Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply","in":"query","name":"retrieveProfile","required":false,"schema":{"type":"string"}},"queryRetrieveSecondaryContent":{"description":"Retreieve secondary content (PrintBoss job)","in":"query","name":"retrieveSecondaryContent","required":false,"schema":{"default":false,"type":"boolean"}},"queryVersionLabel":{"description":"Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved.","in":"query","name":"versionLabel","required":false,"schema":{"default":"CURRENT","type":"string"}}},"responses":{"Accepted202":{"content":{"application/json":{"schema":{"properties":{"correlationId":{"type":"string"}},"required":["correlationId"],"type":"object"}}},"description":"Accepted"},"DocIdDataResponse":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/docIdData"}}},"description":"Response with document Id and version labels"},"DocumentsListResponse":{"content":{"application/json":{"schema":{"properties":{"estimatedTotal":{"format":"int64","type":"integer"},"objects":{"items":{"$ref":"#/components/schemas/DocumentData"},"type":"array"},"startIndex":{"format":"int64","type":"integer"}},"required":["objects"],"type":"object"}}},"description":"List of object entries"},"Error400":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Bad Request"},"Error401":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Unauthorized"},"Error403":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Forbidden"},"Error404":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Not Found"},"Error405":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Method not allowed"},"Error406":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Not acceptable"},"Error409":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Conflict"},"Error500":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Internal Server Error"},"Error503":{"content":{"application/problem+json":{"schema":{"$ref":"#/components/schemas/errorDetails"}}},"description":"Server Unavailable"},"GetObjectResponse":{"content":{"*/*":{"schema":{"format":"binary","type":"string"}},"application/json":{"schema":{"$ref":"#/components/schemas/DocumentData"}}},"description":"Document metadata and/or content"},"JsonResponse":{"content":{"application/json":{"schema":{"type":"string"}}},"description":"Returns JSON content"}},"schemas":{"AsyncRequestStatus":{"properties":{"errorDetails":{"description":"Detailed error message from the service","type":"string"},"finished":{"description":"When processing has finished","format":"date-time","type":"string"},"output":{"description":"request output","format":"byte","type":"string"},"outputType":{"description":"request output MIME type","type":"string"},"received":{"description":"When request has been received.","format":"date-time","type":"string"},"replied":{"description":"When asynchronous reply has been sent","format":"date-time","type":"string"},"requestId":{"description":"Asynchronous request id","type":"string"},"requestStatus":{"description":"Current request status","enum":["waiting","started","success","failure"],"type":"string"},"started":{"description":"When processing started","format":"date-time","type":"string"},"statusCode":{"description":"Request HTTP status code","format":"int32","type":"integer"},"statusMessage":{"description":"Request HTTP status message","type":"string"}},"type":"object"},"BankAccount":{"properties":{"accountBankId":{"format":"int32","type":"integer"},"accountNbr":{"format":"int32","type":"integer"},"accountType":{"format":"int32","type":"integer"},"branchId":{"format":"int32","type":"integer"},"divisionId":{"format":"int32","type":"integer"},"specialHandlingCode":{"type":"boolean"}},"type":"object"},"BnhpCustomerDocData":{"allOf":[{"$ref":"#/components/schemas/SysObjectData"},{"properties":{"docCustomerData":{"$ref":"#/components/schemas/DocCustomerData"},"docFiles":{"items":{"$ref":"#/components/schemas/DocFile"},"type":"array"},"extensions":{"items":{"discriminator":{"propertyName":"name"},"oneOf":[{"$ref":"#/components/schemas/bnhp_paper_doc"},{"$ref":"#/components/schemas/bnhp_corporate_doc"},{"$ref":"#/components/schemas/bnhp_division_business"}]},"type":"array"}},"type":"object"}]},"BnhpDocFolderData":{"allOf":[{"$ref":"#/components/schemas/SysObjectData"},{"properties":{"customers":{"items":{"$ref":"#/components/schemas/Customer"},"type":"array"},"folderContent":{"items":{"$ref":"#/components/schemas/DocumentData"},"type":"array"},"isEmpty":{"readOnly":true,"type":"boolean"}},"type":"object"}]},"BnhpGeneralDocData":{"allOf":[{"$ref":"#/components/schemas/SysObjectData"},{"properties":{"docFiles":{"items":{"$ref":"#/components/schemas/DocFile"},"type":"array"},"legacyDocumentEntryDttm":{"format":"date-time","type":"string"},"legacyDocumentId":{"type":"string"},"owner":{"type":"string"}},"type":"object"}]},"Customer":{"properties":{"completeCustomerIdCode":{"type":"string"},"customerFullName":{"type":"string"},"customerId":{"format":"int64","type":"integer"},"customerIdDocTypeCode":{"$ref":"#/components/schemas/CustomerType"},"customerSerialNbr":{"format":"int32","type":"integer"},"occasionalCustomerInd":{"type":"boolean"}},"type":"object"},"CustomerType":{"description":"Type of customer:\n  1 - תעודה ישראלית\n  4 - תעודה זרה\n  5 - תאגיד רשום\n  6 - תאגיד לא רשום\n  7 - קבוצה של לקחות\n  8 - מספר פנימי","format":"int32","type":"integer"},"DocCustomerData":{"example":{},"properties":{"bankAccounts":{"items":{"$ref":"#/components/schemas/BankAccount"},"type":"array"},"customers":{"items":{"$ref":"#/components/schemas/Customer"},"type":"array"},"docDetails":{"$ref":"#/components/schemas/DocDetails"},"executorDetails":{"$ref":"#/components/schemas/executorDetails"},"pensionFund":{"$ref":"#/components/schemas/PensionFund"}},"type":"object"},"DocDetails":{"properties":{"businessAreaCode":{"format":"int32","type":"integer"},"businessProcessId":{"format":"int32","type":"integer"},"businessSubAreaCode":{"format":"int32","type":"integer"},"channelId":{"format":"int32","type":"integer"},"concatenatedEventIds":{"items":{"type":"string"},"type":"array"},"currencyCode":{"format":"int32","type":"integer"},"dctmDocumentId":{"type":"string"},"docCompletenessCode":{"format":"int32","type":"integer"},"docDeliveryNum":{"format":"int32","type":"integer"},"documentEditionNbr":{"format":"int32","type":"integer"},"documentFormId":{"type":"string"},"documentGroupIds":{"items":{"type":"string"},"type":"array"},"legacyDocumentEntryDttm":{"format":"date-time","type":"string"},"legacyDocumentId":{"type":"string"},"ongoingOrHistoryCode":{"format":"int32","type":"integer"},"projectId":{"format":"int32","type":"integer"},"scanStatusCode":{"format":"int32","type":"integer"},"signatureStatusCode":{"format":"int32","type":"integer"},"systemCode":{"format":"int32","type":"integer"},"templateDataExistsInd":{"type":"boolean"},"transactionAmt":{"format":"double","type":"number"}},"type":"object"},"DocFile":{"properties":{"attributes":{"additionalProperties":{},"type":"object"},"checkSum":{"type":"string"},"classifier":{"description":"Content file classifier. Currently primary content has no classifier, secondary content (printboss job) has classifier \\\"secondary\\\". In the future other classifiers may be used.","type":"string"},"docFormat":{"type":"string"},"docSize":{"format":"int64","type":"integer"},"docStream":{"format":"byte","type":"string"},"docURL":{"type":"string"},"dosExtension":{"type":"string"},"mimeType":{"type":"string"}},"type":"object"},"DocPropertyExtension":{"discriminator":{"mapping":{"bnhp_corporate_doc":"#/components/schemas/bnhp_corporate_doc","bnhp_division_business":"#/components/schemas/bnhp_division_business","bnhp_paper_doc":"#/components/schemas/bnhp_paper_doc"},"propertyName":"name"},"properties":{"name":{"type":"string"}},"required":["name"],"type":"object"},"DocumentData":{"oneOf":[{"$ref":"#/components/schemas/BnhpCustomerDocData"},{"$ref":"#/components/schemas/BnhpGeneralDocData"},{"$ref":"#/components/schemas/BnhpDocFolderData"}]},"DocumentFormData":{"properties":{"documentData":{"$ref":"#/components/schemas/DocumentData","filename":{"items":{"format":"binary","type":"string"},"type":"array"}}},"type":"object"},"DocumentsPageCountList":{"items":{"properties":{"count":{"description":"Number of pages in the document. 0 - if document has no pages or number of pages cannot be counted","format":"int32","type":"integer"},"errorCode":{"format":"int32","type":"integer"},"errorDetails":{"type":"string"},"id":{"type":"string"},"idType":{"$ref":"#/components/schemas/idType"},"status":{"enum":["OK TemporaryError FatalError GeneralError"],"type":"string"}},"required":["status","id","idType","count"],"type":"object"},"type":"array"},"DocumentsSourceList":{"items":{"properties":{"id":{"type":"string"},"idType":{"$ref":"#/components/schemas/idType"},"name":{"type":"string"}},"required":["idType","id"],"type":"object"},"type":"array"},"DocumentsSourceListWithDocDataCheck":{"items":{"properties":{"docDataCheck":{"$ref":"#/components/schemas/DocCustomerData"},"id":{"type":"string"},"idType":{"$ref":"#/components/schemas/idType"},"name":{"type":"string"}},"required":["idType","id"],"type":"object"},"type":"array"},"DocumentsSourceURL":{"format":"uri","type":"string"},"DocumentsStatusList":{"items":{"properties":{"errorCode":{"format":"int32","type":"integer"},"errorDetails":{"type":"string"},"id":{"type":"string"},"idType":{"$ref":"#/components/schemas/idType"},"status":{"enum":["OK TemporaryError FatalError GeneralError"],"type":"string"}},"required":["status","id","idType"],"type":"object"},"type":"array"},"PagingDefinition":{"properties":{"maxResultCount":{"default":25,"format":"int32","type":"integer"},"shouldReturnTotalResults":{"default":false,"type":"boolean"},"startIndex":{"default":0,"format":"int64","type":"integer"}},"type":"object"},"PensionFund":{"properties":{"pensionFundNbr":{"format":"int32","type":"integer"},"planholderNumber":{"format":"int32","type":"integer"}},"type":"object"},"RetrieveFormat":{"example":{"dosExtension":"pdf"},"maxProperties":1,"minProperties":1,"properties":{"docFormat":{"type":"string"},"dosExtension":{"type":"string"},"mimeType":{"type":"string"}},"type":"object"},"SortDefinitions":{"description":"list of fields to sort by them","items":{"properties":{"name":{"type":"string"},"order":{"type":"string"}},"required":["name"],"type":"object"},"type":"array"},"SysObjectData":{"discriminator":{"mapping":{"BnhpCustomerDoc":"#/components/schemas/BnhpCustomerDocData","BnhpDocFolder":"#/components/schemas/BnhpDocFolderData","BnhpGeneralDoc":"#/components/schemas/BnhpGeneralDocData"},"propertyName":"objectType"},"properties":{"creationTime":{"format":"date-time","readOnly":true,"type":"string"},"lastUpdateTime":{"format":"date-time","readOnly":true,"type":"string"},"objectName":{"description":"Object name.","type":"string"},"objectType":{"type":"string"},"paths":{"description":"List of absolute paths of folders the object is linked to","items":{"type":"string"},"type":"array"},"versionLabels":{"items":{"type":"string"},"type":"array"}},"required":["objectType"],"type":"object"},"bnhp_corporate_doc":{"allOf":[{"$ref":"#/components/schemas/DocPropertyExtension"},{"description":"extension for corporate documents specific attributes","properties":{"properties":{"properties":{"isPrivate":{"type":"boolean"},"ownerName":{"type":"string"}},"type":"object"}},"type":"object"}]},"bnhp_division_business":{"allOf":[{"$ref":"#/components/schemas/DocPropertyExtension"},{"description":"extension for business division documents","properties":{"properties":{"properties":{"car_number":{"items":{"format":"int32","type":"integer"},"type":"array"},"credit_type":{"format":"int32","type":"integer"},"deposit_number":{"items":{"format":"int64","type":"integer"},"type":"array"},"expiration_date":{"format":"date","type":"string"},"gush_number":{"format":"int32","type":"integer"},"helka_number":{"format":"int64","type":"integer"},"number_branch_confidence":{"format":"int32","type":"integer"},"number_confidence":{"format":"int32","type":"integer"},"number_deal":{"format":"int32","type":"integer"},"original_document":{"format":"int32","type":"integer"},"property_type":{"format":"int32","type":"integer"},"serial_nbr_loan_guarantee":{"format":"int32","type":"integer"},"tathelka_number":{"format":"int32","type":"integer"}},"type":"object"}},"type":"object"}]},"bnhp_paper_doc":{"allOf":[{"$ref":"#/components/schemas/DocPropertyExtension"},{"description":"extension for scanned documents","properties":{"properties":{"properties":{"archive_box_nbr":{"format":"int32","type":"integer"},"archive_date":{"format":"date-time","type":"string"},"archive_film_nbr":{"format":"int32","type":"integer"},"bank_archive_id":{"format":"int32","type":"integer"},"bar_code":{"type":"string"},"box_batch_nbr":{"format":"int32","type":"integer"},"box_doc_serial_nbr":{"format":"int32","type":"integer"},"doc_location_code":{"format":"int32","type":"integer"},"document_page_cnt":{"format":"int32","type":"integer"},"film_frame_nbr":{"format":"int32","type":"integer"},"paper_destruction":{"format":"date-time","type":"string"}},"type":"object"}},"type":"object"}]},"docIdData":{"properties":{"dctmDocumentId":{"type":"string"},"versionLabels":{"items":{"type":"string"},"type":"array"},"versionNumber":{"type":"string"}},"type":"object"},"documentId":{"type":"string"},"errorDetails":{"properties":{"errorCode":{"format":"int32","type":"integer"},"errorDetails":{"type":"string"},"errorType":{"enum":["temporary","validation","general"],"type":"string"}},"type":"object"},"executorDetails":{"description":"Specifies human or software agent behind call to the service. It is mandatory when this information is not provided as part of JWT token from the API gateway (when service is used with with applicative system-level authentication  against API gateway. Not required when such information is provided. If provided the required fields  are ipAddress and executingEmpIdCode. When provided when operations that create/update documents is is suggested to provide executingBranchId and executingBankId because these attributes are used for filtering in document retrieval interfaces of Mesila.","properties":{"bankolId":{"format":"int32","type":"integer"},"empIdDocumentTypeCode":{"$ref":"#/components/schemas/CustomerType"},"executingBankId":{"format":"int32","type":"integer"},"executingBranchId":{"format":"int32","type":"integer"},"executingEmpFullName":{"type":"string"},"executingEmpIdCode":{"type":"string"},"executingUserName":{"type":"string"},"instructionReceiveTypeCode":{"format":"int32","type":"integer"},"ipAddress":{"type":"string"},"terminalChannelId":{"format":"int32","type":"integer"}},"type":"object"},"fetchType":{"default":"content","description":"Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes","enum":["full","content","meta"],"type":"string"},"idType":{"description":"type of unique object id:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service","enum":["legacyDocumentId","dctmDocumentId"],"type":"string"}}}}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\.gitignore
-----------------------------------------------------
*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# exclude jar for gradle wrapper
!gradle/wrapper/*.jar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

# build files
**/target
target
.gradle
build


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\api\openapi.yaml
-----------------------------------------------------
info:
  contact:
    email: "evgeni.doudine@poalim.co.il"
    name: Evgeni Doudine
  description: Document Management REST API subset for internal (non-cloud) projects.
  title: Document Management REST API
  version: 0.3.6
openapi: 3.0.0
servers:
  - url: "http://not-relevant"
paths:
  /WhoAmI:
    get:
      operationId: getWhoAmI
      responses:
        "200":
          $ref: "#/components/responses/JsonResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Show the Client who he is
      tags:
        - Troubleshooting and debugging
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  "/objects/{idType}/{documentId}":
    delete:
      operationId: cancelObjectById
      parameters:
        - description: type of identifier
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - in: query
          name: executorDetails
          required: false
          schema:
            $ref: "#/components/schemas/executorDetails"
        - description: delete dependent objects
          in: query
          name: recursively
          required: false
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Cancel document by Id
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    get:
      operationId: retrieveObjectById
      parameters:
        - description: "Type of unique object identifier:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryRetrieveFormat"
        - $ref: "#/components/parameters/queryFechType"
        - $ref: "#/components/parameters/queryRetrieveProfile"
        - $ref: "#/components/parameters/queryRetrieveDeleted"
        - $ref: "#/components/parameters/queryExecutorDetails"
        - $ref: "#/components/parameters/queryObjectTypes"
        - $ref: "#/components/parameters/queryCustomerType"
        - $ref: "#/components/parameters/queryCompleteCustomerIdCode"
        - $ref: "#/components/parameters/queryCustomerId"
        - $ref: "#/components/parameters/queryAccountBankId"
        - $ref: "#/components/parameters/queryAccountBranchId"
        - $ref: "#/components/parameters/queryAccountNbr"
        - $ref: "#/components/parameters/queryDocDataCheck"
        - $ref: "#/components/parameters/queryPagingDefinition"
        - $ref: "#/components/parameters/queryRetrieveSecondaryContent"
      responses:
        "200":
          $ref: "#/components/responses/GetObjectResponse"
        "203":
          $ref: "#/components/responses/GetObjectResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve Document By Unique Identifier
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    patch:
      operationId: patchDocumentById
      parameters:
        - description: type of identifier
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Modify document properties by specifying it by unique ID
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    post:
      operationId: createDocumentById
      parameters:
        - description: Type of identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
      requestBody:
        content:
          application/json:
            example:
              docCustomerData:
                bankAccounts:
                  - accountBankId: 12
                    accountNbr: 123456
                    branchId: 123
                    divisionId: 5
                    specialHandlingCode: false
                customers:
                  - completeCustomerIdCode: 09876543
                    customerFullName: Lakoah Ploni
                    customerId: 1234
                    customerIdDocTypeCode: "1,"
                    customerSerialNbr: "1,"
                    occasionalCustomerInd: false
                docDetails:
                  businessAreaCode: 40
                  businessSubAreaCode: 10
                  channelId: 1
                  docCompletenessCode: 0
                  documentFormId: "5555500001"
                  documentGroupIds:
                    - XX_SOME_GROUP_ID
                  legacyDocumentEntryDttm: "2019-02-13T09:22:15Z"
                  legacyDocumentId: XX_SOME_DOCUMENT_ID
                  ongoingOrHistoryCode: 1
                  projectId: 1
                  scanStatusCode: 4
                  signatureStatusCode: 0
                  systemCode: 28008
                executorDetails:
                  empIdDocumentTypeCode: 1
                  executingBankId: 12
                  executingBranchId: 777
                  executingEmpFullName: Pakid Ploni
                  executingEmpIdCode: "12345678"
                  executingUserName: XYZ
                  ipAddress: 1.2.3.4
              docFiles:
                - docSize: 1024
                  docURL: "file:///Tofes_Peula/0/somefile.pdf"
                  mimeType: application/pdf
              objectName: SampleCustomerDocument.pdf
              objectType: BnhpCustomerDocData
              versionLabels:
                - SOME_USER_LABEL
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Create object with given ID in repository.
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
    put:
      operationId: putDocumentById
      parameters:
        - description: "Type of unique object identifier. Note that specifying dctmDocumentId for document creation is not supported for non-superusers.\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
          in: path
          name: idType
          required: true
          schema:
            $ref: "#/components/schemas/idType"
        - description: Unique document identifier
          in: path
          name: documentId
          required: true
          schema:
            $ref: "#/components/schemas/documentId"
        - $ref: "#/components/parameters/queryMetadataSourceUrl"
        - $ref: "#/components/parameters/queryCleanupPolicy"
        - $ref: "#/components/parameters/queryVersionLabel"
        - $ref: "#/components/parameters/queryAsNewVersion"
      requestBody:
        content:
          application/json:
            example:
              docCustomerData:
                bankAccounts:
                  - accountBankId: 12
                    accountNbr: 123456
                    branchId: 123
                    divisionId: 5
                    specialHandlingCode: false
                customers:
                  - completeCustomerIdCode: 09876543
                    customerFullName: Lakoah Ploni
                    customerId: 1234
                    customerIdDocTypeCode: "1,"
                    customerSerialNbr: "1,"
                    occasionalCustomerInd: false
                docDetails:
                  businessAreaCode: 40
                  businessSubAreaCode: 10
                  channelId: 1
                  docCompletenessCode: 0
                  documentFormId: "5555500001"
                  documentGroupIds:
                    - XX_SOME_GROUP_ID
                  legacyDocumentEntryDttm: "2019-02-13T09:22:15Z"
                  legacyDocumentId: XX_SOME_DOCUMENT_ID
                  ongoingOrHistoryCode: 1
                  projectId: 1
                  scanStatusCode: 4
                  signatureStatusCode: 0
                  systemCode: 28008
                executorDetails:
                  empIdDocumentTypeCode: 1
                  executingBankId: 12
                  executingBranchId: 777
                  executingEmpFullName: Pakid Ploni
                  executingEmpIdCode: "12345678"
                  executingUserName: XYZ
                  ipAddress: 1.2.3.4
              docFiles:
                - docSize: 1024
                  docURL: "file:///Tofes_Peula/0/somefile.pdf"
                  mimeType: application/pdf
              objectName: SampleCustomerDocument.pdf
              objectType: BnhpCustomerDocData
              versionLabels:
                - SOME_USER_LABEL
            schema:
              $ref: "#/components/schemas/DocumentData"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DocumentFormData"
        description: Document metadata
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Create or update document by Unique Id
      tags:
        - "Infrastructural Services: Object Operations by Id"
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/AppendDocByParam:
    post:
      operationId: AppendDocByParam
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    AppendPath:
                      description: "Array of entries that specify documents to be appended. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not."
                      items:
                        properties:
                          DctmDocumentId:
                            type: string
                          DocDataCheck:
                            $ref: "#/components/schemas/DocCustomerData"
                          DocFile:
                            $ref: "#/components/schemas/DocFile"
                          LegacyDocumentId:
                            type: string
                        type: object
                      type: array
                    DocumentFormId:
                      description: documentFormId (makat) for the newly created document.
                      type: string
                    LegacyDocumentEntryDttm:
                      description: date for the newly created document
                      type: string
                    LegacyDocumentId:
                      description: LegacyDocumentId for the newly created document.
                      type: string
                    PageRenumbering:
                      description: "Format for page numbers. Page number and and total number of pages are inserted instead of %d. Empty value disables renumbering of pages."
                      example: "Page %d of %d"
                      type: string
                    SrcDctmDocumentId:
                      description: "DctmDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcLegacyDocumentId, it is mandatory to provide one of them."
                      type: string
                    SrcLegacyDocumentId:
                      description: "LegacyDocumentId of the source customer document. This document attributes will be used for the created document. Mutually exclusive with SrcDctmDocumentId, it is mandatory to provide one of them."
                      type: string
                  required:
                    - LegacyDocumentEntryDttm
                    - LegacyDocumentId
                    - AppendPath
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocIdDataResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Append pages to a pdf document and save as new document version
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/ConcatenateDocsByParams:
    post:
      operationId: GetConcatenatedDocsByLegacyDocIds
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    DocList:
                      description: "Array of entries that specify documents to be concatenated. Each entry must contain exactly one of the following attributes - DctmDocumentid, LegacyDocumentId, DocFile. Some caller systems may be required to provide DocDataCheck with client/account properties that will be checked against document attributes. If DocDataCheck is provided it will be checked, regardless if it is required for caller or not."
                      items:
                        properties:
                          DctmDocumentId:
                            description: DctmDocumentId for document.
                            type: string
                          DocDataCheck:
                            $ref: "#/components/schemas/DocCustomerData"
                          DocFile:
                            $ref: "#/components/schemas/DocFile"
                          LegacyDocumentId:
                            description: LegacyDocumentId for document.
                            type: string
                        type: object
                      type: array
                    PageRenumbering:
                      description: "Format for page numbers. Page number and and total number of pages are inserted instead of %d in the format string. No value or empty value disables renumbering of pages. The default is no renumbering."
                      example: "Page %d of %d"
                      type: string
                    RetrieveProfile:
                      description: "Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply"
                      type: string
                  required:
                    - DocList
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocFile"
            application/pdf:
              schema:
                format: binary
                type: string
          description: OK
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Concatenate given documents and retrieve resulting file
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/countDocumentsPages:
    post:
      callbacks:
        asyncReply:
          "{$request.header.X-Callback-URL}":
            post:
              operationId: countDocumentsPagesAsyncReply
              parameters:
                - $ref: "#/components/parameters/headerCorrelationID"
                - $ref: "#/components/parameters/queryResult"
                - $ref: "#/components/parameters/queryErrorCode"
                - $ref: "#/components/parameters/queryErrorDetails"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DocumentsPageCountList"
                description: callback parameters
                required: true
              responses:
                "200":
                  description: OK
      operationId: countDocumentsPages
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
        - $ref: "#/components/parameters/headerCallbackURL"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    documents:
                      oneOf:
                        - $ref: "#/components/schemas/DocumentsSourceURL"
                        - $ref: "#/components/schemas/DocumentsSourceList"
                    dosExtension:
                      description: Extension of content format to be used. If not set pdf will be used.
                      type: string
                    targetURL:
                      description: URL of output file. If not set the service will attempt to return data array in response
                      format: uri
                      type: string
                  required:
                    - documents
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsPageCountList"
          description: OK
        "202":
          $ref: "#/components/responses/Accepted202"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Count pages in a set of documents
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /request/retrieveDocumentsByZip:
    post:
      callbacks:
        asyncReply:
          "{$request.header.X-Callback-URL}":
            post:
              operationId: retrieveDocumentsByZipAsyncReply
              parameters:
                - $ref: "#/components/parameters/headerCorrelationID"
                - $ref: "#/components/parameters/queryResult"
                - $ref: "#/components/parameters/queryErrorCode"
                - $ref: "#/components/parameters/queryErrorDetails"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DocumentsStatusList"
                  application/zip:
                    schema:
                      format: binary
                      type: string
                description: callback payload
                required: true
              responses:
                "200":
                  description: OK
      operationId: retrieveDocumentsByZip
      parameters:
        - $ref: "#/components/parameters/headerRequestID"
        - $ref: "#/components/parameters/headerCallbackURL"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                requestParameters:
                  properties:
                    documents:
                      oneOf:
                        - $ref: "#/components/schemas/DocumentsSourceURL"
                        - $ref: "#/components/schemas/DocumentsSourceListWithDocDataCheck"
                    dosExtension:
                      description: extension of content format to be retrieved
                      type: string
                    fileNameSource:
                      description: "Source of names for zip file entries: * legacyDocumentId - from document legacyDocumentId * dctmDocumentId - from document dctmDocumentId * explicit - from the name attribute in DocumentsSourceList entries"
                      enum:
                        - legacyDocumentId
                        - dctmDocumentId
                        - explicit
                      type: string
                    targetStatusURL:
                      description: URL of file with array of document statuses. If not given the service will return the array in the response. File format is same as DocumentsStatusList
                      format: uri
                      type: string
                    targetURL:
                      description: URL of target zip file. If not set the service will attempt to return zip in response
                      format: uri
                      type: string
                  required:
                    - documents
                  type: object
              type: object
        description: request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsStatusList"
            application/zip:
              schema:
                format: binary
                type: string
          description: OK
        "202":
          $ref: "#/components/responses/Accepted202"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve number of documents in a zip archive
      tags:
        - Requests
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  "/requests/async/{requestId}/status":
    get:
      operationId: getAsyncRequestStatus
      parameters:
        - description: is of an asyncronous request
          in: path
          name: requestId
          required: true
          schema:
            type: string
        - description: If need to return request output. default is false
          in: query
          name: returnOutput
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: OK
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Get status of an asynchronous request
      tags:
        - Asynchronous request handling
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchCustomerDocuments:
    post:
      operationId: searchCustomerDocuments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                accounts:
                  items:
                    properties:
                      accountBankId:
                        format: int32
                        type: integer
                      accountNumber:
                        format: int32
                        type: integer
                      branchId:
                        format: int32
                        type: integer
                    required:
                      - accountNumber
                      - accountBankId
                      - branchId
                    type: object
                  type: array
                customers:
                  items:
                    properties:
                      entityId:
                        type: string
                      entityType:
                        $ref: "#/components/schemas/CustomerType"
                    required:
                      - entityId
                    type: object
                  type: array
                dosExtension:
                  type: string
                endDate:
                  format: date
                  type: string
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                fetchType:
                  $ref: "#/components/schemas/fetchType"
                fulltext:
                  type: string
                pagingDefinitions:
                  $ref: "#/components/schemas/PagingDefinition"
                sortByFields:
                  $ref: "#/components/schemas/SortDefinitions"
                startDate:
                  format: date
                  type: string
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve list of Customer Documents according to user specified criteria
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchDocumentsByIds:
    post:
      operationId: searchDocumentsByIds
      requestBody:
        content:
          application/json:
            schema:
              properties:
                searchParameters:
                  properties:
                    documentIds:
                      items:
                        properties:
                          dctmDocumentId:
                            type: string
                          legacyDocumentId:
                            type: string
                          versionLabel:
                            description: "Version label of documents to be retrieved. If unspecified CURRENT will be retrieved. * will retrieve all documents versions."
                            type: string
                        required:
                          - legacyDocumentId
                        type: object
                      type: array
                    fetchType:
                      $ref: "#/components/schemas/fetchType"
                    pagingDefinitions:
                      $ref: "#/components/schemas/PagingDefinition"
                  type: object
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Retrieve list of documents with the specified identifiers
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
  /search/searchGeneralDocuments:
    post:
      operationId: searchGeneralDocuments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dosExtension:
                  type: string
                endCreationDate:
                  format: date
                  type: string
                endUpdateDate:
                  format: date
                  type: string
                executorDetails:
                  $ref: "#/components/schemas/executorDetails"
                fetchType:
                  $ref: "#/components/schemas/fetchType"
                nameSubstring:
                  type: string
                ownerName:
                  description: document owner (user name)
                  type: string
                pagingDefinitions:
                  $ref: "#/components/schemas/PagingDefinition"
                sortByFields:
                  $ref: "#/components/schemas/SortDefinitions"
                startCreationDate:
                  format: date
                  type: string
                startUpdateDate:
                  format: date
                  type: string
              type: object
        description: Search parameters
        required: true
      responses:
        "200":
          $ref: "#/components/responses/DocumentsListResponse"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "405":
          $ref: "#/components/responses/Error405"
        "406":
          $ref: "#/components/responses/Error406"
        "500":
          $ref: "#/components/responses/Error500"
        "503":
          $ref: "#/components/responses/Error503"
      summary: Search General Documents according to user criteria
      tags:
        - Search services
      x-auth-type: "Application & Application User"
      x-throttling-tier: Unlimited
components:
  parameters:
    headerCallbackURL:
      in: header
      name: X-Callback-URL
      required: false
      schema:
        type: string
    headerCorrelationID:
      description: ID of an asyncronous request
      in: header
      name: X-Correlation-ID
      required: true
      schema:
        type: string
    headerRequestID:
      in: header
      name: X-Request-ID
      required: false
      schema:
        type: string
    queryAccountBankId:
      description: Limit retrieve only to objects with account in the specified bank   (to be used with accountNbr and accountBranchId)
      in: query
      name: accountBankId
      required: false
      schema:
        format: int32
        type: integer
    queryAccountBranchId:
      description: Limit retrieve only to objects of the specified account branch (to be used with accountNbr and accountBankId)
      in: query
      name: accountBranchId
      required: false
      schema:
        format: int32
        type: integer
    queryAccountNbr:
      description: Limit retrieve only to objects of the specified account number (to be used with accountBranchId and accountBankId)
      in: query
      name: accountNbr
      required: false
      schema:
        format: int32
        type: integer
    queryAsNewVersion:
      description: Save updated document as new version
      in: query
      name: asNewVersion
      required: false
      schema:
        default: true
        type: boolean
    queryCleanupPolicy:
      description: "For file-based upload operations specifies policy for content deletion:\n  * always - always delete files after upload attempt, whether it succeeded or not\n  * never - always leave file as is\n  * onSuccess - delete file on success, leave file on failure"
      in: query
      name: cleanupPolicy
      required: false
      schema:
        enum:
          - always
          - never
          - onSuccess
        type: string
    queryCompleteCustomerIdCode:
      description: "Limit retrieve only to objects of customer with specified ID number (Teudat Zhut number, passport number, etc.)"
      in: query
      name: completeCustomerIdCode
      required: false
      schema:
        type: string
    queryCustomerId:
      description: Limit retrieve only to objects of customer with specified id  (sifrur lakoakh).
      in: query
      name: customerId
      required: false
      schema:
        format: int32
        type: integer
    queryCustomerType:
      description: "Limit retrieve only to objects of customer with customer ID type:\n  * 1 - תעודה ישראלית\n  * 4 - תעודה זרה\n  * 5 - תאגיד רשום\n  * 6 - תאגיד לא רשום\n  * 7 - קבוצה של לקחות\n  * 8 - מספר פנימי"
      in: query
      name: customerTypeCode
      required: false
      schema:
        $ref: "#/components/schemas/CustomerType"
    queryDocDataCheck:
      description: "Limit retrieve only to objects with specified properties (more general alternative to account* and customer* properties). Allows specify any number of accounts or  customers as well as other properties. The structure is same as DocCustomerData."
      in: query
      name: docDataCheck
      required: false
      schema:
        $ref: "#/components/schemas/DocCustomerData"
    queryErrorCode:
      description: error code
      in: query
      name: errorCode
      required: false
      schema:
        format: int32
        type: integer
    queryErrorDetails:
      description: description of error in handling of an asynchronous request
      in: query
      name: errorDetails
      required: false
      schema:
        type: string
    queryExecutorDetails:
      description: "Details on person/applications performing the operation, needs to be passwd when these details cannot be derived from authentication parameters (application level authentication is in place)."
      in: query
      name: executorDetails
      required: false
      schema:
        $ref: "#/components/schemas/executorDetails"
    queryFechType:
      description: "Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes"
      in: query
      name: fetchType
      required: false
      schema:
        $ref: "#/components/schemas/fetchType"
    queryMetadataSourceUrl:
      description: "Allows provide URL as source of document metadata. If request as well contains metadata in the body, it will override the metadata that was read from the URL."
      in: query
      name: metadataSourceUrl
      required: false
      schema:
        format: uri
        type: string
    queryObjectTypes:
      description: list of object types to be retrieved If not set any object type will be retrieved
      in: query
      name: objectTypes
      required: false
      schema:
        items:
          enum:
            - BnhpCustomerDoc
            - BnhpGeneralDoc
            - BnhpDocFolder
          type: string
        type: array
    queryPagingDefinition:
      description: "Specifies range of data items to be retrived (for directory entries, items of search results)."
      example:
        maxResultCount: 25
        startIndex: 0
      in: query
      name: paging
      required: false
      schema:
        $ref: "#/components/schemas/PagingDefinition"
    queryResult:
      description: request handling result (callback parameter)
      in: query
      name: result
      required: true
      schema:
        enum:
          - OK TemporaryError FatalError GeneralError
        type: string
    queryRetrieveDeleted:
      description: Retreieve document even if it has been marked as canceled.
      in: query
      name: retrieveDeleted
      required: false
      schema:
        default: false
        type: boolean
    queryRetrieveFormat:
      description: "Format of content to be retrieved. May contain one of three mutually exclusive fields:\n  * dosExtension - file extension (like pdf or txt)\n  * mimeType - MIME type of content (like application/pdf or text/plain)\n  * docFormat - documentum type specifier (like pdf or msw12)\n  If specified content format not available and _fetchTypeI is _file_\n  the service will return error 406. For other fetch types the service\n  will return document metadata without contents.\\\n  If this parameter is not specified the service will try to use the\n  _Accept_ HTTP header to determine content format to be retrieved."
      in: query
      name: retrieveFormat
      required: false
      schema:
        $ref: "#/components/schemas/RetrieveFormat"
    queryRetrieveProfile:
      description: "Additional retrieve parameters. The known values currently are * HTTP - the service will return temporary link for content retrieval * STREAM - the service will return content directly in the reply"
      in: query
      name: retrieveProfile
      required: false
      schema:
        type: string
    queryRetrieveSecondaryContent:
      description: Retreieve secondary content (PrintBoss job)
      in: query
      name: retrieveSecondaryContent
      required: false
      schema:
        default: false
        type: boolean
    queryVersionLabel:
      description: Version label of documents to be retrieved or updated. If unspecified CURRENT will be retrieved.
      in: query
      name: versionLabel
      required: false
      schema:
        default: CURRENT
        type: string
  responses:
    Accepted202:
      content:
        application/json:
          schema:
            properties:
              correlationId:
                type: string
            required:
              - correlationId
            type: object
      description: Accepted
    DocIdDataResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/docIdData"
      description: Response with document Id and version labels
    DocumentsListResponse:
      content:
        application/json:
          schema:
            properties:
              estimatedTotal:
                format: int64
                type: integer
              objects:
                items:
                  $ref: "#/components/schemas/DocumentData"
                type: array
              startIndex:
                format: int64
                type: integer
            required:
              - objects
            type: object
      description: List of object entries
    Error400:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Bad Request
    Error401:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Unauthorized
    Error403:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Forbidden
    Error404:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Not Found
    Error405:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Method not allowed
    Error406:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Not acceptable
    Error409:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Conflict
    Error500:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Internal Server Error
    Error503:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/errorDetails"
      description: Server Unavailable
    GetObjectResponse:
      content:
        "*/*":
          schema:
            format: binary
            type: string
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentData"
      description: Document metadata and/or content
    JsonResponse:
      content:
        application/json:
          schema:
            type: string
      description: Returns JSON content
  schemas:
    AsyncRequestStatus:
      properties:
        errorDetails:
          description: Detailed error message from the service
          type: string
        finished:
          description: When processing has finished
          format: date-time
          type: string
        output:
          description: request output
          format: byte
          type: string
        outputType:
          description: request output MIME type
          type: string
        received:
          description: When request has been received.
          format: date-time
          type: string
        replied:
          description: When asynchronous reply has been sent
          format: date-time
          type: string
        requestId:
          description: Asynchronous request id
          type: string
        requestStatus:
          description: Current request status
          enum:
            - waiting
            - started
            - success
            - failure
          type: string
        started:
          description: When processing started
          format: date-time
          type: string
        statusCode:
          description: Request HTTP status code
          format: int32
          type: integer
        statusMessage:
          description: Request HTTP status message
          type: string
      type: object
    BankAccount:
      properties:
        accountBankId:
          format: int32
          type: integer
        accountNbr:
          format: int32
          type: integer
        accountType:
          format: int32
          type: integer
        branchId:
          format: int32
          type: integer
        divisionId:
          format: int32
          type: integer
        specialHandlingCode:
          type: boolean
      type: object
    BnhpCustomerDocData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            docCustomerData:
              $ref: "#/components/schemas/DocCustomerData"
            docFiles:
              items:
                $ref: "#/components/schemas/DocFile"
              type: array
            extensions:
              items:
                discriminator:
                  propertyName: name
                oneOf:
                  - $ref: "#/components/schemas/bnhp_paper_doc"
                  - $ref: "#/components/schemas/bnhp_corporate_doc"
                  - $ref: "#/components/schemas/bnhp_division_business"
              type: array
          type: object
    BnhpDocFolderData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            customers:
              items:
                $ref: "#/components/schemas/Customer"
              type: array
            folderContent:
              items:
                $ref: "#/components/schemas/DocumentData"
              type: array
            isEmpty:
              readOnly: true
              type: boolean
          type: object
    BnhpGeneralDocData:
      allOf:
        - $ref: "#/components/schemas/SysObjectData"
        - properties:
            docFiles:
              items:
                $ref: "#/components/schemas/DocFile"
              type: array
            legacyDocumentEntryDttm:
              format: date-time
              type: string
            legacyDocumentId:
              type: string
            owner:
              type: string
          type: object
    Customer:
      properties:
        completeCustomerIdCode:
          type: string
        customerFullName:
          type: string
        customerId:
          format: int64
          type: integer
        customerIdDocTypeCode:
          $ref: "#/components/schemas/CustomerType"
        customerSerialNbr:
          format: int32
          type: integer
        occasionalCustomerInd:
          type: boolean
      type: object
    CustomerType:
      description: "Type of customer:\n  1 - תעודה ישראלית\n  4 - תעודה זרה\n  5 - תאגיד רשום\n  6 - תאגיד לא רשום\n  7 - קבוצה של לקחות\n  8 - מספר פנימי"
      format: int32
      type: integer
    DocCustomerData:
      example: {}
      properties:
        bankAccounts:
          items:
            $ref: "#/components/schemas/BankAccount"
          type: array
        customers:
          items:
            $ref: "#/components/schemas/Customer"
          type: array
        docDetails:
          $ref: "#/components/schemas/DocDetails"
        executorDetails:
          $ref: "#/components/schemas/executorDetails"
        pensionFund:
          $ref: "#/components/schemas/PensionFund"
      type: object
    DocDetails:
      properties:
        businessAreaCode:
          format: int32
          type: integer
        businessProcessId:
          format: int32
          type: integer
        businessSubAreaCode:
          format: int32
          type: integer
        channelId:
          format: int32
          type: integer
        concatenatedEventIds:
          items:
            type: string
          type: array
        currencyCode:
          format: int32
          type: integer
        dctmDocumentId:
          type: string
        docCompletenessCode:
          format: int32
          type: integer
        docDeliveryNum:
          format: int32
          type: integer
        documentEditionNbr:
          format: int32
          type: integer
        documentFormId:
          type: string
        documentGroupIds:
          items:
            type: string
          type: array
        legacyDocumentEntryDttm:
          format: date-time
          type: string
        legacyDocumentId:
          type: string
        ongoingOrHistoryCode:
          format: int32
          type: integer
        projectId:
          format: int32
          type: integer
        scanStatusCode:
          format: int32
          type: integer
        signatureStatusCode:
          format: int32
          type: integer
        systemCode:
          format: int32
          type: integer
        templateDataExistsInd:
          type: boolean
        transactionAmt:
          format: double
          type: number
      type: object
    DocFile:
      properties:
        attributes:
          additionalProperties: {}
          type: object
        checkSum:
          type: string
        classifier:
          description: "Content file classifier. Currently primary content has no classifier, secondary content (printboss job) has classifier \\\"secondary\\\". In the future other classifiers may be used."
          type: string
        docFormat:
          type: string
        docSize:
          format: int64
          type: integer
        docStream:
          format: byte
          type: string
        docURL:
          type: string
        dosExtension:
          type: string
        mimeType:
          type: string
      type: object
    DocPropertyExtension:
      discriminator:
        mapping:
          bnhp_corporate_doc: "#/components/schemas/bnhp_corporate_doc"
          bnhp_division_business: "#/components/schemas/bnhp_division_business"
          bnhp_paper_doc: "#/components/schemas/bnhp_paper_doc"
        propertyName: name
      properties:
        name:
          type: string
      required:
        - name
      type: object
    DocumentData:
      oneOf:
        - $ref: "#/components/schemas/BnhpCustomerDocData"
        - $ref: "#/components/schemas/BnhpGeneralDocData"
        - $ref: "#/components/schemas/BnhpDocFolderData"
    DocumentFormData:
      properties:
        documentData:
          $ref: "#/components/schemas/DocumentData"
          filename:
            items:
              format: binary
              type: string
            type: array
      type: object
    DocumentsPageCountList:
      items:
        properties:
          count:
            description: Number of pages in the document. 0 - if document has no pages or number of pages cannot be counted
            format: int32
            type: integer
          errorCode:
            format: int32
            type: integer
          errorDetails:
            type: string
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          status:
            enum:
              - OK TemporaryError FatalError GeneralError
            type: string
        required:
          - status
          - id
          - idType
          - count
        type: object
      type: array
    DocumentsSourceList:
      items:
        properties:
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          name:
            type: string
        required:
          - idType
          - id
        type: object
      type: array
    DocumentsSourceListWithDocDataCheck:
      items:
        properties:
          docDataCheck:
            $ref: "#/components/schemas/DocCustomerData"
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          name:
            type: string
        required:
          - idType
          - id
        type: object
      type: array
    DocumentsSourceURL:
      format: uri
      type: string
    DocumentsStatusList:
      items:
        properties:
          errorCode:
            format: int32
            type: integer
          errorDetails:
            type: string
          id:
            type: string
          idType:
            $ref: "#/components/schemas/idType"
          status:
            enum:
              - OK TemporaryError FatalError GeneralError
            type: string
        required:
          - status
          - id
          - idType
        type: object
      type: array
    PagingDefinition:
      properties:
        maxResultCount:
          default: 25
          format: int32
          type: integer
        shouldReturnTotalResults:
          default: false
          type: boolean
        startIndex:
          default: 0
          format: int64
          type: integer
      type: object
    PensionFund:
      properties:
        pensionFundNbr:
          format: int32
          type: integer
        planholderNumber:
          format: int32
          type: integer
      type: object
    RetrieveFormat:
      example:
        dosExtension: pdf
      maxProperties: 1
      minProperties: 1
      properties:
        docFormat:
          type: string
        dosExtension:
          type: string
        mimeType:
          type: string
      type: object
    SortDefinitions:
      description: list of fields to sort by them
      items:
        properties:
          name:
            type: string
          order:
            type: string
        required:
          - name
        type: object
      type: array
    SysObjectData:
      discriminator:
        mapping:
          BnhpCustomerDoc: "#/components/schemas/BnhpCustomerDocData"
          BnhpDocFolder: "#/components/schemas/BnhpDocFolderData"
          BnhpGeneralDoc: "#/components/schemas/BnhpGeneralDocData"
        propertyName: objectType
      properties:
        creationTime:
          format: date-time
          readOnly: true
          type: string
        lastUpdateTime:
          format: date-time
          readOnly: true
          type: string
        objectName:
          description: Object name.
          type: string
        objectType:
          type: string
        paths:
          description: List of absolute paths of folders the object is linked to
          items:
            type: string
          type: array
        versionLabels:
          items:
            type: string
          type: array
      required:
        - objectType
      type: object
    bnhp_corporate_doc:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for corporate documents specific attributes
          properties:
            properties:
              properties:
                isPrivate:
                  type: boolean
                ownerName:
                  type: string
              type: object
          type: object
    bnhp_division_business:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for business division documents
          properties:
            properties:
              properties:
                car_number:
                  items:
                    format: int32
                    type: integer
                  type: array
                credit_type:
                  format: int32
                  type: integer
                deposit_number:
                  items:
                    format: int64
                    type: integer
                  type: array
                expiration_date:
                  format: date
                  type: string
                gush_number:
                  format: int32
                  type: integer
                helka_number:
                  format: int64
                  type: integer
                number_branch_confidence:
                  format: int32
                  type: integer
                number_confidence:
                  format: int32
                  type: integer
                number_deal:
                  format: int32
                  type: integer
                original_document:
                  format: int32
                  type: integer
                property_type:
                  format: int32
                  type: integer
                serial_nbr_loan_guarantee:
                  format: int32
                  type: integer
                tathelka_number:
                  format: int32
                  type: integer
              type: object
          type: object
    bnhp_paper_doc:
      allOf:
        - $ref: "#/components/schemas/DocPropertyExtension"
        - description: extension for scanned documents
          properties:
            properties:
              properties:
                archive_box_nbr:
                  format: int32
                  type: integer
                archive_date:
                  format: date-time
                  type: string
                archive_film_nbr:
                  format: int32
                  type: integer
                bank_archive_id:
                  format: int32
                  type: integer
                bar_code:
                  type: string
                box_batch_nbr:
                  format: int32
                  type: integer
                box_doc_serial_nbr:
                  format: int32
                  type: integer
                doc_location_code:
                  format: int32
                  type: integer
                document_page_cnt:
                  format: int32
                  type: integer
                film_frame_nbr:
                  format: int32
                  type: integer
                paper_destruction:
                  format: date-time
                  type: string
              type: object
          type: object
    docIdData:
      properties:
        dctmDocumentId:
          type: string
        versionLabels:
          items:
            type: string
          type: array
        versionNumber:
          type: string
      type: object
    documentId:
      type: string
    errorDetails:
      properties:
        errorCode:
          format: int32
          type: integer
        errorDetails:
          type: string
        errorType:
          enum:
            - temporary
            - validation
            - general
          type: string
      type: object
    executorDetails:
      description: Specifies human or software agent behind call to the service. It is mandatory when this information is not provided as part of JWT token from the API gateway (when service is used with with applicative system-level authentication  against API gateway. Not required when such information is provided. If provided the required fields  are ipAddress and executingEmpIdCode. When provided when operations that create/update documents is is suggested to provide executingBranchId and executingBankId because these attributes are used for filtering in document retrieval interfaces of Mesila.
      properties:
        bankolId:
          format: int32
          type: integer
        empIdDocumentTypeCode:
          $ref: "#/components/schemas/CustomerType"
        executingBankId:
          format: int32
          type: integer
        executingBranchId:
          format: int32
          type: integer
        executingEmpFullName:
          type: string
        executingEmpIdCode:
          type: string
        executingUserName:
          type: string
        instructionReceiveTypeCode:
          format: int32
          type: integer
        ipAddress:
          type: string
        terminalChannelId:
          format: int32
          type: integer
      type: object
    fetchType:
      default: content
      description: "Kind of data to be retrieved. If not set and Accept header is received then the standard HTTP content negotiation mechanism will be used. The default is to retrieve object content.\n  * content - binary content for documents, list of entries for folders\n  * meta - object metadata (attributes)\n  * full  - both content and attributes"
      enum:
        - full
        - content
        - meta
      type: string
    idType:
      description: "type of unique object id:\n  * legacyDocumentId - external, created by service user\n  * dctmDocumentId - internal, created automatically by service"
      enum:
        - legacyDocumentId
        - dctmDocumentId
      type: string


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\application.yaml
-----------------------------------------------------
# If this property set to true any exception will return the ApiError object with
# a developer message and a stacktrace.
# False by default.
server:
  port: 8080
  max-http-header-size: 65536
  servlet:
    context-path: /bnhp-api/signature-services/signature
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

application:
  rest-connection-timeout-sec: 10
  rest-read-timeout-sec: 10

management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: health, prometheus, metrics
  endpoint:
    health:
      show-details: always
  health:
    db:
      enabled: true
#for secured connection
#javax:
#  net:
#    ssl:
#      trustStore: ${TRUSTORE_FILE} .jks/.pem
#      trustStorePassword: ${TRUSTORE_PASSWORD}
spring:
  application:
    name: sig-verify-sanitizer

  data:
    mongodb:
      uri: ${MONGODB_URL:mongodb://root:root@localhost:27017/admin}
springdoc:
  cache:
    disabled: true
  api-docs:
    groups:
      enabled: true
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    display-request-duration: true
    path: /swagger-ui
error-handling:
  debug-mode: false
logger:
  appender: ${LOGGER_APPENDER:STDOUT} # possible values: STDOUT / logstash
  level: ${LOGGER_LEVEL:DEBUG}
  client:
    blacklist-headers: authorization, cookie, cookies, jsessionid, registry, x-api-key
    mask-body-values: $.password
env:
  name: ${ENV_NAME:local}


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\logback-spring.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<configuration debug="true" scan="true" scanPeriod="5 seconds">

    <springProperty name="LOGGER_APPENDER" source="logger.appender" value="${logger.appender:-logstash}"/>
    <springProperty name="LOGGER_LEVEL" source="logger.level" value="${logger.level:-INFO}"/>
    <springProperty name="SPRING_APPLICATION_NAME" source="spring.application.name" value="${spring.application.name:-general}"/>
    <springProperty name="ENV_NAME" source="env.name" value="${env.name:local}"/>

    <contextName>testContext</contextName>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- Appender to log to file in a JSON format with LogstashEncoder and mdc-->
    <appender name="logstash" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- Here you can determine the timestamp pattern will be logged -->
            <timestampPattern>dd-MM-yyyy HH:mm:ss.SSS</timestampPattern>

            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                <maxLength>4096</maxLength>
                <shortenedClassNameLength>20</shortenedClassNameLength>
                <exclude>sun\.reflect\..*\.invoke.*</exclude>
                <exclude>net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                <rootCauseFirst>true</rootCauseFirst>
                <inlineHash>true</inlineHash>
            </throwableConverter>
            <!-- Here you can custom the fields name will be logged -->
            <fieldNames>
                <!-- In case you don't want the field will be logged add [ignore] inside the []-->
                <timestamp>timestamp</timestamp>
                <version>[ignore]</version>
                <levelValue>[ignore]</levelValue>
                <level>logLevel</level>
                <logger>loggerName</logger>
                <message>[ignore]</message>
            </fieldNames>
            <!-- In case you want to exclude the mdc -->
            <excludeMdcKeyName>X-B3-TraceId</excludeMdcKeyName>
            <excludeMdcKeyName>X-B3-SpanId</excludeMdcKeyName>
            <excludeMdcKeyName>X-Span-Export</excludeMdcKeyName>
            <excludeMdcKeyName>spanExportable</excludeMdcKeyName>

            <provider class="net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider">
                <pattern>
                    {
                    "message":"%.-10000message"
                    }
                </pattern>
            </provider>

            <customFields>{"application":"${SPRING_APPLICATION_NAME}-${ENV_NAME}"}</customFields>
        </encoder>
    </appender>

    <logger name="org.springframework" level="INFO"/>
    <logger name="org.hibernate" level="INFO"/>
    <logger name="com.zaxxer.hikari" level="${LOGGER_LEVEL:-INFO}"/>
    <logger name="org.apache.http" level="${LOGGER_LEVEL:-INFO}"/>

    <root level="${LOGGER_LEVEL:-INFO}" additivity="false">
        <appender-ref ref="${LOGGER_APPENDER:-logstash}"/>
    </root>


</configuration>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\META-INF\maven\com.poalim\sig-verify-sanitizer\pom.properties
-----------------------------------------------------
#Generated by Maven Integration for Eclipse
#Wed Jun 30 13:36:13 IDT 2021
m2e.projectLocation=C\:\\Users\\AP068\\git\\sig-verify-sanitizer
m2e.projectName=sig-verify-sanitizer
groupId=com.poalim
artifactId=sig-verify-sanitizer
version=0.0.1-SNAPSHOT


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\classes\META-INF\maven\com.poalim\sig-verify-sanitizer\pom.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
	</parent>


	<dependencies>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.5.1</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.11.3</version>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
			<version>1.2.5.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<!-- <exclusion> <groupId>org.yaml</groupId> <artifactId>snakeyaml</artifactId> 
					</exclusion> -->
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> 
			<scope>provided</scope> </dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.poalim.msa</groupId>
			<artifactId>error-handling</artifactId>
			<version>1.2.0-RELEASE</version>
		</dependency>
		<!-- <dependency> <groupId>net.logstash.logback</groupId> <artifactId>logstash-logback-encoder</artifactId> 
			<version>${logstash.version}</version> </dependency> -->

		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> 
			</dependency> <dependency> <groupId>de.flapdoodle.embed</groupId> <artifactId>de.flapdoodle.embed.mongo</artifactId> 
			<scope>test</scope> </dependency> -->
		<!-- <dependency> <groupId>org.openapitools</groupId> <artifactId>openapi-generator-maven-plugin</artifactId> 
			<version>5.1.0</version> <exclusions> <exclusion> <groupId>org.apache.maven</groupId> 
			<artifactId>maven-repository-metadata</artifactId> </exclusion> <exclusion> 
			<groupId>org.apache.maven</groupId> <artifactId>maven-core</artifactId> </exclusion> 
			<exclusion> <groupId>org.yaml</groupId> <artifactId>snakeyaml</artifactId> 
			</exclusion> </exclusions> </dependency> -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>${version.swagger}</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.14.8</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
		</dependency>
	</dependencies>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>11</java.version>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<spring.cloud.version>2020.0.0-M5</spring.cloud.version>
		<logstash.version>6.4</logstash.version>
		<version.swagger>1.5.10</version.swagger>

	</properties>

	<groupId>com.poalim</groupId>
	<artifactId>sig-verify-sanitizer</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<parallel>all</parallel>
					<threadCount>4</threadCount>
					<threadCountSuites>4</threadCountSuites>
					<threadCountClasses>4</threadCountClasses>
					<threadCountMethods>4</threadCountMethods>
					<perCoreThreadCount>true</perCoreThreadCount>
					<includes>
						<include>**</include>
					</includes>
				</configuration>
			</plugin>
			<!-- <plugin> <groupId>org.openapitools</groupId> <artifactId>openapi-generator-maven-plugin</artifactId> 
				<version>5.1.0</version> <executions> <execution> <goals> <goal>generate</goal> 
				</goals> <configuration> <generatorName>java</generatorName> <templateDirectory>template</templateDirectory> 
				<library>resttemplate</library> <serializationLibrary>jackson</serializationLibrary> 
				<inputSpec>swagger.json</inputSpec> <output></output> <apiPackage>com.poalim.sigverifysanitizer.documentum.api</apiPackage> 
				<modelPackage>com.poalim.sigverifysanitizer.documentum.model</modelPackage> 
				<configOptions> <sourceFolder>src/main/java</sourceFolder> <dateLibrary>java8</dateLibrary> 
				</configOptions> </configuration> </execution> </executions> </plugin> -->
		</plugins>
	</build>

</project>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\maven-archiver\pom.properties
-----------------------------------------------------
artifactId=sig-verify-sanitizer
groupId=com.poalim
version=0.0.1-SNAPSHOT


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\surefire-reports\com.poalim.sigverifysanitizer.controller.HomeControllerTest.txt
-----------------------------------------------------
-------------------------------------------------------------------------------
Test set: com.poalim.sigverifysanitizer.controller.HomeControllerTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.675 s - in com.poalim.sigverifysanitizer.controller.HomeControllerTest


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\surefire-reports\TEST-com.poalim.sigverifysanitizer.controller.HomeControllerTest.xml
-----------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.poalim.sigverifysanitizer.controller.HomeControllerTest" time="1.675" tests="1" errors="0" skipped="0" failures="0">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="java.specification.version" value="11"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1255"/>
    <property name="java.class.path" value="C:\Users\AP068\git\sig-verify-sanitizer\target\test-classes;C:\Users\AP068\git\sig-verify-sanitizer\target\classes;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-ui\1.5.1\springdoc-openapi-ui-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-webmvc-core\1.5.1\springdoc-openapi-webmvc-core-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-common\1.5.1\springdoc-openapi-common-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-models\2.1.6\swagger-models-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-annotations\2.1.6\swagger-annotations-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-integration\2.1.6\swagger-integration-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\github\classgraph\classgraph\4.8.69\classgraph-4.8.69.jar;C:\Users\AP068\.m2\.repository_idea\org\webjars\swagger-ui\3.37.2\swagger-ui-3.37.2.jar;C:\Users\AP068\.m2\.repository_idea\org\webjars\webjars-locator-core\0.46\webjars-locator-core-0.46.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\dataformat\jackson-dataformat-xml\2.11.3\jackson-dataformat-xml-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.11.3\jackson-module-jaxb-annotations-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\activation\jakarta.activation-api\1.2.2\jakarta.activation-api-1.2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\woodstox\woodstox-core\6.2.1\woodstox-core-6.2.1.jar;C:\Users\AP068\.m2\.repository_idea\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\AP068\.m2\.repository_idea\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\AP068\.m2\.repository_idea\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\AP068\.m2\.repository_idea\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\retry\spring-retry\1.2.5.RELEASE\spring-retry-1.2.5.RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-core\5.3.2\spring-core-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-jcl\5.3.2\spring-jcl-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\junit\junit\4.13\junit-4.13.jar;C:\Users\AP068\.m2\.repository_idea\org\hamcrest\hamcrest-core\2.2\hamcrest-core-2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-starter-sleuth\3.0.0-M5\spring-cloud-starter-sleuth-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-starter\3.0.0-M5\spring-cloud-starter-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-context\3.0.0-M5\spring-cloud-context-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\security\spring-security-crypto\5.4.2\spring-security-crypto-5.4.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-commons\3.0.0-M5\spring-cloud-commons-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\security\spring-security-rsa\1.0.9.RELEASE\spring-security-rsa-1.0.9.RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\bouncycastle\bcpkix-jdk15on\1.64\bcpkix-jdk15on-1.64.jar;C:\Users\AP068\.m2\.repository_idea\org\bouncycastle\bcprov-jdk15on\1.64\bcprov-jdk15on-1.64.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-aop\2.4.1\spring-boot-starter-aop-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-aop\5.3.2\spring-aop-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\aspectj\aspectjweaver\1.9.6\aspectjweaver-1.9.6.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-sleuth-brave\3.0.0-M5\spring-cloud-sleuth-brave-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-sleuth-core\3.0.0-M5\spring-cloud-sleuth-core-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-context\5.3.2\spring-context-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\aspectj\aspectjrt\1.9.6\aspectjrt-1.9.6.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave\5.13.1\brave-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-context-slf4j\5.13.1\brave-context-slf4j-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-messaging\5.13.1\brave-instrumentation-messaging-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-rpc\5.13.1\brave-instrumentation-rpc-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-spring-rabbit\5.13.1\brave-instrumentation-spring-rabbit-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-kafka-clients\5.13.1\brave-instrumentation-kafka-clients-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-kafka-streams\5.13.1\brave-instrumentation-kafka-streams-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-httpclient\5.13.1\brave-instrumentation-httpclient-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-http\5.13.1\brave-instrumentation-http-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-httpasyncclient\5.13.1\brave-instrumentation-httpasyncclient-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-jms\5.13.1\brave-instrumentation-jms-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-mongodb\5.13.1\brave-instrumentation-mongodb-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\aws\brave-propagation-aws\0.21.3\brave-propagation-aws-0.21.3.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\reporter2\zipkin-reporter-metrics-micrometer\2.16.0\zipkin-reporter-metrics-micrometer-2.16.0.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\reporter2\zipkin-reporter\2.16.0\zipkin-reporter-2.16.0.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\zipkin2\zipkin\2.22.2\zipkin-2.22.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-web\2.4.1\spring-boot-starter-web-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter\2.4.1\spring-boot-starter-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot\2.4.1\spring-boot-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-logging\2.4.1\spring-boot-starter-logging-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-json\2.4.1\spring-boot-starter-json-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-tomcat\2.4.1\spring-boot-starter-tomcat-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\tomcat\embed\tomcat-embed-core\9.0.41\tomcat-embed-core-9.0.41.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.41\tomcat-embed-websocket-9.0.41.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-web\5.3.2\spring-web-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-beans\5.3.2\spring-beans-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-webmvc\5.3.2\spring-webmvc-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-expression\5.3.2\spring-expression-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-actuator\2.4.1\spring-boot-starter-actuator-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-actuator-autoconfigure\2.4.1\spring-boot-actuator-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-actuator\2.4.1\spring-boot-actuator-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\io\micrometer\micrometer-core\1.6.2\micrometer-core-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\org\hdrhistogram\HdrHistogram\2.1.12\HdrHistogram-2.1.12.jar;C:\Users\AP068\.m2\.repository_idea\org\latencyutils\LatencyUtils\2.0.3\LatencyUtils-2.0.3.jar;C:\Users\AP068\.m2\.repository_idea\io\micrometer\micrometer-registry-prometheus\1.6.2\micrometer-registry-prometheus-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\prometheus\simpleclient_common\0.9.0\simpleclient_common-0.9.0.jar;C:\Users\AP068\.m2\.repository_idea\io\prometheus\simpleclient\0.9.0\simpleclient-0.9.0.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-validation\2.4.1\spring-boot-starter-validation-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\hibernate\validator\hibernate-validator\6.1.6.Final\hibernate-validator-6.1.6.Final.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar;C:\Users\AP068\.m2\.repository_idea\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-configuration-processor\2.4.1\spring-boot-configuration-processor-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-test\2.4.1\spring-boot-starter-test-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-test\2.4.1\spring-boot-test-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-test-autoconfigure\2.4.1\spring-boot-test-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\xml\bind\jakarta.xml.bind-api\2.3.3\jakarta.xml.bind-api-2.3.3.jar;C:\Users\AP068\.m2\.repository_idea\org\assertj\assertj-core\3.18.1\assertj-core-3.18.1.jar;C:\Users\AP068\.m2\.repository_idea\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter\5.7.0\junit-jupiter-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-api\5.7.0\junit-jupiter-api-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\AP068\.m2\.repository_idea\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\platform\junit-platform-commons\1.7.0\junit-platform-commons-1.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-params\5.7.0\junit-jupiter-params-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-engine\5.7.0\junit-jupiter-engine-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\platform\junit-platform-engine\1.7.0\junit-platform-engine-1.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\mockito\mockito-core\3.6.28\mockito-core-3.6.28.jar;C:\Users\AP068\.m2\.repository_idea\net\bytebuddy\byte-buddy\1.10.18\byte-buddy-1.10.18.jar;C:\Users\AP068\.m2\.repository_idea\net\bytebuddy\byte-buddy-agent\1.10.18\byte-buddy-agent-1.10.18.jar;C:\Users\AP068\.m2\.repository_idea\org\objenesis\objenesis\3.1\objenesis-3.1.jar;C:\Users\AP068\.m2\.repository_idea\org\mockito\mockito-junit-jupiter\3.6.28\mockito-junit-jupiter-3.6.28.jar;C:\Users\AP068\.m2\.repository_idea\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\AP068\.m2\.repository_idea\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-test\5.3.2\spring-test-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\xmlunit\xmlunit-core\2.7.0\xmlunit-core-2.7.0.jar;C:\Users\AP068\.m2\.repository_idea\com\poalim\msa\error-handling\1.2.0-RELEASE\error-handling-1.2.0-RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-autoconfigure\2.4.1\spring-boot-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator-maven-plugin\5.1.0\openapi-generator-maven-plugin-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\org\sonatype\plexus\plexus-build-api\0.0.7\plexus-build-api-0.0.7.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-utils\1.5.8\plexus-utils-1.5.8.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-compat\3.5.0\maven-compat-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-model\3.5.0\maven-model-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-model-builder\3.5.0\maven-model-builder-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-builder-support\3.5.0\maven-builder-support-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-settings\3.5.0\maven-settings-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-artifact\3.5.0\maven-artifact-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-resolver-provider\3.5.0\maven-resolver-provider-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-spi\1.0.3\maven-resolver-spi-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-api\1.0.3\maven-resolver-api-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-util\1.0.3\maven-resolver-util-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-impl\1.0.3\maven-resolver-impl-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-interpolation\1.24\plexus-interpolation-1.24.jar;C:\Users\AP068\.m2\.repository_idea\org\eclipse\sisu\org.eclipse.sisu.plexus\0.3.3\org.eclipse.sisu.plexus-0.3.3.jar;C:\Users\AP068\.m2\.repository_idea\javax\enterprise\cdi-api\1.0\cdi-api-1.0.jar;C:\Users\AP068\.m2\.repository_idea\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\AP068\.m2\.repository_idea\javax\inject\javax.inject\1\javax.inject-1.jar;C:\Users\AP068\.m2\.repository_idea\org\eclipse\sisu\org.eclipse.sisu.inject\0.3.3\org.eclipse.sisu.inject-0.3.3.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-classworlds\2.5.2\plexus-classworlds-2.5.2.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-component-annotations\1.7.1\plexus-component-annotations-1.7.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\wagon\wagon-provider-api\2.12\wagon-provider-api-2.12.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-plugin-api\3.3.1\maven-plugin-api-3.3.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\plugin-tools\maven-plugin-annotations\3.4\maven-plugin-annotations-3.4.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator\5.1.0\openapi-generator-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-core\2.1.2\swagger-core-2.1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.11.3\jackson-dataformat-yaml-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser\2.0.24\swagger-parser-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-v2-converter\2.0.24\swagger-parser-v2-converter-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-core\1.6.2\swagger-core-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-models\1.6.2\swagger-models-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-annotations\1.6.2\swagger-annotations-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-parser\1.0.53\swagger-parser-1.0.53.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-compat-spec-parser\1.0.53\swagger-compat-spec-parser-1.0.53.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-schema-validator\2.2.14\json-schema-validator-2.2.14.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\jackson-coreutils-equivalence\1.0\jackson-coreutils-equivalence-1.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-schema-core\1.2.14\json-schema-core-1.2.14.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\uri-template\0.10\uri-template-0.10.jar;C:\Users\AP068\.m2\.repository_idea\org\mozilla\rhino\1.7.7.2\rhino-1.7.7.2.jar;C:\Users\AP068\.m2\.repository_idea\com\sun\mail\mailapi\1.6.2\mailapi-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\com\googlecode\libphonenumber\libphonenumber\8.11.1\libphonenumber-8.11.1.jar;C:\Users\AP068\.m2\.repository_idea\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-patch\1.13\json-patch-1.13.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\msg-simple\1.2\msg-simple-1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\btf\1.3\btf-1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\jackson-coreutils\2.0\jackson-coreutils-2.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\httpcomponents\httpcore\4.4.14\httpcore-4.4.14.jar;C:\Users\AP068\.m2\.repository_idea\commons-codec\commons-codec\1.15\commons-codec-1.15.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-core\2.0.24\swagger-parser-core-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-v3\2.0.24\swagger-parser-v3-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\com\samskivert\jmustache\1.15\jmustache-1.15.jar;C:\Users\AP068\.m2\.repository_idea\com\github\jknack\handlebars\4.1.2\handlebars-4.1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\github\jknack\handlebars-jackson2\4.1.2\handlebars-jackson2-4.1.2.jar;C:\Users\AP068\.m2\.repository_idea\commons-io\commons-io\2.4\commons-io-2.4.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-ext\1.7.30\slf4j-ext-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-simple\1.7.30\slf4j-simple-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\AP068\.m2\.repository_idea\commons-cli\commons-cli\1.2\commons-cli-1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\google\guava\guava\26.0-jre\guava-26.0-jre.jar;C:\Users\AP068\.m2\.repository_idea\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\AP068\.m2\.repository_idea\org\checkerframework\checker-qual\2.5.2\checker-qual-2.5.2.jar;C:\Users\AP068\.m2\.repository_idea\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-guava\2.11.3\jackson-datatype-guava-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\atlassian\commonmark\commonmark\0.11.0\commonmark-0.11.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\mifmif\generex\1.0.2\generex-1.0.2.jar;C:\Users\AP068\.m2\.repository_idea\dk\brics\automaton\automaton\1.11-8\automaton-1.11-8.jar;C:\Users\AP068\.m2\.repository_idea\com\github\curious-odd-man\rgxgen\1.3\rgxgen-1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-joda\2.11.3\jackson-datatype-joda-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar;C:\Users\AP068\.m2\.repository_idea\com\github\joschi\jackson\jackson-datatype-threetenbp\2.10.0\jackson-datatype-threetenbp-2.10.0.jar;C:\Users\AP068\.m2\.repository_idea\org\threeten\threetenbp\1.4.0\threetenbp-1.4.0.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator-core\5.1.0\openapi-generator-core-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\net\java\dev\jna\jna\5.5.0\jna-5.5.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\ben-manes\caffeine\caffeine\2.8.8\caffeine-2.8.8.jar;C:\Users\AP068\.m2\.repository_idea\org\projectlombok\lombok\1.14.8\lombok-1.14.8.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Jerusalem"/>
    <property name="user.country.format" value="IL"/>
    <property name="java.vm.specification.version" value="11"/>
    <property name="os.name" value="Windows 10"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\shai\java\jdk-11.0.2\bin"/>
    <property name="sun.java.command" value="C:\Users\AP068\AppData\Local\Temp\surefire4015702415220291452\surefirebooter5628880893900397159.jar C:\Users\AP068\AppData\Local\Temp\surefire4015702415220291452 2021-05-25T14-41-15_138-jvmRun1 surefire8260276592150688573tmp surefire_03863302872440829899tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\AP068\git\sig-verify-sanitizer\target\test-classes;C:\Users\AP068\git\sig-verify-sanitizer\target\classes;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-ui\1.5.1\springdoc-openapi-ui-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-webmvc-core\1.5.1\springdoc-openapi-webmvc-core-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springdoc\springdoc-openapi-common\1.5.1\springdoc-openapi-common-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-models\2.1.6\swagger-models-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-annotations\2.1.6\swagger-annotations-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-integration\2.1.6\swagger-integration-2.1.6.jar;C:\Users\AP068\.m2\.repository_idea\io\github\classgraph\classgraph\4.8.69\classgraph-4.8.69.jar;C:\Users\AP068\.m2\.repository_idea\org\webjars\swagger-ui\3.37.2\swagger-ui-3.37.2.jar;C:\Users\AP068\.m2\.repository_idea\org\webjars\webjars-locator-core\0.46\webjars-locator-core-0.46.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\dataformat\jackson-dataformat-xml\2.11.3\jackson-dataformat-xml-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.11.3\jackson-module-jaxb-annotations-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\activation\jakarta.activation-api\1.2.2\jakarta.activation-api-1.2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\woodstox\woodstox-core\6.2.1\woodstox-core-6.2.1.jar;C:\Users\AP068\.m2\.repository_idea\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\AP068\.m2\.repository_idea\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\AP068\.m2\.repository_idea\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\AP068\.m2\.repository_idea\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\retry\spring-retry\1.2.5.RELEASE\spring-retry-1.2.5.RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-core\5.3.2\spring-core-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-jcl\5.3.2\spring-jcl-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\junit\junit\4.13\junit-4.13.jar;C:\Users\AP068\.m2\.repository_idea\org\hamcrest\hamcrest-core\2.2\hamcrest-core-2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-starter-sleuth\3.0.0-M5\spring-cloud-starter-sleuth-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-starter\3.0.0-M5\spring-cloud-starter-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-context\3.0.0-M5\spring-cloud-context-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\security\spring-security-crypto\5.4.2\spring-security-crypto-5.4.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-commons\3.0.0-M5\spring-cloud-commons-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\security\spring-security-rsa\1.0.9.RELEASE\spring-security-rsa-1.0.9.RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\bouncycastle\bcpkix-jdk15on\1.64\bcpkix-jdk15on-1.64.jar;C:\Users\AP068\.m2\.repository_idea\org\bouncycastle\bcprov-jdk15on\1.64\bcprov-jdk15on-1.64.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-aop\2.4.1\spring-boot-starter-aop-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-aop\5.3.2\spring-aop-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\aspectj\aspectjweaver\1.9.6\aspectjweaver-1.9.6.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-sleuth-brave\3.0.0-M5\spring-cloud-sleuth-brave-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\cloud\spring-cloud-sleuth-core\3.0.0-M5\spring-cloud-sleuth-core-3.0.0-M5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-context\5.3.2\spring-context-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\aspectj\aspectjrt\1.9.6\aspectjrt-1.9.6.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave\5.13.1\brave-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-context-slf4j\5.13.1\brave-context-slf4j-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-messaging\5.13.1\brave-instrumentation-messaging-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-rpc\5.13.1\brave-instrumentation-rpc-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-spring-rabbit\5.13.1\brave-instrumentation-spring-rabbit-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-kafka-clients\5.13.1\brave-instrumentation-kafka-clients-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-kafka-streams\5.13.1\brave-instrumentation-kafka-streams-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-httpclient\5.13.1\brave-instrumentation-httpclient-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-http\5.13.1\brave-instrumentation-http-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-httpasyncclient\5.13.1\brave-instrumentation-httpasyncclient-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-jms\5.13.1\brave-instrumentation-jms-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\brave\brave-instrumentation-mongodb\5.13.1\brave-instrumentation-mongodb-5.13.1.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\aws\brave-propagation-aws\0.21.3\brave-propagation-aws-0.21.3.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\reporter2\zipkin-reporter-metrics-micrometer\2.16.0\zipkin-reporter-metrics-micrometer-2.16.0.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\reporter2\zipkin-reporter\2.16.0\zipkin-reporter-2.16.0.jar;C:\Users\AP068\.m2\.repository_idea\io\zipkin\zipkin2\zipkin\2.22.2\zipkin-2.22.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-web\2.4.1\spring-boot-starter-web-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter\2.4.1\spring-boot-starter-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot\2.4.1\spring-boot-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-logging\2.4.1\spring-boot-starter-logging-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-json\2.4.1\spring-boot-starter-json-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-tomcat\2.4.1\spring-boot-starter-tomcat-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\tomcat\embed\tomcat-embed-core\9.0.41\tomcat-embed-core-9.0.41.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.41\tomcat-embed-websocket-9.0.41.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-web\5.3.2\spring-web-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-beans\5.3.2\spring-beans-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-webmvc\5.3.2\spring-webmvc-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-expression\5.3.2\spring-expression-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-actuator\2.4.1\spring-boot-starter-actuator-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-actuator-autoconfigure\2.4.1\spring-boot-actuator-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-actuator\2.4.1\spring-boot-actuator-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\io\micrometer\micrometer-core\1.6.2\micrometer-core-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\org\hdrhistogram\HdrHistogram\2.1.12\HdrHistogram-2.1.12.jar;C:\Users\AP068\.m2\.repository_idea\org\latencyutils\LatencyUtils\2.0.3\LatencyUtils-2.0.3.jar;C:\Users\AP068\.m2\.repository_idea\io\micrometer\micrometer-registry-prometheus\1.6.2\micrometer-registry-prometheus-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\prometheus\simpleclient_common\0.9.0\simpleclient_common-0.9.0.jar;C:\Users\AP068\.m2\.repository_idea\io\prometheus\simpleclient\0.9.0\simpleclient-0.9.0.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-validation\2.4.1\spring-boot-starter-validation-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\hibernate\validator\hibernate-validator\6.1.6.Final\hibernate-validator-6.1.6.Final.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar;C:\Users\AP068\.m2\.repository_idea\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-configuration-processor\2.4.1\spring-boot-configuration-processor-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-starter-test\2.4.1\spring-boot-starter-test-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-test\2.4.1\spring-boot-test-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-test-autoconfigure\2.4.1\spring-boot-test-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\jakarta\xml\bind\jakarta.xml.bind-api\2.3.3\jakarta.xml.bind-api-2.3.3.jar;C:\Users\AP068\.m2\.repository_idea\org\assertj\assertj-core\3.18.1\assertj-core-3.18.1.jar;C:\Users\AP068\.m2\.repository_idea\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter\5.7.0\junit-jupiter-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-api\5.7.0\junit-jupiter-api-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\AP068\.m2\.repository_idea\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\platform\junit-platform-commons\1.7.0\junit-platform-commons-1.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-params\5.7.0\junit-jupiter-params-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\jupiter\junit-jupiter-engine\5.7.0\junit-jupiter-engine-5.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\junit\platform\junit-platform-engine\1.7.0\junit-platform-engine-1.7.0.jar;C:\Users\AP068\.m2\.repository_idea\org\mockito\mockito-core\3.6.28\mockito-core-3.6.28.jar;C:\Users\AP068\.m2\.repository_idea\net\bytebuddy\byte-buddy\1.10.18\byte-buddy-1.10.18.jar;C:\Users\AP068\.m2\.repository_idea\net\bytebuddy\byte-buddy-agent\1.10.18\byte-buddy-agent-1.10.18.jar;C:\Users\AP068\.m2\.repository_idea\org\objenesis\objenesis\3.1\objenesis-3.1.jar;C:\Users\AP068\.m2\.repository_idea\org\mockito\mockito-junit-jupiter\3.6.28\mockito-junit-jupiter-3.6.28.jar;C:\Users\AP068\.m2\.repository_idea\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\AP068\.m2\.repository_idea\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\spring-test\5.3.2\spring-test-5.3.2.jar;C:\Users\AP068\.m2\.repository_idea\org\xmlunit\xmlunit-core\2.7.0\xmlunit-core-2.7.0.jar;C:\Users\AP068\.m2\.repository_idea\com\poalim\msa\error-handling\1.2.0-RELEASE\error-handling-1.2.0-RELEASE.jar;C:\Users\AP068\.m2\.repository_idea\org\springframework\boot\spring-boot-autoconfigure\2.4.1\spring-boot-autoconfigure-2.4.1.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator-maven-plugin\5.1.0\openapi-generator-maven-plugin-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\org\sonatype\plexus\plexus-build-api\0.0.7\plexus-build-api-0.0.7.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-utils\1.5.8\plexus-utils-1.5.8.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-compat\3.5.0\maven-compat-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-model\3.5.0\maven-model-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-model-builder\3.5.0\maven-model-builder-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-builder-support\3.5.0\maven-builder-support-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-settings\3.5.0\maven-settings-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-artifact\3.5.0\maven-artifact-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-resolver-provider\3.5.0\maven-resolver-provider-3.5.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-spi\1.0.3\maven-resolver-spi-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-api\1.0.3\maven-resolver-api-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-util\1.0.3\maven-resolver-util-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\resolver\maven-resolver-impl\1.0.3\maven-resolver-impl-1.0.3.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-interpolation\1.24\plexus-interpolation-1.24.jar;C:\Users\AP068\.m2\.repository_idea\org\eclipse\sisu\org.eclipse.sisu.plexus\0.3.3\org.eclipse.sisu.plexus-0.3.3.jar;C:\Users\AP068\.m2\.repository_idea\javax\enterprise\cdi-api\1.0\cdi-api-1.0.jar;C:\Users\AP068\.m2\.repository_idea\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\AP068\.m2\.repository_idea\javax\inject\javax.inject\1\javax.inject-1.jar;C:\Users\AP068\.m2\.repository_idea\org\eclipse\sisu\org.eclipse.sisu.inject\0.3.3\org.eclipse.sisu.inject-0.3.3.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-classworlds\2.5.2\plexus-classworlds-2.5.2.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\plexus\plexus-component-annotations\1.7.1\plexus-component-annotations-1.7.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\wagon\wagon-provider-api\2.12\wagon-provider-api-2.12.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\maven-plugin-api\3.3.1\maven-plugin-api-3.3.1.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\maven\plugin-tools\maven-plugin-annotations\3.4\maven-plugin-annotations-3.4.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator\5.1.0\openapi-generator-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\core\v3\swagger-core\2.1.2\swagger-core-2.1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.11.3\jackson-dataformat-yaml-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser\2.0.24\swagger-parser-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-v2-converter\2.0.24\swagger-parser-v2-converter-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-core\1.6.2\swagger-core-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-models\1.6.2\swagger-models-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-annotations\1.6.2\swagger-annotations-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-parser\1.0.53\swagger-parser-1.0.53.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\swagger-compat-spec-parser\1.0.53\swagger-compat-spec-parser-1.0.53.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-schema-validator\2.2.14\json-schema-validator-2.2.14.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\jackson-coreutils-equivalence\1.0\jackson-coreutils-equivalence-1.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-schema-core\1.2.14\json-schema-core-1.2.14.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\uri-template\0.10\uri-template-0.10.jar;C:\Users\AP068\.m2\.repository_idea\org\mozilla\rhino\1.7.7.2\rhino-1.7.7.2.jar;C:\Users\AP068\.m2\.repository_idea\com\sun\mail\mailapi\1.6.2\mailapi-1.6.2.jar;C:\Users\AP068\.m2\.repository_idea\com\googlecode\libphonenumber\libphonenumber\8.11.1\libphonenumber-8.11.1.jar;C:\Users\AP068\.m2\.repository_idea\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\json-patch\1.13\json-patch-1.13.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\msg-simple\1.2\msg-simple-1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\btf\1.3\btf-1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\github\java-json-tools\jackson-coreutils\2.0\jackson-coreutils-2.0.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\httpcomponents\httpcore\4.4.14\httpcore-4.4.14.jar;C:\Users\AP068\.m2\.repository_idea\commons-codec\commons-codec\1.15\commons-codec-1.15.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-core\2.0.24\swagger-parser-core-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\io\swagger\parser\v3\swagger-parser-v3\2.0.24\swagger-parser-v3-2.0.24.jar;C:\Users\AP068\.m2\.repository_idea\com\samskivert\jmustache\1.15\jmustache-1.15.jar;C:\Users\AP068\.m2\.repository_idea\com\github\jknack\handlebars\4.1.2\handlebars-4.1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\github\jknack\handlebars-jackson2\4.1.2\handlebars-jackson2-4.1.2.jar;C:\Users\AP068\.m2\.repository_idea\commons-io\commons-io\2.4\commons-io-2.4.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-ext\1.7.30\slf4j-ext-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\slf4j\slf4j-simple\1.7.30\slf4j-simple-1.7.30.jar;C:\Users\AP068\.m2\.repository_idea\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\AP068\.m2\.repository_idea\commons-cli\commons-cli\1.2\commons-cli-1.2.jar;C:\Users\AP068\.m2\.repository_idea\com\google\guava\guava\26.0-jre\guava-26.0-jre.jar;C:\Users\AP068\.m2\.repository_idea\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\AP068\.m2\.repository_idea\org\checkerframework\checker-qual\2.5.2\checker-qual-2.5.2.jar;C:\Users\AP068\.m2\.repository_idea\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar;C:\Users\AP068\.m2\.repository_idea\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-guava\2.11.3\jackson-datatype-guava-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\com\atlassian\commonmark\commonmark\0.11.0\commonmark-0.11.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\mifmif\generex\1.0.2\generex-1.0.2.jar;C:\Users\AP068\.m2\.repository_idea\dk\brics\automaton\automaton\1.11-8\automaton-1.11-8.jar;C:\Users\AP068\.m2\.repository_idea\com\github\curious-odd-man\rgxgen\1.3\rgxgen-1.3.jar;C:\Users\AP068\.m2\.repository_idea\com\fasterxml\jackson\datatype\jackson-datatype-joda\2.11.3\jackson-datatype-joda-2.11.3.jar;C:\Users\AP068\.m2\.repository_idea\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar;C:\Users\AP068\.m2\.repository_idea\com\github\joschi\jackson\jackson-datatype-threetenbp\2.10.0\jackson-datatype-threetenbp-2.10.0.jar;C:\Users\AP068\.m2\.repository_idea\org\threeten\threetenbp\1.4.0\threetenbp-1.4.0.jar;C:\Users\AP068\.m2\.repository_idea\org\openapitools\openapi-generator-core\5.1.0\openapi-generator-core-5.1.0.jar;C:\Users\AP068\.m2\.repository_idea\net\java\dev\jna\jna\5.5.0\jna-5.5.0.jar;C:\Users\AP068\.m2\.repository_idea\com\github\ben-manes\caffeine\caffeine\2.8.8\caffeine-2.8.8.jar;C:\Users\AP068\.m2\.repository_idea\org\projectlombok\lombok\1.14.8\lombok-1.14.8.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\AP068"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2019-01-15"/>
    <property name="java.home" value="C:\shai\java\jdk-11.0.2"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\AP068\git\sig-verify-sanitizer"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\AP068\AppData\Local\Temp\surefire4015702415220291452\surefirebooter5628880893900397159.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="11.0.2+9"/>
    <property name="user.name" value="AP068"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="Cp1255"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="18.9"/>
    <property name="localRepository" value="C:\Users\AP068\.m2\.repository_idea"/>
    <property name="java.vendor.url.bug" value="http://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\AP068\AppData\Local\Temp\"/>
    <property name="idea.version" value="2021.1"/>
    <property name="java.version" value="11.0.2"/>
    <property name="user.dir" value="C:\Users\AP068\git\sig-verify-sanitizer"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\shai\java\jdk-11.0.2\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;c:\Program Files\Java\jdk1.8.0_261\bin;C:\shai\software\apache-maven-3.5.3\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;E:\Applw32;C:\snifapps\Applw32;C:\ProgramData\Oracle\Java\javapath;C:\WBIO;C:\Program Files\Citrix\System32\;C:\Program Files\Citrix\ICAService\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Go\bin;c:\shai\software\openshift-client-windows-4.4.3;c:\Users\AP068\AppData\Local\Programs\Python\Python39;c:\Users\AP068\AppData\Local\Programs\Python\Python39\Scripts;C:\Users\AP068\dctm\HeadlessComposer\7.1\plugins\org.apache.ant_1.8.3.v20120321-1730\bin;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;c:\shai\software\msys64\;C:\Program Files (x86)\Webex\Webex\Applications;C:\Program Files\Docker\Docker\resources\bin;C:\ProgramData\DockerDesktop\version-bin;C:\Program Files\WinMerge;C:\shai\software\dos2unix\bin;C:\Users\AP068\AppData\Local\Microsoft\WindowsApps;C:\Users\AP068\AppData\Roaming\npm;C:\Users\AP068\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\AP068\dctm\HeadlessComposer\7.1\plugins\org.apache.ant_1.8.3.v20120321-1730\bin;c:\Users\AP068\git\hapoalim-service-generator\frontend\poalim-ng\node_modules\.bin;;C:\Users\AP068\AppData\Local\Programs\Fiddler;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.1\bin;;."/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vm.version" value="11.0.2+9"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="maven.repo.local" value="C:\Users\AP068\.m2\.repository_idea"/>
    <property name="java.class.version" value="55.0"/>
  </properties>
  <testcase name="sampleApiTest" classname="com.poalim.sigverifysanitizer.controller.HomeControllerTest" time="1.667"/>
</testsuite>


file Read:C:\Users\AP068\git\sig-verify-sanitizer\target\test-classes\application-default.yaml
-----------------------------------------------------

total files:299
